(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1093475,      21991]
NotebookOptionsPosition[   1081182,      21780]
NotebookOutlinePosition[   1081556,      21796]
CellTagsIndexPosition[   1081513,      21793]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["Ve"], "Input",
 CellChangeTimes->{{3.803624474684723*^9, 
  3.803624511687245*^9}},ExpressionUUID->"d64a66e7-9ae1-499f-9a6b-\
8f3b64beae89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Array", "[", 
  RowBox[{"1", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.803624586399736*^9, 3.8036246092432537`*^9}, {
  3.803624656167501*^9, 3.803624664448998*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"3025526a-d9d6-4675-8459-fa2b397114a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "[", "1", "]"}], ",", 
   RowBox[{"1", "[", "2", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.803624666068117*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"0c08e939-e610-413a-90fd-44e946b7a303"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Array", "[", 
    RowBox[{"2", ",", "2"}], "]"}], "+", 
   RowBox[{"Array", "[", 
    RowBox[{"1", ",", "2"}], "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.803624674190761*^9, 3.8036247517461987`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"696a7ee5-0c83-41a9-8274-bd18266816c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "[", "1", "]"}], "+", 
    RowBox[{"2", "[", "1", "]"}]}], ",", 
   RowBox[{
    RowBox[{"1", "[", "2", "]"}], "+", 
    RowBox[{"2", "[", "2", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.803624721047942*^9, 3.8036247533547087`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"c8adee1c-5e16-4d78-897f-4a35fa445cec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"1", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.803624854153867*^9, 3.8036248595335608`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"d8fbd6e8-28a4-4651-9f95-4025d4b8ce8f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.803624860401209*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"44979026-f6cd-448c-95dd-f0f08c8883b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}], "+", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.803624878837545*^9, 3.8036248949453783`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"770f7b71-5a58-4137-87ff-38c3720c1852"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.803624896532436*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"69c3613d-98e0-46c2-873b-4a2c697a6c69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"r", " ", "*", 
     RowBox[{"Sin", "[", "y", "]"}], "f"}], "+", "a"}], ",", 
   RowBox[{"r", "*", 
    RowBox[{"Cos", "[", "y", "]"}], "*", "f"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.803624901991226*^9, 3.8036249924704247`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"1f6aa856-fda5-440a-91c2-2fab9c74b870"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "+", 
    RowBox[{"f", " ", "r", " ", 
     RowBox[{"Sin", "[", "y", "]"}]}]}], ",", 
   RowBox[{"f", " ", "r", " ", 
    RowBox[{"Cos", "[", "y", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8036250048513813`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"fd7eb6c2-bf03-4534-9091-851d2c49ced4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "+", 
     RowBox[{"f", " ", "r", " ", 
      RowBox[{"Sin", "[", "y", "]"}]}]}], ",", 
    RowBox[{"f", " ", "r", " ", 
     RowBox[{"Cos", "[", "y", "]"}]}]}], "}"}], "^", "2"}]], "Input",
 CellChangeTimes->{{3.803625034818944*^9, 3.803625039877212*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"aeb8d8c4-d83d-4088-8305-47254b8515d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"a", "+", 
      RowBox[{"f", " ", "r", " ", 
       RowBox[{"Sin", "[", "y", "]"}]}]}], ")"}], "2"], ",", 
   RowBox[{
    SuperscriptBox["f", "2"], " ", 
    SuperscriptBox["r", "2"], " ", 
    SuperscriptBox[
     RowBox[{"Cos", "[", "y", "]"}], "2"]}]}], "}"}]], "Output",
 CellChangeTimes->{3.803625040934717*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"f7ad93d9-91ee-492c-a0ea-9abd0ee32960"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803625087033798*^9, 3.803625103869109*^9}, {
   3.803625167144355*^9, 3.803625172489966*^9}, 
   3.803625250922162*^9},ExpressionUUID->"9177232e-084a-443e-83ca-\
d57adbee1558"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"Dot", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "+", 
      RowBox[{"f", " ", "r", " ", 
       RowBox[{"Sin", "[", "y", "]"}]}]}], ",", 
     RowBox[{"f", " ", "r", " ", 
      RowBox[{"Cos", "[", "y", "]"}]}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.80362525990515*^9, 3.803625295833564*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"277642a3-e62a-48c3-a364-3d3fb4fed57f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Dot", " ", 
    RowBox[{"(", 
     RowBox[{"a", "+", 
      RowBox[{"f", " ", "r", " ", 
       RowBox[{"Sin", "[", "y", "]"}]}]}], ")"}]}], ",", 
   RowBox[{"Dot", " ", "f", " ", "r", " ", 
    RowBox[{"Cos", "[", "y", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.803625275858247*^9, 3.803625298205346*^9}},
 CellLabel->"Out[9]=",ExpressionUUID->"ec7bb4a3-ca6d-4c17-801a-1b15a6eb433a"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803625331148097*^9, 
  3.8036253623904467`*^9}},ExpressionUUID->"fcb07d99-8335-4505-a656-\
61e8e730b7b8"],

Cell[BoxData[
 RowBox[{"a", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"r", " ", "*", 
      RowBox[{"Sin", "[", "y", "]"}], "f"}], "+", "a"}], ",", 
    RowBox[{"r", "*", 
     RowBox[{"Cos", "[", "y", "]"}], "*", "f"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.80362537340676*^9, 3.803625382754136*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"bd346f3f-eb52-450f-ab33-9ced30afb7b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.803625385410285*^9, 3.803625385851431*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"26115405-e992-4cb1-b378-f379fde8bace"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,11,1,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803625387038303*^9},
 CellLabel->
  "During evaluation of \
In[11]:=",ExpressionUUID->"85433d1b-3fd8-4d11-9acf-0fb84f922f3e"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"r", " ", 
      RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
    RowBox[{"r", " ", 
     RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.803625387050633*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"4ba55423-a5a1-401b-9ed6-7d573229dacc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "+", "2"}]], "Input",
 CellChangeTimes->{{3.803625390741931*^9, 3.803625392654265*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"35ea378b-cff4-4495-b533-c0af17594134"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,12,2,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803625393762924*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"db1088d1-4411-4d8f-885a-0235cf68aba0"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"a", "+", "2"}], "]"}]], "Output",
 CellChangeTimes->{3.803625393767108*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"8b2c2515-d045-4f1a-a077-3e7568dfe788"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dot", "[", 
  RowBox[{"a", ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.803625408689582*^9, 3.803625415499661*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"4188b3c5-d2ab-4033-bb3e-1e4dfb787bc5"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,13,3,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803625416285468*^9},
 CellLabel->
  "During evaluation of \
In[13]:=",ExpressionUUID->"0e09ef3c-aab7-4fef-86a9-9aeec2645203"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803625434117552*^9, 
  3.803625438013143*^9}},ExpressionUUID->"5cca6626-e0e4-49ca-b55f-\
058bf1181a2e"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"a", ".", "a"}], "]"}]], "Output",
 CellChangeTimes->{3.8036254162898817`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"787bb65a-d892-450d-ab8c-573ca60b1f7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{"a", ".", "a"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[14]:=",ExpressionUUID->"fa2f88ee-5c62-4ac0-a145-9a368966115f"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,14,4,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803625444178937*^9},
 CellLabel->
  "During evaluation of \
In[14]:=",ExpressionUUID->"cc7ca34a-6484-480a-ab45-aef41cea9940"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"a", ".", "a"}], "]"}]], "Output",
 CellChangeTimes->{3.80362544418539*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"864ff497-e36e-4f73-a2eb-bfc6b8029f80"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["a"], "Input",
 CellChangeTimes->{3.8036254577444983`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"60674c69-8ffe-40ab-9e23-2d8cb9573cb7"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,15,5,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803625459077462*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"c50d4acb-8e7a-450a-a883-46c99eff15ef"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"r", " ", 
      RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
    RowBox[{"r", " ", 
     RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.8036254590833817`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"3a60b9a0-daf0-40e9-aab2-46e375322af9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"r", " ", "*", 
       RowBox[{"Sin", "[", "y", "]"}], "f"}], "+", "a"}], ",", 
     RowBox[{"r", "*", 
      RowBox[{"Cos", "[", "y", "]"}], "*", "f"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"r", " ", "*", 
       RowBox[{"Sin", "[", "y", "]"}], "f"}], "+", "a"}], ",", 
     RowBox[{"r", "*", 
      RowBox[{"Cos", "[", "y", "]"}], "*", "f"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8036254858513193`*^9, 3.8036255085469437`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"582135ae-6299-430a-8b52-75ae6eec5fdc"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,16,6,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8036255099009237`*^9},
 CellLabel->
  "During evaluation of \
In[16]:=",ExpressionUUID->"f6aff396-46ae-4563-b63f-74544f810c0b"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"r", " ", 
       RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
     RowBox[{"r", " ", 
      RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}], ".", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"r", " ", 
       RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
     RowBox[{"r", " ", 
      RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}]}], "]"}]], "Output",\

 CellChangeTimes->{3.803625509905261*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"d1ddfd6d-a71a-4c2d-8f7e-d32fef71a832"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"Evaluate", ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"r", " ", 
         RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
       RowBox[{"r", " ", 
        RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"r", " ", 
         RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
       RowBox[{"r", " ", 
        RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}]}], "]"}], ",", 
   "1"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[17]:=",ExpressionUUID->"c35a0c99-cb29-4dfe-add2-41bdbdedaff8"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit","reclim2",
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded during \
evaluation of \\!\\(\\*RowBox[{RowBox[{\\\"r\\\", \\\" \\\", \
RowBox[{\\\"Sin\\\", \\\"[\\\", \\\"y\\\", \\\"]\\\"}], \\\" \\\", \
\\\"f\\\"}], \\\"+\\\", \\\"a\\\"}]\\).\"",2,17,7,16179469689345703595,
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803625525867125*^9},
 CellLabel->
  "During evaluation of \
In[17]:=",ExpressionUUID->"81b913f6-66a3-49ee-a313-440d9f1fedb6"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"Hold", "[", 
   RowBox[{"Evaluate", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"r", " ", 
         RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
       RowBox[{"r", " ", 
        RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"r", " ", 
         RowBox[{"Sin", "[", "y", "]"}], " ", "f"}], "+", "a"}], ",", 
       RowBox[{"r", " ", 
        RowBox[{"Cos", "[", "y", "]"}], " ", "f"}]}], "}"}]}], "]"}], "]"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.8036255258734293`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"14e862a3-1730-4694-96e6-ac55c6126326"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.803625560725618*^9, 3.803625587308484*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"06d92e16-c897-4bf0-a1d5-ef4e5f6fe981"],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{3.803625589528153*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"577b15ed-85dd-4593-be63-446e45d4dcff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", " ", 
  RowBox[{"DSolveValue", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"m", "*", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"Sin", "[", "k", "]"}], "*", "m", "*", 
      RowBox[{"y", "[", "t", "]"}], "*", "g"}]}], ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803639346903447*^9, 3.803639476445855*^9}, {
  3.803639523419915*^9, 3.803639553933412*^9}, {3.8036396810663033`*^9, 
  3.8036396838047953`*^9}, {3.803639730029285*^9, 3.803639737105315*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"3cbd9cbe-cc95-442d-beb3-6e56d969d1c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", 
      SqrtBox["g"]}], " ", "t", " ", 
     SqrtBox[
      RowBox[{"Sin", "[", "k", "]"}]]}]], " ", 
   TemplateBox[{"1"},
    "C"]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     SqrtBox["g"], " ", "t", " ", 
     SqrtBox[
      RowBox[{"Sin", "[", "k", "]"}]]}]], " ", 
   TemplateBox[{"2"},
    "C"]}]}]], "Output",
 CellChangeTimes->{{3.803639457152433*^9, 3.803639480890725*^9}, 
   3.803639556455907*^9, 3.8036396854503527`*^9, 3.803639741437743*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"28eee360-31ac-4a39-aae5-05beac2fd805"]
}, Open  ]],

Cell[CellGroupData[{

Cell["[y(t)''=Sin[k]*(-g)+y[t]*w^2]", "WolframAlphaLong",
 CellChangeTimes->{{3.803639602337407*^9, 3.8036396177167387`*^9}, {
   3.803639695995398*^9, 3.80363971974618*^9}, 3.803640069291263*^9, {
   3.803640208165094*^9, 3.8036402177454844`*^9}, {3.8036402600806007`*^9, 
   3.8036402900966043`*^9}, {3.8040690217116213`*^9, 3.804069030308992*^9}, {
   3.804069119705546*^9, 3.804069153091367*^9}, {3.804070481442891*^9, 
   3.80407048181433*^9}, {3.804070541094699*^9, 3.804070549588703*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"fcd7c2ee-fe6c-4e49-80fa-b70eb044beb7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "[y(t)''=Sin[k]*(-g)+y[t]*w^2]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"D[y[t], {t, 2}] == Sin[k] (-g) + y[t] w^2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[PartialD]", "2"], 
                  RowBox[{"y", "(", "t", ")"}]}], 
                RowBox[{"\[PartialD]", 
                  SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
               "\[LongEqual]", 
               TagBox[
                RowBox[{
                  RowBox[{
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", "g"}], ")"}]}], "+", 
                  RowBox[{
                    RowBox[{"y", "(", "t", ")"}], " ", 
                    SuperscriptBox["w", "2"]}]}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Autonomous equation", "scanner" -> "ODE", "id" -> 
     "AutonomousEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}], "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], "+", 
                   RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], Identity]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Autonomous.html", "text" -> 
           "Autonomous equation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FullSimplify[y''[t] == -(g Sin[k]) + w^2 y[t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"g", " ", 
                  RowBox[{"sin", "(", "k", ")"}]}], "+", 
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 SuperscriptBox["w", "2"], " ", 
                 RowBox[{"y", "(", "t", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"TrigToExp[y''[t] == -(g Sin[k]) + w^2 y[t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox[
                "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", "t",
                 ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", 
                   RowBox[{
                    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "g", 
                    " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "k"}]]}]}], "+", 
                 RowBox[{
                   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "g", " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "k"}]]}], "+", 
                 RowBox[{
                   SuperscriptBox["w", "2"], " ", 
                   RowBox[{"y", "(", "t", ")"}]}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DSolve[{y''[t] == -(g Sin[k]) + w^2 y[t]}, y[t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"t", " ", "w"}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", "t"}], " ", "w"}]]}], "+", 
                FractionBox[
                 RowBox[{"g", " ", 
                   RowBox[{"sin", "(", "k", ")"}]}], 
                 SuperscriptBox["w", "2"]]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                   "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"complementary \"", "\"solution \"", "\"and \"", 
                    "\"particular \"", "\"solution.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\"Find the complementary solution by solving \"", 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "0", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox[
                    "\":\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "t", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["w", "2"]}], "+", 
                    SuperscriptBox["\[Lambda]", "2"]}], HoldForm], ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], "\[NotEqual]", "0"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"for \"", "\"any \"", 
                    "\"finite \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], "\",\"", "\" \""},
                     "RowDefault"], "\"the \"", "\"zeros \"", "\"must \"", 
                    "\"come \"", "\"from \"", "\"the \"", "\"polynomial:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["w", "2"]}], "+", 
                    SuperscriptBox["\[Lambda]", "2"]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"w", "-", "\[Lambda]"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"w", "+", "\[Lambda]"}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", "w"}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", "w"}]}]}, "RowDefault"]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "w"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "t"}], " ", "w"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "w", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"t", " ", "w"}]]}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"as \"", "\"a \"", "\"solution, \"", 
                    "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "w", " ", "t"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"w", " ", "t"}]]}]}], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"sin", "(", "k", ")"}]}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"by \"", "\"the \"", "\"method \"", 
                    "\"of \"", "\"undetermined \"", "\"coefficients:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"particular \"", "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"is \"", "\"of \"", "\"the \"",
                     "\"form:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\[LongEqual]", 
                    SubscriptBox["a", "1"]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Solve \"", "\"for \"", "\"the \"", "\"unknown \"", 
                    "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SubscriptBox["a", "1"], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Substitute \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"-", 
                    SuperscriptBox["w", "2"], " ", 
                    SubscriptBox["a", "1"]}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Solve \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    SubscriptBox["a", "1"], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], 
                    SuperscriptBox["w", "2"]]}]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 3, RowAlignments -> Baseline, 
                    ColumnAlignments -> Left], 
                    Function[BoxForm`e$, 
                    TableForm[BoxForm`e$, TableSpacing == {1, 3}]]]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"into \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], 
                    SuperscriptBox["w", "2"]]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "\"c\""], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], 
                    SuperscriptBox["w", "2"]], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "w", " ", "t"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"w", " ", "t"}]]}]}], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Solve with undetermined coefficients", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve with undetermined coefficients", "input" -> 
           "Solution__Solve with undetermined coefficients"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with variation of parameters", "input" -> 
           "Solution__Solve with variation of parameters"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with Laplace transform", "input" -> 
           "Solution__Solve with Laplace transform"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as an autonomous equation", "input" -> 
           "Solution__Solve as an autonomous equation"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{"2", " ", "g", " ", "y", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}]}], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["y", "2"]}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "6", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.967", 
    "parsetiming" -> "0.8210000000000001", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP5311147f249787ci3gg6000018f7g19hha0g2a8b", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "48", "related" -> 
    "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5312147f249787ci3gg60000327cdcgi4i7c51gc1652639493352128523", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 18, 16, 15, 53.194845`8.478444522477874}, "Line" -> 
    19, "SessionID" -> 16182279394659952130}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "[y(t)''=Sin[k]*(-g)+y[t]*w^2]"}, 
   
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1776., {1084., 1090.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.80407055320743*^9},ExpressionUUID->"e0022f0a-955e-4326-9968-0fbf801170c1"],

Cell[BoxData[
 TemplateBox[{
  "WolframAlpha","nopst",
   "\"The \\!\\(\\*RowBox[{\\\"\\\\\\\"Solution\\\\\\\"\\\"}]\\) pod is not \
reporting any additional information for the \
\\!\\(\\*RowBox[{\\\"\\\\\\\"Solution__Step-by-step solution\\\\\\\"\\\"}]\\) \
pod state.\"",2,20,2,16182279394659952130,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.804070680398637*^9},
 CellLabel->"",ExpressionUUID->"03f51bc2-a325-4eed-8305-e108693ee36b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["[y(t)'' = Sin[k]*y(t)*g+t] ", "WolframAlphaLong",
 CellChangeTimes->{{3.803640775871592*^9, 3.803640843333994*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"f026fbbf-ac6f-4a0f-b982-052a6b957005"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "[y(t)'' = Sin[k]*y(t)*g+t]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[y[t], {t, 2}] == Sin[k] y[t] g + t"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox[
                RowBox[{
                  SuperscriptBox["\[PartialD]", "2"], 
                  RowBox[{"y", "(", "t", ")"}]}], 
                RowBox[{"\[PartialD]", 
                  SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
               "\[LongEqual]", 
               TagBox[
                RowBox[{
                  RowBox[{
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}], " ", "g"}], "+", "t"}], 
                Identity]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[y''[t] == t + g Sin[k] y[t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox[
                "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", "t",
                 ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{
                   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "g", " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "k"}]], " ", 
                   RowBox[{"y", "(", "t", ")"}]}], "-", 
                 RowBox[{
                   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "g", " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "k"}]], " ", 
                   RowBox[{"y", "(", "t", ")"}]}], "+", "t"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DSolve[{y''[t] == t + g Sin[k] y[t]}, y[t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", 
                    SqrtBox["g"]}], " ", "t", " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    SqrtBox["g"], " ", "t", " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}]]}], "-", 
                RowBox[{
                  FractionBox[
                   RowBox[{"t", " ", 
                    RowBox[{"csc", "(", "k", ")"}]}], "g"]}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"t", "+", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                   "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"complementary \"", "\"solution \"", "\"and \"", 
                    "\"particular \"", "\"solution.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\"Find the complementary solution by solving \"", 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "0", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox[
                    "\":\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "t", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}]}], HoldForm], ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], "\[NotEqual]", "0"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"for \"", "\"any \"", 
                    "\"finite \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], "\",\"", "\" \""},
                     "RowDefault"], "\"the \"", "\"zeros \"", "\"must \"", 
                    "\"come \"", "\"from \"", "\"the \"", "\"polynomial:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", 
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    SqrtBox["g"]}], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", 
                    SqrtBox["g"]}], " ", "t", " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    SqrtBox["g"], " ", "t", " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]]}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]], " ", "t"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]], " ", "t"}]]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", "t"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"by \"", "\"the \"", "\"method \"", "\"of \"", 
                    "\"undetermined \"", "\"coefficients:\""}, "RowDefault"], 
                    
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"particular \"", "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "t", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"is \"", 
                    "\"of \"", "\"the \"", "\"form:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{
                    SubscriptBox["a", "2"], " ", "t"}]}], HoldForm]}]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Solve \"", "\"for \"", "\"the \"", "\"unknown \"", 
                    "\"constants \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    "\" and \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["a", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{
                    SubscriptBox["a", "2"], " ", "t"}]}], HoldForm], ")"}]}], 
                    HoldForm]}, "RowDefault"]}, {
                    
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Substitute \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox["t", HoldForm]}, "RowDefault"], HoldForm]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{
                    SubscriptBox["a", "2"], " ", "t"}]}], HoldForm], ")"}]}], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox["t", HoldForm]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Simplify:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    SubscriptBox["a", "1"]}], "-", 
                    RowBox[{"g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    SubscriptBox["a", "2"], " ", "t"}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "t"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Equate \"", "\"the \"", "\"coefficients \"", "\"of \"", 
                    TemplateBox[{
                    StyleBox[
                    "1", FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"on \"", "\"both \"", 
                    "\"sides \"", "\"of \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    SubscriptBox["a", "1"]}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", "0"}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Equate \"", "\"the \"", "\"coefficients \"", "\"of \"", 
                    TemplateBox[{
                    StyleBox[
                    "t", FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"on \"", "\"both \"", 
                    "\"sides \"", "\"of \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"-", "g", " ", 
                    RowBox[{"sin", "(", "k", ")"}], " ", 
                    SubscriptBox["a", "2"]}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", "1"}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Solve \"", "\"the \"", "\"system:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    SubscriptBox["a", "1"], "\[LongEqual]", "0"}]}, {
                    RowBox[{
                    SubscriptBox["a", "2"], "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"csc", "(", "k", ")"}], "g"]}]}]}}, RowSpacings -> 
                    1, ColumnSpacings -> 3, RowAlignments -> Baseline, 
                    ColumnAlignments -> Left], 
                    Function[BoxForm`e$, 
                    TableForm[BoxForm`e$, TableSpacing == {1, 3}]]]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["a", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    "\" and \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["a", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" \""}, 
                    "RowDefault"], "\"into \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    TagBox[
                    RowBox[{
                    SubscriptBox["a", "1"], "+", 
                    RowBox[{"t", " ", 
                    SubscriptBox["a", "2"]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"csc", "(", "k", ")"}], " ", "t"}], "g"]}]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "\"c\""], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"csc", "(", "k", ")"}], " ", "t"}], "g"]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]], " ", "t"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    SqrtBox["g"], " ", 
                    SqrtBox[
                    RowBox[{"sin", "(", "k", ")"}]], " ", "t"}]]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "csc(x) is the cosecant function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Csc.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ElementaryFunctions/Csc", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Cosecant.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Solve with undetermined coefficients", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve with undetermined coefficients", "input" -> 
           "Solution__Solve with undetermined coefficients"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with variation of parameters", "input" -> 
           "Solution__Solve with variation of parameters"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with Laplace transform", "input" -> 
           "Solution__Solve with Laplace transform"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y", ",", "t"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"g", " ", 
                    SuperscriptBox["y", "2"], " ", 
                    RowBox[{"sin", "(", "k", ")"}]}], "+", 
                    RowBox[{"2", " ", "t", " ", "y"}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "5", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.067", 
    "parsetiming" -> "0.739", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP10984143728h1i0c4123f00005a40aeaeg51dfgd8", "host" -> 
    "https://www5b.wolframalpha.com", "server" -> "56", "related" -> 
    "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa10985143728h1i0c4123f0000539823fa669aa8e72586184755524934074", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 13, 16, 54, 13.106972`7.870077357275145}, "Line" -> 
    38, "SessionID" -> 16179469689345703595}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "[y(t)'' = Sin[k]*y(t)*g+t]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1776., {1147., 1153.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803640853117508*^9},ExpressionUUID->"7f557c47-a4b3-4bb3-8ca9-\
0dcba38c8abf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["y''-2y=e^x", "WolframAlphaLong",
 CellChangeTimes->{{3.803640907491531*^9, 3.8036409608017693`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"491b7ff5-d9ef-4c98-b1f0-e1dca3bb45c5"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "y''-2y=e^x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"y''[x] - 2 y[x] == E^x"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{
                   SuperscriptBox[
                   "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                   "x", ")"}], "-", 
                 RowBox[{"2", " ", 
                   RowBox[{"y", "(", "x", ")"}]}]}], "\[LongEqual]", 
               TagBox[
                SuperscriptBox["\[ExponentialE]", "x"], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FullSimplify[-2 y[x] + y''[x] == E^x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"2", " ", 
                  RowBox[{"y", "(", "x", ")"}]}], "+", 
                SuperscriptBox["\[ExponentialE]", "x"]}], "\[LongEqual]", 
              RowBox[{
                SuperscriptBox[
                "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", "x",
                 ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DSolve[{-2 y[x] + y''[x] == E^x}, y[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    SqrtBox["2"], " ", "x"}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"-", 
                    SqrtBox["2"]}], " ", "x"}]]}], "-", 
                SuperscriptBox["\[ExponentialE]", "x"]}]}], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Solution__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Plots of sample individual solutions", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolutions", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
34C/
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1612032#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> {0, 0}, 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "0"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
                    
                    "]]}, Annotation[#, 
                    "Charting`Private`Tag$1612054#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "0"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}]}, {
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "0"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}, {
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
4E15eXmFvU80iQZ3HCVTKXsrnebFxZD4X9LB7O0=
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1612077#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> {0, 0}, 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "0"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "1"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
                    "]]},
                     Annotation[#, "Charting`Private`Tag$1612099#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "0"}], ",", 
                    
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "1"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "0"}]}, {
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {None, 
                  RGBColor[
                  0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
                   None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                AbsoluteThickness[1], {{
                  RGBColor[0.624866, 0.673302, 0.264296], 
                  BSplineCurveBox[CompressedData["
1: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
AGViCmo=
                   "]]}, {
                  RGBColor[
                  0.5926051666666666, 0.64554475, 0.29019741666666665`], 
                  BSplineCurveBox[CompressedData["
1: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
9csKov4XwyJCPw==
                   "]]}, {
                  RGBColor[
                  0.5603443333333334, 0.6177874999999999, 
                   0.31609883333333333`], 
                  BSplineCurveBox[CompressedData["
1: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

                   "]]}, {
                  RGBColor[0.5280835, 0.59003025, 0.34200025], 
                  BSplineCurveBox[CompressedData["
1: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
                   
                   "]]}, {
                  RGBColor[
                  0.4958226666666667, 0.5622729999999999, 0.3679016666666666], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.4635618333333334, 0.53451575, 0.39380308333333336`], 
                  BSplineCurveBox[CompressedData["
1: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
SdfxlOJa3N1W/vVTyFZBlB3Cdbj/B830Hbc=
                   "]]}, {
                  RGBColor[0.43130100000000005`, 0.5067585, 0.4197045], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.39904016666666675`, 0.47900125, 0.4456059166666667], 
                  BSplineCurveBox[CompressedData["
1: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
zuY27v8DmYwS8Q==
                   "]]}, {
                  RGBColor[
                  0.36677933333333335`, 0.451244, 0.4715073333333333], 
                  BSplineCurveBox[CompressedData["
1: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
13coH8VmsZXMxaZI/w+rAi+5
                   "]]}, {
                  RGBColor[
                  0.33451850000000005`, 0.42348675, 0.49740874999999996`], 
                  BSplineCurveBox[CompressedData["
1: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
coXo35F6O9wtTgGVQ8iH2HF3ylfh/h9hS152
                   "]]}, {
                  RGBColor[
                  0.30225766666666665`, 0.39572949999999996`, 
                   0.5233101666666666], 
                  BSplineCurveBox[CompressedData["
1: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
N2KRhW8aSoZG4e628KqeRo5nDq8MPIP7X+HOGFA=
                   "]]}, {
                  RGBColor[
                  0.26999683333333335`, 0.36797225, 0.5492115833333333], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}}}, PlotLabel -> 
               None, ImageSize -> 240, Axes -> True, PlotRange -> All, 
               AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
               AxesLabel -> {
                 FormBox["x", TraditionalForm], 
                 FormBox["y", TraditionalForm]}, PlotLabel -> FormBox[
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"y", "(", "0", ")"}], ",", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}]}], "}"}], TraditionalForm]], "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{"\"sampling \"", 
                   TemplateBox[{
                    RowBox[{"y", "(", "0", ")"}], "\" and \"", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}]}, "RowDefault"]}, "RowDefault"], "\[NoBreak]", 
                 "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 
                 0.7853981633974483, $CellContext`Y2$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`y[0]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[$CellContext`Y2$$], 0.7853981633974483, 
                    Derivative[1][$CellContext`y][0]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 2 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1766744[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
1766744["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}, {0, 2}, {1, 2}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[3], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[4], 
                    Manipulate`Place[5]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1766744["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[6], 
                    Row[{
                    Manipulate`Place[7], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1768025$$ = 
                 False, $CellContext`Y1$1768030$$ = 
                 0, $CellContext`Y2$1768031$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$1768032$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$\
1768033$$ = 0, CalculateScan`ODEScan`Private`iSQ$1768034$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 
                    0.7853981633974483, $CellContext`Y2$$ = 
                    0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1768025$\
$, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$1768030$$, 0], 
                    Hold[$CellContext`Y2$$, $CellContext`Y2$1768031$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$\
1768032$$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$1768033$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$1768034$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{}, 
                    CalculateScan`ODEScan`Private`eqs = 
                    Flatten[{{(-2) $CellContext`y[$CellContext`x] + 
                    Derivative[2][$CellContext`y][$CellContext`x] == 
                    E^$CellContext`x}, {}, 
                    CalculateScan`ODEScan`Private`addInits = Thread[{
                    $CellContext`y[0], 
                    Derivative[1][$CellContext`y][0]} == 
                    Tan[{$CellContext`Y1$$, $CellContext`Y2$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs, $CellContext`y, \
{$CellContext`x, 0, 0 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[((0.999 Pi)/2) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs, $CellContext`y, \
{$CellContext`x, 0, 0 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[((0.999 Pi)/2) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    Head[CalculateScan`ODEScan`Private`sol] === NDSolve, 
                    CalculateScan`ODEScan`Private`sol === "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
1766744["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds]; 
                    CalculateScan`ODEScan`Private`xRange = {
                    0, 0 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ, 
                    CalculateScan`ODEScan`Private`yPlotRe = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`y][$CellContext`x]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotStyle -> 
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe = 
                    Part[
                    FullOptions[
                    CalculateScan`ODEScan`Private`yPlotRe, PlotRange], 2]; 
                    If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]], 
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]]]; 
                    Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotRange -> 
                    Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm = 
                    Part[
                    FullOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm, PlotRange], 2]; 
                    If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
, Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm]] > 1/3], Null, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm}], CalculateScan`ODEScan`Private`yPlotReIm], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe = ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`y][$CellContext`x], 
                    Derivative[#2][$CellContext`y][$CellContext`x]}& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange}]], AxesLabel -> {
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotStyle -> 
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe, 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ, 
                    Identity[#], 
                    Re[#]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}]& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`y[0]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 
                    1}, {{$CellContext`Y2$$, 0.7853981633974483, 
                    Derivative[1][$CellContext`y][0]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 2 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1766744[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
1766744["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}, {0, 2}, {1, 2}}]], 
                    ControlType -> CheckboxBar, ContinuousAction -> False, 
                    ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1, ControlPlacement -> 6}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 7}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[3], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[4], 
                    Manipulate`Place[5]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1766744["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[6], 
                    Row[{
                    Manipulate`Place[7], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkQbV9gkJ1rExaUBJyvd6ySWxcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nr\
ppzAfB4mQLT8+MGYlZLgoevz/PJShFBU9u4LN7xoSg94GRHxA7321jDoScEe3Ob/\
B9wqKCEQ1fNWVUU1DTQ0nyjEaq9owlPTU/mTIREUZ/\
wovt3Z2d3eHQwWAsY6I1SK5et4XMM0kUJD0EumXMHiP8mzs+LY+fCsZC+\
F4Aj0A9Nt6JJLGBEZwwzMf71uvN1ANMTBMeExlfOU1WnqO2FygtKU8nMMvxjcvJ2m4LTGSqHDcPS27\
WKciFfwcfiNDG5Dw2aXu2BPqFcc3ouyirf87dAM9v28JLcbaaOMzvHUPeiKanoJbpfNm6To6Rqmtt9\
HOurmq+bDTIy6dM/b90TJVeDuNV2zBgdmJqvFp7y/DDtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCyMG4YsvtPk2pHmVEksgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1J3oKPvyR8Wt5HKhyZD3I64hBblW9HexPtKQy+\
OJ8IwkxAuaevXmsEpqTKS37AclSJgTThGS/jIf+\
809XKwEUnUoUV3SsTiwpTn3T6JfFvgYeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DbO6uLY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y", ",", "x"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", "x"], " ", "y"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["y", "2"]}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "8", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.718", 
    "parsetiming" -> "0.47400000000000003", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP2162188007h888fd7ef400001b4a1gb3ag184dcc", "host" -> 
    "https://www5b.wolframalpha.com", "server" -> "17", "related" -> 
    "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2163188007h888fd7ef4000067h8805ce76di2248375746479528641945", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 13, 16, 56, 4.448121`7.400751580698151}, "Line" -> 39,
     "SessionID" -> 16179469689345703595}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "y''-2y=e^x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1776., {585., 591.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803640964470866*^9},ExpressionUUID->"9435f02f-88a3-484c-84ae-\
91ddf323c32c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lagrangian", "WolframAlphaLong",
 CellChangeTimes->{{3.803640980902973*^9, 3.80364099752707*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"c735b536-3eda-40e7-8d4a-6d537acd301f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Lagrangian (q')^2 - q^2", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Lagrangian dynamical system \"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox["q", "2"]}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "q", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               Global`TagBoxWrapper["Separator" -> " | "]], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Lagrangian function", "scanner" -> "DynamicalSystems", 
     "id" -> "LagrangianFunction", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"L", "\[LongEqual]", 
              RowBox[{
                SuperscriptBox[
                 RowBox[{"(", 
                   SuperscriptBox["q", "\[Prime]", MultilineFunction -> None],
                    ")"}], "2"], "-", 
                SuperscriptBox["q", "2"]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Euler-Lagrange equation", "scanner" -> 
     "DynamicalSystems", "id" -> "EulerLagrangeEquation", "position" -> "300",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox[
                "q", "\[Prime]\[Prime]", MultilineFunction -> None], "+", 
                "q"}], "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.661", 
    "parsetiming" -> "0.391", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP32651ced69bi920g30f100003b27e213b3c4c74g", "host" -> 
    "https://www5b.wolframalpha.com", "server" -> "39", "related" -> 
    "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa32661ced69bi920g30f10000694706g04f5ffieh447297285764052370", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 13, 16, 56, 51.229349`8.462093812337992}, "Line" -> 
    41, "SessionID" -> 16179469689345703595}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Lagrangian (q')^2 - q^2"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1776., {101., 107.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803640998830945*^9},ExpressionUUID->"639af80b-ab0c-4c8a-86f5-\
256773984190"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Euler Langrangian", "WolframAlphaLong",
 CellChangeTimes->{{3.803641040702794*^9, 3.8036410635839148`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"8788cd87-0200-4c22-a45f-f0fe312c3730"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Euler Langrangian", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Entity[\"Person\", \"LeonhardEuler::39r8r\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               TemplateBox[{
                 TagBox[
                  TagBox["\"Leonhard Euler\"", 
                   $CellContext`TagBoxWrapper[
                   "Entity" -> {$CellContext`PeopleData, 
                    "LeonhardEuler::39r8r"}]], Identity], "\"  \"", 
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"mathematician\"", "\[NoBreak]", 
                    "\")\""}], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Basic information", "scanner" -> "Data", "id" -> 
     "BasicInformation:PeopleData", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Dataset[EntityValue[Entity[\"Person\", \"LeonhardEuler::39r8r\"], \
{EntityProperty[\"Person\", \"FullName\"], EntityProperty[\"Person\", \
\"BirthDate\"], EntityProperty[\"Person\", \"BirthPlace\"], \
EntityProperty[\"Person\", \"DeathDate\"], EntityProperty[\"Person\", \
\"DeathPlace\"]}, \"PropertyAssociation\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"full name\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                 "\"Leonhard Paul Euler\"", {
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"date of birth\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox["\"Friday, April 15, 1707\"", Identity], 
                    TraditionalForm], "\" \"", 
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["313", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {FontFamily -> "Helvetica", FontSize -> 
                    Smaller, LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" ago\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}, "RowDefault"], LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"place of birth\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 FormBox[
                  TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Basel\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {"Basel", "BaselTown", "Switzerland"}}]], 
                    Identity], 
                    TagBox[
                    TagBox["\"Basel\[Hyphen]Town\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    AdministrativeDivisionData, {
                    "BaselTown", "Switzerland"}}]], Identity]}, 
                   "RowWithSeparators"], TraditionalForm]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"date of death\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    TagBox["\"Thursday, September 18, 1783\"", Identity], 
                    TraditionalForm], "\" \"", 
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"age: \"", 
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["76", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {FontFamily -> "Helvetica", FontSize -> 
                    Smaller, LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False]}, "RowDefault"], "\[NoBreak]",
                     "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\"\\n\"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["236", #& ], "\[InvisibleSpace]", " ", 
                    StyleBox[
                    "\"years\"", {FontFamily -> "Helvetica", FontSize -> 
                    Smaller, LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                    LineIndent -> 0}]}], Identity], #& , SyntaxForm -> Dot], 
                    "Unit", SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\" ago\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"]}, "RowDefault"], LineIndent -> 
                  0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"place of death\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 FormBox[
                  TemplateBox[{",", "\",\"", 
                    TagBox[
                    TagBox["\"Saint Petersburg\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    CityData, {
                    "SaintPetersburg", "SaintPetersburg", "Russia"}}]], 
                    Identity], 
                    TagBox[
                    TagBox["\"City of St. Petersburg\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {
                    AdministrativeDivisionData, {
                    "SaintPetersburg", "Russia"}}]], Identity], 
                    TagBox[
                    TagBox["\"Russia\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {CountryData, "Russia"}]], Identity]}, 
                   "RowWithSeparators"], TraditionalForm]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Image", "scanner" -> "Data", "id" -> 
     "Image:PeopleData", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "imagesource", {}, {
        "http://www-groups.dcs.st-and.ac.uk/~history/PictDisplay/Euler.html"}]\
, 
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n  "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"Image\"]]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1: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
69mbd+M3r+w/eW1w+PHonWcXH9wbvnH56MjIwNHR/kPne/sH17Yeb255MnTi
wqHTV05f3tfVOz9zVorBFiWUJkukC9wh7TMz23KTmjPjViSGzw8xzbHoyoJt
VR7X0kj3whBHkVlfFho8O8iWplfvWFF3uLNjd+vaspycIIVSweSoeAIFRyCk
M6FHkCJMvEcDCfCmGCTAV+egHAIJICPjEgTLpC6VMkKvkweSxH6BYj8CvvMZ
30YLDYgckruXZG/wIeE7n6FJhxFe4pt4YeK9uAkvA717EbEdod5iFV/HxsrX
P5s1P6FPgMw3UOEXYKHRofH38NnxUn6+Vb/A7ZzvsJYYtBVmY02wo9JqqTCb
5puMlVZ7dVDo0mB3bbBneahndWRMY1TU6piIxlh3Q3z4+sy47XOy+0ryRpZV
jjeueDO471+3bvzr+cuXl2+e7Ru8NDj88vKje2evnt9/8vrh06O79p7YsOn4
2tYru/eCm/xy8cHr26/O7juzpHBRgtXtFqsTFaqiIOvO0oJdxdN3z82qdVtK
jNIFIcaGadErkyIWuCwgSkWIFYJVgVG5oWDG0ab6nsqKQ+ta2yoro00WBcqV
s4QilC9h8iUMlgRBhFQqhCklE5wCcgHbyBPh65MmL8x8LBZhFalK7QYvINKl
ARSALJCKj3ICTeJPxhUBenH+gXDQRUHBttdKAqkif7I4gDKxNR3fHf3jXjh4
ie+XRn+exPX140325fxtinSKv5lEc9BRFwNNlApmmNWlwaa5Zk2RVrHArK8y
mcqVqjKVaoFOt9Rqbwxzt0bENkfErHHHrnZHNUZErvK4V0aELfc4VnhszQmh
XdkxO3MT9mTG7kiL7iuafrZl1fux4X89eXb39PnB7j2Pz9/+ePfl49FbY31H
ru47Orxl59HW9lMdm19duPvbgw9v7rx9eOXp1bO3oB+MMYcl6mxZBv38UPuO
opzBhbOb4pzlRnG5TdGSGdMwLbLKE1QWpF8SZl/kNBfplctiPAdql3SWFnVX
Ljy4vrVtyWKPyazg8DRCKZ/G4JBISi5XyWbLmUyQAAANMmQEXAIzX+jFdwkg
F4AEShKCM/+DBBRwCvwWgIl7AQDgHRoqCpLJvbcVYBtuvROhH4k3NRDf5Q4j
zHE5cAm+b3T8eapwir+WQLVSECfKjBbwcw2aHK1sulKUrxQWa2WVFuOKYOdq
V9jGxKStmVmH5hSfWVg1tnjpucrqMwuXnFxYebyy6uiihYMLy/tLC7blp2/K
TmifFrU2LmR7dlx/QcaeguwteTnHltd9GB75duvBzeMjw31Hvzx69+ut5zcP
n7vcPwTl0PDWPcc3bb9xZPjLw7effvn16dXnL+68v3v+Yc/qrryolGiZOkOj
WhodtreioG/ejIV2xWKnZnNBWkNCRG2ka4HDvNTjqg4PmWc3z7GZty9aAPy3
L5rfUVe9t7Ots7FuWoRTzKDIOYiGB/yzwAtAAg2HCxJouQI1m/fdC/hC058S
4EVRmEqJewFu/DCBEWIREA4jDnx7P7a3n4JoaQyQDFcB+Jd593uAR/x1l4Ef
ie9DwF3gLwm8W3zlAWQTlWGnMSK5AmwFTKtKEbBSuEiRVlYbYl8d4epKTjo4
e86RuSWnKxZeWlp3u6HpYVPr/TVr7zatvb2m+e66dfc2rn+0edOjrZ33Oluv
tTaMNVQfry5tT4tcE+dsiQ7tzkg5UFZ2s2frx9HxNxevggqvrt3/18svz8/f
fnL66oW+oeuHR871Dl49dPopOMi9Nx8ffHx+8/2HX769vv32YNfeuQkZGRZr
nIBTGx++uzSvIdZZH2UHoevjwlbEhNVFhVV7XFXhYRVhYYVBjs2VlXubGtuX
LFqzsKyrsXZHW/3apWWzUyMdCp6YRpSiIARPxeGoWGwdj6/h8CFH/ygB5AK8
KILuwKVUAI1YSAEv8EYYGFVkYJiCQxH4HSoiTU2maciImoROqAAjPpF5fQH3
Au6UAM5kfxjxCfLTJPAIiT9R7kc0UdBwjiBBLEmXy6bx2dOlfLD/pU7zxpTY
3unZB2fPOlladqm65lpt3Z2V9Q9Xr3m6dv2Lde3PN3Q+3bDheU/Xs609b/bs
/LCv79cDez4d2vvbYP+H/bt+2bnhbEPVjhlp7Qkx3alpp5fWvjp4+Lfz419u
3H05fv35+Zsfbz795cy1SwdHRvtPXT06enHg6NPRq+9vPfv9ydffHv3x+s7n
dw++vLjx6vSeIwuz8hK16gytbJHb3jEjeX1q1MaM2PbsuIYUd1N6XE2Me4Hb
VRruKouI7F1Vf6RjY1fdso21SzY31rUtnrexpmzLioWLZ6QmOi1qDrQMDBmC
gAQmkViOMvC7PAC4ChMSgCO4FKqJe5fwG5dwCcD4Mf7BBQhU4B9GNYmuodBB
BZiACjj5AJADVwTPDnhQAvKxcIRP/LBt6lI/opZEdzB5ERxhLJuXxOVm8rll
Bk1tsLkpInh71rRDc/KHSuacLS+7tnTp7bq6B6saHzc1vWhtfbNx49tNna+6
Oj/3933at/fz4P7fjhz4dHj/16Ejf5wc+nJ88OX+HR8O7362fdOpxQu2pqft
mD59rL7xzaHBLxcuvrtw6eXYpdtDIx9AhXO3rx4bBxXO9h54ceEGBKh3t968
u/3p9a1Pj6+8vTP2y9OrTw5v2VOTNzNVr02TCxd7nC3TorfNythenNmWE9Oa
E78yObIyMqzI6SiLiTq2sX2oa1P/utat9Sv3tbf2rW1oLpvdWlbQU7uouWp+
RpTHrddquVxQAWgHIYxC0fd7bb5nBMGEBGFKNXZ/EBnB78CauMMLyMfMnoRx
riJRtSSanoIAdGS6V4IJoLhTAMAX5H+mBjwu4ZCTaZDQZf4kC50dxhGFIawI
OprG4cxVKpYGmdeEBW2MDe/PTT9SmHeqdM7l6qobS6vvr1j+uHH18+Y1r9ta
33ds+NDd+XbLpl97d/y6r/fr0OA/zh7/x9mT/zo3/K/z5/81NvLl9NGPQ/u/
HD/4YX/v9bWrt+VmdKYkXW5a/XzPnr9fHP9w4eLzsUvPx2/+dv/Vw5FbV46c
u3Pqwr0z4++uP/l0993ba2/fXv/w7PLruyP3bpy9ev/8tb3rN85LTMjQqZOF
nFKbeXVC5Ka8+O6ChPU5UWuzYlYkeirCgyui3aNbes5s6Tm5uWdf+7qhLT1H
NnVuX7mic0nlyqKClfPmNlVWrCwrzo6KgPpTx+GYxRLcEQBYa8Dl/48SQLUJ
AP6BMYj53ru66BB2wPInJDBQ0QkJsLcwMH6MS/9NAjw1QL2kxj7LMJDoNgri
oiHxDGYWh12hVbe4g7viPNtToo/Oyh4unXOuouTqkkU3ly5+sKruWVPDi+bV
L9Y2vV6/9t2m9jebN349sOfbkf3/OD309+FT306f+P3smX+cG/1j+OwfI6e/
nB76fOoICPH1+P7rrQ09qQl903Murlx+u7PjzdCxdxcu3j1+5uHIpV9vPPp8
79WDc1cenrv+8faLDzdevb749POtD++uvXo8dv/B6I0bJ8funhlpr1oM3Xqq
UpkmlOTKxCtiHDuLpm3IjO7Ijm9Ni61Pil4cHX6xp/Py7p1jO7cf3rjh5Pbt
Z3b29re1b121unn+wpbKBY3zS5cWzlo+ryg7wqNmMiHyQF7+/5IAAhFO/o/4
fpMjRH4KHTgHgAQAmIAKGiKmCPCvpWB3s8IIioDLgGqQxEW+RChoQRHIDjAB
UeA4hDIdkWansTxsXhTKjKNS84W8VQ5LmytoW5znYHbyyTm5o2VzLlWVXatZ
dG/FUsCj+uXPmupftja962j7dUvH2y0d3w72/fPkkX+OnPx2+vink8e+DZ/5
x9gY4O+jI38fPfv+xOE3Q/s/ntj364Gdl1YsXhcZ0j8j83Dp3GM1i8+1tz0Z
Gnp/6crT4fP3T45Bjn5z88mjc7ffX336dvzRh0uPP19/9uHqo4dnLl3cd/jh
2dHh7btrsnKLPdFxAlksizNTJlwRbtuQGrNrZsbGtPj6SFdTYsyB6kUPB3bf
298/sn3rye1bz+07sHdj1462jh1r1+9ubtpYXVmWltxcUV6VPxN6MXyBApIy
lEbfw5G3R7YKBTaRMESmwEMQxrz3PlAAVJ6A/x8JKHRcgr9uKKYzddj2JxS/
h1RNYYAQKiLmLPApG4LtW/MwuTEomooiZUppg93Y7rL0JrqHpqecK55xvrxg
fFHx5cWlt2oX3lle+XBV9ZPVtS9aV73Z0Py2q+3dto7f+reDF/xx+ti3sye+
DZ/64/y5/7p48Z/jl/8YG/vnpQtfx878evrwr8cHPhza9ahr7Yn5s9vCHZuT
YwcK8/aWzNldUXpvYO+/7t+/e+zktaPD724+/XLn1ZvxB99uPv9y9dHX67+8
Hbv2+NS5K/2Hrh04fHnvgT31axZPy8oyBoEKMXQkR8Av1WtXRYS1pyR2pic3
xXqWhjt3zy+50L3hWt+uYx0bLh88PNw3cGTL7t61GyBNt5TOrZmetWnZElAB
WmBs0wKH5+VfgCflP3tkPkjglMp/vLcXAORrqQgAlwAmE0LgsUhDof4J7F0d
DdXTGQYEuynYhHJADpAGFwX4VxLgg4iFzgpGucFUJIxCj6Uh2SzmYp2yxW7Y
FGrujw8/mZt0vmj6hbL8CwsKL1YW3VxWfm/logerKh+vrn7dtur1+sbXHS2/
7uwCCT4f6v964vDvwyf/OHfmj3PDQP4/Llz4Nnb+vy6N/z428vnUsfdH+t8f
3P2mr+due+O2jLh6m749IvTQ7Jnb83LXZ6UdW7Pq14sXno1efXT2+qcbT/Er
Dh/Grv/r/tPnJ88+O3HmwrZdV3r7r/Xtgw6uuXDe3MiEeLkuQayOhiqOK0gX
SkqMxoboqPWpSQ1xkdAp1MZH7q9bcnbD+geDg2Nbd57p3nG0fdPe+pWNBTPa
K8r6VjdsWFwVoVZrmVhf5uVf+O8SQF06IQEO7FZoyMikvxjGSPbmYuDfgIBA
NICaTMHx12lUBkgAQoDZ43fZawiIKpBiICNWOiOIxrAFkl0kSiKCzOSy64zq
jU7zNpd1f1zIqay4scKMi2XTxytnX15SdKtu3sP6BQ9WVTxqrHrTuuJV68pX
65s+7ez+2r/rt/19UA5BIPp9+NSXMye+nDn1dWTk29jo76OjX06d/O34kY+D
+97t733dt/l+Z8vIkvLmEOsylazTE35g1sz2lPjlcZ5TbWs/nL/6cOj8ua39
T06Ofb586/Plmx8vXH539tzHkfMn1q6/2LPjwuYdQ+s2bq5atmhaZorBFqMw
hAuxra0RLEEyV5glklQ6HY2JsauT4haHh5QF2xZ6woZb193r3Tvc1nlgRcPu
JVWbF5UNNKwYaKxvmVccpdbomWw9tkz6PRABfgxE0CP/mVgRb82PpVpcggkL
B/xp6qgRhZeIhoZtAFZRsAV/cAdQREejG2kMK4NjRljeeMUAaAk0dQAliM4G
/u0kutU/MIJKzeCwi0X8epNms8vaG24bjHOezYy5ODvtclnularZ15fOuVU7
55dVpfeXz3uwovzF6qXPm5Y9b6n/uLnjy+7tH/fs/Lh/75djh34/NfQF0sHp
E5CLwf4hL3wZOvr12NGvg4d+3df3unfb/c7Wm831A/m59RbjYql4bWjIrqyM
9clxi0OdJ9e0fbt4427/4d66Vdtr6i5s33330ODo5q1PD5840rB2qLH11NqN
p9o29C9fVZeVk+9yx+hMESpDhEwdxsf2ekWirAQuP1+nK9BpZ6pVs/WGXKl8
niVo2+ySE0tXnVje2Ltg/qH65QdWrdhes6R2ek60Uq1HmCqEgS3ZsXl4Xp6Q
wC4WhaqVeGL93+ANRH9FGISJCwH8mxhMHULT0qmgAkBHo+rpNFwaIN/G5Jog
I0DIIiE6Ih341wSQIQUA/xZ/ot0vMBZBc/ncEhG3wajqCTbuDjUORtnOpHvO
FyRfnJdxYUHOeNWM60tnPlg+537d3Pu1Jc9WVT5vXPqipf59x/ovO7Z+3LX9
1/490Bp8OXb4y/Ej304e++PsyW+A0yeA/9+PHf1y8MCv/Xvf9+1+vrn7cefG
8bra9qiIOoN+sVKxwmTclprSHBFZExpxdk3rp5HRa7t271hWu3Jm/qr8WY35
hTurlh1vXD9Yt/pQbf3xxjW7Fy9ZO2tmSVREZlBwqj04SqYOZQmSZOp4oRzi
UqJIFs3kpErk00TSNKE0gy/NFSlmiJTVroglHnf7rOmb58/rLCstj4sNEfBV
UGSi2H5IJRPrl0GFP68aYBKEqBR40Pj+gA6vwU/gBwkQAC4B8K+lk3UIRe+9
0GliYNfaAFYGC2CiIXoyFepPIF/tT9IRqHYqagmkmP0IQQEgAT2bzZrLY9Tr
ZT1B2p0OzUG36fS00NG8+NGilJHS9HPzM65UZt2qmXF/aeGDpcVPly98vbr2
bUvjm7aW37b2fNq5/be9e37b3//50D4Q4uuRg9AmAL4dP/r56ODXI4O/7dv/
sW/vlz39bzZve7qp+0ZTc1da2lKrbbFWX6PR9nii+9NzqrSmDZk593buvDcw
cOvQgZ0rV86LT1xfvqg+u2DXgtrjK1uP1jYcXrZ8R9m8ntLChTFhuUZ9nsWS
rlQnSxTJYlWqTBsvVMYKFB6uxM2ThLNFkXyZmyGIYgkTudJYlA2/caZWuSYn
c0VGWobBYKZ7AzWDhT2lgYFJoGZzoFn4KxfIpXhJ872qoX13gR9TrVcXOkgA
1o55AVg+QjEgdODfwkABOPk2JrZd3EilGyg0iP+aQIomkGqmMC1k1ESg2AJI
oUQsEWSj9Lks+mqDdKtTtytUvT/SeHxa8Jm8yHNFiSOlaWMV6WOliVcXpN1Z
nHdvyeyHSyter17+tqXpWdPqD52dH7ds/bx7N6iAtcmH9n05fACC0rejgMOf
Bw9+OTz4ef+Bz3sHvvb2v9q0+d3WHSDBofKyWoejQq5cpjHUidVdoZEbouLK
9fozjQ0vjxx+cPgQ1Pb1swqPbejauXj58mm5h5c3jbVtOFnfsLO8ZMeCuTUJ
nrlB1jlW6yyjOd9omSZWgAQpMl2CTBsn00ZLNS6uLIwnjxZpQlnCSL7cw+TH
sFnRLLR2WnJhiNPFgbCAmsD4odREmbgX4BJALDLzeRaRIFghwy0fOMcxkYLx
g/hLfAJnQtg30KgAsHYLwghicYI5PAeLb2eyYW5BEPy4GQQFFQiIjsTAHtbh
TzH7kCPJjCwGdyadUc5CGpT8TcHKnRHaPTH6wxmOs7OjzhbFDBcnnC6MGZ7l
Hi+Ju74g+37N3GcNNS/XNLxY0/Kmtf3tus7PPdt/39X3pbfv1z17Pu3f/wnM
/ujhT4MgwZGvRw5/2n/wU9++T3v2ftrR+37r9tfd3Xea15xZtLA7KalapauW
qVepzTVSTYPTtdTpXBEZdXvL1jdDx89392yvWnyzf9+eZcsXxiZsr6wa29Rx
vGn17kXlfYsr6jOS8y3W2Y7gWfagfJs9S6NLU2jSleAIcqiUUjVmF1uESSDX
O9kyJ1cezBaGsnihbE5RZFS8RmdEoTin61gcbK8Fg4k/m0LhfU6Ims2GWGSX
SickwC3/Rwkg/uAj/J2/ghKVbqRSASYK3UJjQrVvRzkwQs1jAx+hUCEKgSNA
+aQmUJUE6NqYUJcqfMkmX3IUiZGNcGbRkQoOY41WvCFIsi1S059sGpoZNlIc
e35e/MXSpFGQINtxqSDy5vyMh8tKXrQsf7Wu5cW6da/aN37o6PnUtfXLth1f
d/d+6R/4fPDAp8HDvw4O/gqTgwd+O3Dg08C+j73977ftfLt565uentfdmx6s
bb5QvXh3elqdzrBYoqyVGapE6pVBziU2+5JgR1de3qUNG483Nh1ran52bOhE
27rK+IT50VEDy2tPrGkaaly1t7KiJTdrXnh4qSeiJCwcVMjRGbJV2lkma47O
hO071ZiiIPhgzxeyhPAUNrbEwhTYWTwgP98dFSqWaWkMGYUmp9LlNASMX85k
yhgMkAD41+CxSCQKkkn+XPyh6ik0Iw0BxzGDGXsBL2G0oEzMm+goTOCIFcXu
ErKjLAeT42TwANjtQiiogBhIZC2RqCWSoX1TYeurCLQG2DOIpgYY/YiRZCSN
hs6kI5UibotF0RWi3h1rPpwVcq4w5nxx3KV5iddKU87P8AwnWq5kh90qSQUJ
Xq5f9aJr7bNNbU82rX+9pfPd1q5PO7Z87d3xrX/P1wN7vxyC4HPo08EBqII+
DvR/Hhj42Nv3ZsvWl5u6wQVebep4vK7l5oragzPzVtuCQIJqkWahQFYqllYa
9cvDXGUmY31iwpqMjONNa54OHhlsWNNWUFQRFT3Lal+enLprwaLj9fXdc+dW
xcYtSUxcmpRc4faUhrryDaZCiy1DpsyQqtPkuiiOKE6iTtGY3QJlmEARJlTa
UE52UGia1WFisLFeFWHIoYdlQzsgxJ/vga9gT9RFdqnYSEG9tg1VJRZDLN7b
f/DECgHHTMeiPYxmFMhnQnKx0DBgNweBCggHqznpTAfCAgmMZIqOQNQQSGoC
xSsBDSQQ+wVKpvqa/AkRFHoyhTIDpVXJha1B2s0eU1+C/Xiu52JxwnhR/NXi
pNvzpo1luc7EGC6nu24Vpf5SU/SqbcWbrpaX3a0vute92975eU/P7wM7vu7d
9rlv69f9u34/tPf3IwO/Hej9uG/XJ0gQfb0fdmx/1dP9orPz5aaOZxvanqxf
e391/ani4o1hnhq5pkqoWMCXFvF4FRpFS1x0U0x0iV4312TcVb7g/p7+o6tb
esoW1GfmpojkmTJNmdPdXVjcv2TpmpzcpuwcQFV0TGVE1Fy7Y0FoeIHelC1T
pUqUkIWTJKpkpcHDl7m4kjCBzMkRZQe7wqQKbIUBQjeTraKz9BysNZajLBmC
XcfR87EGAa+LIB1DDIEYDgT+OOJUG6lkmNsY2BErit0QZKFTrQjNTqcFIWgw
A2PeTsOuwoAKNjifTNETSRMSqAJoEIWwuwIn/6QP8AunUBLIpOlMdIlautah
7wg1bo+2HMkIv1iYNF6YcL0o8c7c5NH0kMEo7dk055WCpHsLZr5YufB9y4p3
6+rfbmh8393ydffGbwPdv/V1An4/tP0fh3u/Hdj1W/+2zwPbf9uz/d327ldd
GPkvOzc+37juaVvLs/XNv6xpHK2o2BqbUKvSL+RJ53NFZSJxIY9dYzVvmzF9
TXzcXL2+LjZhuLntVFNb19yy+rTcQrMzRaDIVZmmK4y1sckrU1Ib09PbZsxY
mZKyIjGxIjS0OiJ6nj04R65OFcuSBNJ0lSFLb4mXaiKF8giRMlKqTjJYoUXF
lmjIKPCPPUCJwsAfsQKOgC9TgBDQMkMgglxgpdLMVBoQCDwHeW9FhBF4doDZ
I1QYHSw4Qrcz6MEMOIEWwmIGMzD+Q1jsECYXyMckgA+Cd0AuIJK0gQR1IFEZ
QJb7kuV+RP7kSYKf/5cpwNdDpyRQKTPYzCq1fKVJs9qi6gjV98U7T+ZEj+RE
jmV7xnM8ZxPtfcGSoTjraFbEpfzkW3Nz7s4vuLto7v2a0js1xdA1P2le/KSt
5m1X4+99G/9roOfve7u/9HZ93dvz266eNz3tLzraXna2A55tWPt03ZonbU0P
mxouVC7onTZtld5UwRGVsQWFLPYcLneeRLza49mcm1sdHFJqsm6YkX+qsXlH
6cLGtOnZCkOuyjLLEByNCmMYghyVdo7dtiwxqSEjfW3ujPrU9PXTZ7Zk5s4L
Ds3TmyA1p6t0KQptjFgeIZB5RHJo4pwCqZxA09DZIIGCypDTWEICTUpjyehs
FYur4fC98N7xJBYHKxQ2CsVGowbRwLDpThTF6EUwqoPB7BGyk4E4WXR8dLHR
ECYdO06jwKccdHowwrBRaBYSxUqmYiJSKUYK9AJETAI/knQqUTzFXzJlimzS
Tw4yMYnLTmezZvH5FXLpIpm4WiFqNCo2OPQ7I6x7I837wg0nYixnY2wDJtFp
j2UsMexMkutEYuiRhNDBxNCjKeGH44OHkl2ns6LO5yddmZfzcGnx+7XLvvW0
/LFr49ddGz5t3/Cue92rjtYXG9bieL6u+Wnr6ocNKy5XLTqQk9NscywSysp4
okIWd4FCVS5XzFdp1kTHrY6Kr3KEVTnDB5fU9ZYvWpWUniVVV3riC4yOaUJl
GqRakSSWx0+WyAps9pq4xNWZOd3FpZvnVaxMz66IjC1wuDKN1kSlPlqmBv7d
IrmFydPSWAoCqkV4Kir2YByQAL8xX45wVEw+qAAAX8Aun4lEDrk8lMkMZTFC
GIwQJgojMBxEp9qoxCA6GUYHQnEyaIBQFs3NY4RxEJiDBHYqFfQKZbJBBTuV
jilIA1eiggrepExW+ZOkPoHiSX5qXz+dz9QIlJElkeYJxXPEklKppIjLLuYw
qySCWqVojUG2wSjrMgoPhBmGE0P6g1SnYoOHp7mPxTn2uHQ9FkmnQdBpFm0y
wSjc4pDvdGl2ufX7EhyXSzLftVT/vm3tb5ubP3StebtpzcuNzU/aVj9uXQ38
v1jf/Gxt4/1VdVcWLzyan9fuclXLlAvF8gqpskQgm80RzpOpKjSmpqj4lZ7Y
Ep2lPjZ5T9miqrDIGSrDkqiE0hB3pkI73YBtYnRz+QbfABfKmqbU5Jqs081B
qSp9NF/ixOoQLtSEFjoLoKeg2EXG789wY6lpHPwZbiIiHX9gkQLlggQwQoMA
2dksEHlzgTyMyXDSKSEIPRSlOekACkwAwTRyKIPiYlKdCAnGSD4TEM6me0+m
uhhoOIsZzmS5UAYA0w5BbDQKOBFIoAogqAPI0ikBKl+SyZ9k9SfGoqw0Ni+d
wcphMKfTGfkMVgFMSMQiJlIj49cJmY1S1t5wA7TJI+UZ+2dG7c8I608IOpjo
6HXr2zTsFi17rVXQGizpjNLtnObYn+s+mOsZyou+WJ71pHH+r5tWftm69tfu
5vfdra86Wp6sbXzc0vBy3ZpnzQ0P6+uuV1eeLMzfGhPdYDIslivnS9XlUn2p
WDtfZigWaxabgpujk6uDwkCFlpSMUnvwkoiYpsyceU5XcYhrTkholtkOXQ8U
4U42z8kWaAMpJgqqJVANZPwaFqLEym8q/qRH5ffrvxi8T4Xiyils7CFUJObE
jndICt697nxsrzWXC61BtIALxIYxEYCLgQkBI5CMMw8IQcl/SoCGsWgwx0/G
JQhjMAGgCMhn90pgJmPpALpjuQ9BB02ZHyXInxJLZyWjnDSEkcvgZFBoqQHE
tEBSeiAxj0IuZtDKGZQVEtYet3W4IOVK47zRhrmHipJOFSUfy/AMRFs3aLkb
TeIt4frDebH3mipedtY9bFlwe2Xxter88QXZNxbnv2iq/NTV+GVL28ct699s
agX7f9HW9HRN/eOGFQ9X1t6srhyeO3t3clyz3Vyj0swTKkuEmjKJvkJugsl8
pWllSORKV3SJyljjcjelpNcnYSm4Jj6hOCS0LDo60+4woRwdlWFmcAFQ4+mo
2OM0IdtqvE8NxbY9EL8/QM87QbEbwEkoLoGCysFuBiezwAuw2zNp2I5H731/
fHx/I0iQJBNG8VAPGwG4WXQcLpQCmJiHM2lRPGYklwETOAJjGEoHhDMYgDAU
BSfySkByoJCUyZAOdASqOoBiJNAtfrQgX2o0lRVHQWMDCNMo1Hwef4FGV6k3
livVc/nCIhazhEGrEbN3RQaPV+TdXlt5u33JkZK0Y7MSeqOs3WZpu5TToRBu
MSp3OS374t3XK+b8fWvbHzsh2i9+1lp5Y1EedBBv19V+2dz6eUv7h571L9tb
nrY0PG1a8aS+9tHymrvViy6WFe3PTG4PDVqm0ZQKNUVcdbnYWCE1lol04BFL
dEENYVEVekuxWtuUmLIyPq46KqouMbHEFbIgPh4qfK33Oah6Bk/P4uPPPYMR
ez4k7Xucn3gAAv7IR5H3Xkt4S0nn4c8VxB8t6H2YJAO/AQ2/4wC6M68EfJAg
gkMH4EJEcFCcZ/wlTvsPElDDmZhALoQG/LuZTJAglI45DsQucATwApBAG0gC
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
yqFg3FZPzBqXbVKrXabULKP0yyjDlMo2pXFM6dwTBveIPrZP7+y3xA06E7tt
njJdTKxEDvWPWUImaC353mS/3ubVmE0IQUUL9EKMqT+BAqjw87TPVErP8w8A
Cp8iKFTzBFqBKHwWh9gkFVkwxCqTOGDoytEMUppFYakyMbykoMLfCyS6LoIn
1ELwBC1IJ/FUQgoI6D8hgmQpHQ5ZpDSboC1Hjucq4L+NSMVx6BdcPJ4tmm3n
cK1RHEckOwuVNKioXgqD9H4w0Xk0x/9qjn9NjGpMLt4So3+3vvz7mcGfdq+8
t3P5g50rftqz7sd96+/vXv/ZirHzNSWHA57dVu2sDj/iNV8sCd5qLf9gqPWz
yeGvVs7cXbv2/qYNP2xZ/wBG/u6tj/Zuebx309Pd63/dsfbnjcsfTQ/eH+26
29v8WUvFezX5FwuDr6fF7/DYNsZapvWaSYVqWmlYTpmmKNuUyjmtdU/p40d1
sV1Ka4vS3GWO64rxVpvdCYQmfPox7tGaC31BQACBAETISB74FkDQJ+GE85Iy
fKjs72kf+T3/iJl3NZc+fZS+iQARAQIjjUBkkUkgCjLkkiwFmqsB14nScASk
FlgAiLRwzknDpekEPewBBPMCvwE5SEZ46TJxFi4BA//nUrKQHMtTyiEjpWDS
ZBnmFvKtUVF2FssZxfFxeMWotFen2ei0HvTHnshIeCvHv9dnHSMF05T0laT4
L/raH69f/mjXGjoEtk//um/9Pw5te7h15VfLB//c3367rvxacc57lYVXy7LP
lGSeqcq73FZze6z/y3WQtbY92L7l4c4tj/ds/2nf9sd7tkCD/NP21U+2rny8
buLHqf57wx1fd9V92FB8vTz7fH7y0cyEfYmOXQkOqLLW6PSrlPoZ0jCJGycI
86TSPq52jupcrYShXCxvUFs77AmVpthElVEvpg99BTkGBAGTI0FtduJqKpIP
Mv0MAQ9hegE5S0AfjBA+zvrZqQjhF3qCCPRaJIYspJOC/xEDJjZjCCBwKals
JZajkj1HAG6HuIAXeKYTkky5LIvCw0kGzSLoSGEAgSIzCDJlCCT5PAUO7wAi
QyYFgc6QEwEMdbJZ9qhIR0RkqkBYhWEjBu0uj/P1gOdVX8wrXssGnWwZyt1h
05/OTf9yuBvqmQc7Vj+Cwb99+snOVf/av+nRuvEvBjs+627+pKnmy87m74d7
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
1OYUhT6R0rtlSvoTvESuFuNGTJ3nz+iubG3Or27Kq8qJC1pQjYqLaQX08eDP
Er5ATB/AEp6deG70IZn/63YbqVGMmcI7Dux4+DAKJZWhxNIoKT0pJBNCaQoI
oDQFBLlQZFIYU/mAHAAI8DwM+zINjH9VjUlba9ZVGzVVBnWdWdNo09eZVZB/
mqwqCIHuOEOPR9/vNY4GrOOJ9pmUuEG7sQZBKjnCRj7WKpJ1ifFlhHwlKZ8R
8LbIJK+YNG/GWc5kJBxP9+50mg753C+77ZdCGX+dHns81HU8IeZs0A356p8b
lv1zy/KnGyZ+3r760ZaV99bNPN689seZ6UfLJ39cNnZvsP/b7vY/N9Xdrim7
XpF/pSz0TnXejbrCGzUF75TnXMgLXsxOvpmf9m4w/m55/qfFeddC2cfSMlYZ
Hc0SRaGAKKYM+WpLtsYcUOgSSFU8oY7FlVCOahCCEkL1aKrILO6v7+koa+ks
by1MyjUhGiUHogD/IwJIR88/34RrIUwtlOmEuEHMnJyMQS6ij7AOI7DJcAgE
QJCpkgGCFEL8RwRguUoZ1P8lGgICAZIP1JyQ/CEEStXyCh0MfggBNbAAqw4H
QqNN22TXtNg1bQ41DP5er6Hfqx9LMo359CuDMSPxljq5tEwgrBZh9QjRJJa1
iqXdYmSIw9kgQw9bTO+EUn8Y6/pxxchXo/2f9nX9ebjv541r/7F94z82rv6g
puTNBPs7uUmPRlr/tXHZ3zYu++vWlU82zNyfXv5wZsWPU1OPJiYfLVt2f3j4
u97uz9oaP2iovF5Tcq2u+EZT2a3W8ptNJVcqcs7nB89nBy5n+C95rHcrcj/M
z76UnfWyP9AlU5Ty8TxEka+2JhM6j0yVQOk8lNYlU9D3eJIaCAG5CI8zuppK
6wcb+1pLm1qLGyvSSwCBgiVT83CgoOTTR2IyZ3FDF0AKEKYdoK/zEGBaMWGQ
UvTyCdrQPyKAQKAnKDQEBEKQRCAQgrg4laC7MzAagZoo1SvBnnUBahxq0WI1
WaqlyvXKCoMKKEAgVBshKNRNdl2LQ9cao+1waXsBQby+N147lKAbTVCNJ9Iv
TQayWCoqFksrpWSFGC/mCys43D5EvNdpP5nke7es8PGayb/v2fTPQ3sf79kO
ze+vhw882Lbxx/Ur740PXi/KOumzvV+a9nC46V/rRv+xbvLp9OTD0YkHwxN3
+4e+Gxz6fmDgbl/fV10dd9oabjdWXq8vu9lacb2t4mZn9bXW8gsVoXNFGaez
Ase89qMm6t2UuIsB7+G42JU6Uw1fWiAicwlDkDC6EMqOyOMorVdliCXVTox0
EEolDGBcE4wLtla29jcO9NT1thQ3F6cUmVADxcGVPFwlAMM0Iow+hggUQSQl
hRJ4KsSoQiRjrpPQSeVaCa5DcCiKmLqIOSoQFBkQhHTyLDUOgQAU0khJulya
SUmhOwZRDoEE6xRlBhW0AHQXoJPT0qAmS6DC0SmqTJo6i77eqmuw6ettGjoL
xajaHJout37QZx7ymwZ9xmUBE/h/xKcY8GnbnMoyCimSIqVSohiRlUqwEg5n
kCLezAxeyM24Uhy6OzkA6eXB7KbHB/c8fuXAD3tn7+3Y9O3a5U/WL/9+qPVW
WdrpZOv1oqSfxtp/mxl5vGz40dDYd1393/T0fdPXf3eg/5vB/r9A+HS3fdTZ
+F577Y226rebS6+1VVxtLj1fnnO+OPNUZtKBGON+LfmqRXfAbptRaup5SIiN
ZAjlQZnWKSRtIgL0N5bUJqiNYEDBIpVrxPIYjS0/JdRU0ghRMNM31VXVnh2f
bsb0Sh6p4hNqIaERkeBkoKBBZOB5uUhKiVGlRKYU45QQAwqQzXRSAigwi4iY
I9zpwxDC69sLTMocLcGIMvPJEgIhU4FlgRaoSehwC1QEhABkJCh+IB2VqEgm
F4EWgP8Z5zfalZ2xuo5YNUhwV5y636cbTjaOpZiXJRuWJemHE9TjqebRZFMh
zirGhJUEUSRCSwQIlKlTJvVrGQmvp7mPZsTf6W64t2rZTzu3Ptq388Hurd9t
W/PdpuVfrRj4arz9/vLOe2MNd9oLT2Y6Pusof7K8/95w17d9nXf7ej7vaP+y
pxd65z/3d3/S1/5RX/v7PU03O2uvtVTebK+5UgvpqOJCcc7Z/Ixjqf4dVtMq
ObWC0g6Tmjoxmc2SJLIk8QLCK1NZBDIDD7EhOISAT2OKwSj6BmGp3KEwBZ3+
5uLavrrO8bahkaa+8rTCkkDIiCjV4RDQiuVKAS4X0PcHqRBCgeBKCaFFKTDw
PwnlUPhSIZB12v+/X2dgRglbeA+4S6kM6chMFRb2v/DZ53tMCBRylHieRl6k
o8Ag8zC9MFi5FmpRBaSgWrMG/A/9V6NN3eJU93nN/T5D2HQDibqhgGE02TCe
Yhz16Uf92qk0C1CoVgnykegyDCsWIDVitFEsntCSB1NjX02j1zReLs251VD5
2djQV9MT36yc+Hp66JvJ3q+WtX05WPdFf9X3o/X3lzW+W515vSLj2/6mu0Nt
X/e1Q9q509F2p7PzTl/XnaHeT4a6bve33exueLer/nprFcTCtYaya3Wl54uy
AcEr/riNRv0KtWlEYWqRaYtE8nQBmYjI41GFQ6owQgMVvsnUiSs9Sr1boXUr
9D6DzaePgVqovaxhvKV/qn1otLGnvbiuPJgHZSqoACCAEGAQQMqCYQ/+l4sw
SEFqCQlE4AkBQucihKTXcf1+eCl9TlcYgVtNhwAgYBIRiHK4NKI/00AUZCtA
DkhAAJmnSEUwHTEjxFAFQSHKSHCbQwfJZyjRPpJsHUu2jQRMQ4nwox4QTKaa
x/yG8YBhKmiG9zYLniuMKJVKKiWyWjHaLBaPKrE9PvuR1NgjAcfpzKTzoYz3
yitulZW/W1ZyoyT/VlnuhzV5t8ozL4a8N0uCX3WWf1JfcC474U5T2V+6Gz5r
a3i/vvLT9taPOto/7e0EBb8z0vN+b+vNzjowiIJbbTU3myuv1hRfKA6dyc/c
53FstBhn3d5ps7NJpsrloxliMlWu88t1ToyyIDhUjGYpFqfS+PWWBK3Jp7MG
LE5A4NFYvVpbdXr+eHPPqp7RscaufG/Qiqmg1AmrAH1zEGQb8D94XgetHEoY
MDmYVkIyBn+lT+4K35RqQHELRj47D0Quj9eqc7QQBbJ0BcpYqpxeuBgkpamE
NJ2QhBQy6G0L1WSBAno0AopSyD9QkdZbwPmGVqexPdbY5TZBCTTotw0HLFCF
jiabh5MMYMuCpukM2/IU60yqfTJgnEg2DsRpC8XRlSjaiMubpUQfKV+uU+6I
N7+WHHs8Ne5sZuBSTvr59OBbKUlngklvpfiOJzqPBxxv+q37XYp9DuWxVOfF
gsDpbN+t2sI/t9eB7N6qq/i0o+2TrnaIgs+Guj8d7GIQXG+tvtZYfr2x/FZz
FSC4WJ5/IjdtV7x9l9d9NL9oqz/YoTRm86VBEZ6q0AVUehehgnKdQeCi6Ot+
nKTKpdB5dRZAELTGpVjcufHJ4Pns2ER6jsIca8c1ehHBXAjIXGFGIxCj4H8z
oXSqDTFKHeN8yEKgEeB8EOLwgl5aBRj/OxUKr16bpSbTFbJUOZpGYcxLCo7S
n+lx+gNZDkXPPBdpqMJwIUSPf4u+1qhtMGnaYkzdbmuvx9rntUEWGvLbQH+H
EyHnm8fDBslnJtO+KsMJNpVsmgyYpwLWGkpchUqaCXkrRg4qlFNaxUar5o3k
+Mt5qVfzM68X5VzITz9TkHapMuftmtCpgsCRLDfYq1mul1PtewPmVzPjjhck
X6wOfdTb8E5D2ZXakg87mz/tbf+0v+OjntYPelo/7Gt5r6vhRnPVtcaKq7Wl
7zYBgpJzxXmHUxN3eByvZKScKq/ckZrZqTNl8hE/T5wgozykCiof6FshSwOC
8Nlx9F0nCXpzmsOd6fRmOxMy7PFZDm9+fADeU230L2NItQHBmcXSoLPgZJWE
1mIoR40Y4VIZHAod/Ik+NllKGlFarOnze9FnBxOZcdxKkg6lEhBkqghwPj3s
wxTgmSyTBjD6SyUEQhaFQy4q1irAoBCtNKrrTNAIq8IIDD1xtrD/Lf0JluFE
KyCAQmgsxTIZtILRCNJtK9MdYNNBy3TQtjLN2W2hqlBxPYo2SdFuQjZKERut
2ksloW+6m+92Nt8faP9mpPXjvlqwO6MNnwzXfTBQ/cFw7cdjDR+PNV1uLXyz
JPhmYfB0RfZHA01vN5adqci91Vb/YXcLGLy821H3QW/zB12NgOB6Q8WV6uLr
9eUXyvOP5qSB/3f6Yt/IzzmSn7fBn9iq0mTyRfEcgUsksUtkJkSmE9DXnYDn
PRpdgs7gN5jS7LG58f5Cb0pNWm5jdlFtel5VMKc0MR2sNjPfhin0YXllbsgF
BDQFEd0dgKvNMgUY/J65aZe+qTl8cqkBxcIb8GVGDLMQREw4CrLVinSKCBJY
KilLk+PwwiBIwehclCmXhSiiUC0v1augQYBaFBqxOgONoNWu73SYumNNffHm
QZ911G8dTjCO+s0TKdblQdtksgUyz/JUC6jA8hTzTKoVMtKKFPsyj7kK49ei
SAsh6yCwfhLbGGO8Vln8bX/bd10tv00P/rZ+9MHKnq/HW76Zar+3pu/++sEf
No482Dz2cMvkt6uHocg8WpR+oaYQ8vzFqoKzZaGbLbW081vr3mmqvg7vHY3w
4/Wm6nfqKq5UllyqLD6Zn3Uw6NvkshzITD5WUvBKKGet19OiVIUQxC8UAwKL
gN4RpuTQNwe5SIVfZwwYLUkmS7I5JtXmKnAnVQWy6lJzmzIL4dmSWzpQ2ViT
kWdCCKbhfXZJsRjqfwwQMOckMyeUhu+PoCkw83h0RxDefW+QYfRMKSlzqKjn
CCD5gPMZ/yehiF8iCsrQdBIHBNkKgp7qNKihQQBdrtIravXKRrO6xaZrtWna
YzQ9bhj8tuEE85DXwCCYSrEuSzRCOTqZYoInGLAYTzSO+03TSfYaUlgvR1qV
eCOGtIj5o5TsgD/+WIrvTZ/zdnnowUjL05nupyv7flze9cN093fLO79e3vX9
mqGvp/sfrB//cKDlRGkWSO356oJTRZmXqotgwIPzrzZWvd1Ev1xrroH3q/UV
l6to/58rzX89O7g7MW6T2/pGcehkZdGbJQWb/P52jbZQJktHca9EZhNLjSKJ
jt6gjToJyqvWJevNKWZbqsWZZqURFMcnhxwJ5f700oTU9tyyyebudFucQSSj
Z95E9EW6MMjpK2xEdI/MrBoF/4cvB0QgUpgoeC4EFoI04jJAYJHjDjUdBRkK
EsZ/Ci5LQqVBAk+n5H4JkiilowAoZJDQIOB5KppCsZaCKKDnIszqJlPYzMpW
m6rLpe/3mgc9xj63ZsijnwhYAMFEwAxRAIkI6lJalNPsAIX+U8DaE6OqwLi1
hKiRROpF/FYRb6VOtcdtfdlh2G+hrmZ6Pq/O/q6j4m5H1VcdVV90V3/eV//5
UMuXY513Z4bf72u+UFd8GVJQVf7RoozztUXwDnalsfJSUyX9rC8/D8m/suhM
ad6FyqLj+Zm7fbHbvI7D9MFTxWcbKo4UhtYnxLerlAVSNE2CJWKkB6dMAgS6
AEUUzyWTJ2oMqQYrc/REkSepLphdn5pTm5rdX1YDVpKQPFbfCo0DvZte9Psl
KSgO7oXxDw0yHQLhP4G+Qwg8tz8iMJMEmE1BOjVKBgEM/ucI0uQkg4BZJpoq
o9eugCjnKvFCui8mQAjqDIp6vaLBSDVbVBAFXbG63nhjf5y+x6Xqd6vG/Mbx
JBO0AyM+zVhAD3XRZLp1IsUy4tePJ5mXB+1DHm2LAS2RshsoSQMqruNx+lBk
i1V3MNb0ikPzhkt3JdV9uzDldmnG+1WhD+qLbjeX3W6v/KC36c5o542u+jN1
RWAnq/KOV4QuNJWdqysOW+nZetrO1JWcqiw4WZr7Zl7GG7np+5K9m2Ote9N8
5xrKLrVWH6vIey0/c7Mvvl2hKEDEyUKxF8EScIVDghshV0TzYzFFAqXxK3VB
vSXL7m7OLugprPCpDOkWZ2UgHYhA++CAPC/B/4gAfAs9L71Ggk/v72MMxCU8
L4eFp4boKKD7YkxG7/XDZWAQBTFKuUenYYQgWYaB258jABwgB5CU6NJUTnfK
ITVeoCGLdWSljqrWkjV6os4of46gG/oCrwmioD9ePeI3wIB/jmAsqB9LMY4l
GQFBOBDMIwm6HidVjEZXkcImUtaAiNuF/ClKtsOq2udQ7bZRbyRaT2fFn8lP
vFSedqU2dKUu/1JjwTudNTf7G6921Z5pKj1ZV3ystvB4XdG5lkra7TXFp2uK
TlYXnqgqOlZR8HpRzqv5mYdz0/em+GZ97v0Zgbeqi6521AECCISXs1K2+OI6
lFS5TJYmksTxxLEIbhViBq5UwxK4UCoOV8ETWMTLNbkub5LGqooUOFGlWUwY
hTIwHY+eedYL/+NeOuHTF6bTX8dozwskzOw0IxbMPwiffiD7/YQ0Wo6hKLLT
Oy61jBAwCCAWgIIPEYMcgP+hTMqgZFlKGfg/V0MUauUlenm5Bq+CWNAT9SaI
AgUg6HRpu2I1TCICBMPQDvv0w14tNMUTQdNoig56NEAAoQE2lqgb9Ch7Yql6
HVIq49aSaK9GO0DJR3HpOg26w05tspB7/ObXMuOO5vnPlKVdrAuB/y81F11o
Lr7YWn6prfJcS/mp+pITtUUnG0pON4SHfXUhDO/Xy0OvlYYOFWXtz03dnRXY
n5m8LyNwOC8D/sHb7bWXW6vPNZaD7Qv6N8Q7O1WKVoOhVK3zIzJr+CQxQACu
hlgwC1ETJHmOSBnJhR91bPredmW0UMulr1Nnrq0ML1yRPPscEB7qYPTaddrz
9OJS5uvAc/8bw3VR+DAcgjmS6I8IoApiSiCQYHgB84r49OpcKXTKCB0CSlmO
iqaQr5YVavAytaxah0MINJgVTVZFi13V7lADgg6nqtOl7ItTDXq1g15NX5xy
wKMeSdQCghFIRwET1EjQGizz64YTlANe+l+WkfwKmXTQZJmx2lYZNNvt6pd9
liPZCcfLM8/Uhs7X5V5syKetLg+eZ6pCb1XmghBcaAgP+yrajpflg8jCsD9U
mPlyQcbe/IzduWk7c4KzWcl7c1LerCwAn59vLL/QVPF2e/X55jLIXfvS/asc
ljaK7I2JaXTGZmkM9HEZ4GqeVB7BI5dy4QksmJVazBX2MPKBApRARjFORvOf
X3D8nAIz5pnrF5ldxvB72vliEjpoMHgHCsylNswp+rSFEcSpaQTgfxj2PkQI
T/B8vIBL7yaTCgIyeokvPWWnQLOV0lwlWqBGy9QoIAh/oFQ2WiigAAg6XeoO
p6LbraZnpxPpnAP+749XDSaohhK1NAiffpnfMOEzjPvUY37lWKIGgqVBLwME
7So1INid4DmWkXAmP3Czveb2YMsHQ623e+vf7ay+2lx8uTbvUk3uuerctyqy
z1XlgwSfLs8/VhQ6kp9zKDsdhvrezAAM+x3ZgdmclB25qbvy0/cUZLxZW3yq
ofytxrKzDWWXWyvf6aw911TyRgkkqNRpu7EJx1pNxiaXuzQm1sgW6Pm095Rs
0bPr1KPoC0PhNzCSmeW79Are8IoIcCazmvo5AnofR/hjsZotZhbXMX+ic5SI
oG/D5NHbbfTP5uhoCuHbbegGAbozl0IFCBjPAwLm6eax4fkcQbpcmiGXZFLI
MwRajPlGX2dWAIJmm7I1hv5G2efRgQ34dMNJdOYfTTQAiNEk3bBfAwjGAIFX
N+7RTSQAAmrUT8dIZ4y6TkHVofiIWrfLG/9WTtKVknTop6CqpHurpoqbzeXX
GkouV+deqgqdq8g6XZ4FFembxZmH89PA7bOpiWA7U307MxJ3ZaXsyE6ZDQV3
FmbsL899paboTEftiUY6ZYEEXO+uv9JW9VZtwbHynIPZyeMmTaMMrVUpIQqa
koIGjljDAf8jzI4wejk6WyRnCQiWAI/ma/kYFS1Sc6WK8D+guBKCJdKIcOaO
RWYrn4ojgf+4ikVf/8pssYRf0oM/jACMedf9Pk0XpoA9u92JUkNHnITRYz4B
4dFPsSCWy4InvDP7m4K4OEiImMUtgKBUh5XrZBV6vMYoBwSQiNoAgUM56DP3
xIEuKLvcigGPBvw/lmSC/AMUxgOGiSTTlM847dNP+7TjPmrIQ4Ic9Mbqm3Sq
ahTrIqnVVvPLSXGnc9Ogkr9YUXShvBC62svVhRcqQqcK047npRzNS349N+Vg
dtLeDP9smm99IH5tUvzGNN9sTmBXXnAvQAnby8VZr9YUHGsufb2+8FRb2cXO
6isdVVfaKi+1lL9Vl3e0LGs2yT2gkTcSWJVS0erxDheUOBHMAImFRa9OJCIF
ZJSQYj1bjiuL4sGP4H/4DbyAY/FooVooA//DCwnDPryhVRU2DUeq5aKAgN76
EUbAJCJwvlmqMCJyRrufRwGDAKIgEef5ZdwElOuVchKQ8EZXek+HOEEqerbL
BuMnY0LmU2ahlijUyQp1aKkBrzbJ6XRkknfY1OBMsM4YZYdd0RurHozXDcZr
4AnZBgokwDGRZFiZYlqdYphJ1Ix7FSO0FiiH/JYep7FEIqqRStoJcrXdsSfR
v9/vOxZKP1uSd6Y0dKY052RhxpuhlNdykg9nJu9PTdyW6Nnoj1+f5NmQ6tuQ
mbQ+FFhXENhcGNidn/JqYcax0uzTVflv1ReebC5+ozH3aFPock/F5Y7iqx0l
F5ryzjaEjhQnb/O7BjRUHYkXycmZsrJV9XVOMX3IiY7N09G3MokplkTBw+i7
RFk8BUcQXg5ED29mWwfNIrzRDJ4QDszaOSYR0ZftssUgH0xCe57KmM/3oAV0
v0x3B/RSImaCwiaX01u/CU6CjOWRRMcjLK+Y7ZFwvBK+R8qPFXHjEL4XFSWG
N5plkNKQQpanwvO0WL7+GQIQ5XqDvMVEddrUfS4aQZdD1R+nhTZ50KMHA2kY
9OsZBDMpxlXJ+mm/eiJBOZqgoVNWwNbu1JfJpUWIuFKCNkjxHkI5rtNu9cS+
nB44lBk4mO7bE3DPep1bPTGbPbGbvO61HtfKuJjlcfaV/tgNWYnbitM2lyVv
Lw8eKss4WRm6XFN0uaHobEPBycb8I/VZbzTmXO4pu9RedKml4Gpr0eXWwpdD
vq2JriG9poaSt7hcO7u61zS3ZJuNNiFPH83WsvmAgIiWkBwUnEwjYIevmWbT
aUoRNsb5z03++z6a8PIt5kIBWscZTQEu/1nNIqJvF6LXt0ukeuZIIpnUQspi
VYpEku/F2OD/OHF0nJgVL+bGiXguIcfB4ziEnHgJvdGJLo0INFuOhhRYgRYr
1mGVJrLWomgwyyEKAEG7VdXt1EI6Al0GRRj0GcHD/QnaAZ920K+jm7IAjWAm
oJvyq8d82mGfbijF2ptoLdXi2agolcPKE4rz2PwSrqBCJO5UUmMm/XKLYaXF
MGNQT+oUy7TKYS01YtKMxRjHXaapOOtqn2Nbmmd3XtLByrTD1Wknq7OgagLt
fru59K2mwqONecc7io+1FLzT33Czt+FqS8WVhlKwV0LJU1Z9t07dZDRN5xe9
OjkzVdPYnpUTLyN09A0mQhUbJVlSgh3e1gpBAQjCOzWY3cQKzrMr73G2gOAI
wUjus99ApQTGeP6ZprOEz7d4MDuO6UV3QvqENKNUCmbAJCYcdSkpP8FjELhF
0W4h2yVkOQVsGy86RsAFc/K5EA4gDQFUFG6T0XyVFOSgyvhMjpvMVJtFCXIA
RWmbk+qIVfZ6Nf3gf5+O8T+NIFG7LAkCQTcB0uxVgxD3eLT9yTFVdrVfzHZG
LXJHRKQKhFkCca5YmsUXFIrFJQJhBY/fJBJ0SES0oeIOOdqpJvpMylGnbqXX
vi0Yvy/TdzDHd7Qy9VhV8Ex15vm6HKBwrqnoZEvh0dbit3qqznZXX+trfK+n
8XZH462WmosVBZDKIAQ6TMbh5NQ93YNHVqwfLquebmjJiXHpWHwQZQ0fV3Bl
JEcavshYQLHY4ZsTBYw6M0umwfOAQMbiw5O54xJ+A6oBBv+MBkHvxxc93+v3
e+0q+SMCUzgKzAQGURC+ZpTnkXLdYnB+tIPPiuECAradz7Xy2VYuK4YXDWVq
klQICEJyLJ+SFqvQSh1ZayAbjCQgaLEpaASx6ja3sj1O1eVVP/t2magfCRjp
itQPFZEWkg/t/zhVp1vV5FLXuY1BUmyKWqiY94J58RJHVLSfJ0zkCTJQPIQR
+SJpIU9UJUIaJdI2DOtWkAMGzZBNt8xlmvHatiS79mf53shPPpaf+GaR/83S
xJPlKSer0k/UZB1rzDvWVnKiq+JUV+Xb/c3vdNbfbKm909l+p6PlVHb6Ortl
0h07lJA429R+au3WV2bWD1c0bh0c7y4oh3YM9FTDJ1RCUs5FaQR8LhkVSURx
wKs4i8uYDJ5sHskVSFk8lM2XcYU4T4RxBFg0DwwwAQh4wviX/25Mm8AgYLZb
GiSS8I5L1E7ibrUS/B+PceMlnFgRG/xv5UaB/20CjpnDYszO58SL6ZYhDad3
TebJJYDgWYNskEODzIRAd7ym06MCgyjo82nowR+gV1BMJBshC0FHNpKgG/bq
+r36tjhdnUtfaFbHCNiKRfOkL75ALVigmL/Axua42LwEgTQdJfNkVBEqr8Dk
dTgJjcOgyTRkNc14XJvSfLuzkw+GAkfyAkfzkt4MeY6FvMfzfaeKU05UZByv
DR1vLjreWX66t/pCX8O1gZZ3e1o/7ev6oK35XGFoR6x9ZYx5PME7k1twdPna
q3tf3TqwfKCscf/ydbuWzTgkFCBQcWWAAKKAviqOyyailuCR0UQUj3Z+NAeL
YqNRbKBAcPjgcKAAzgcKYPDOxAUWyWUoEL8Hzu+BgIRvwBQwmy6BghmT2gha
CzwyfhzKdSGcGGE05B/a/zyOlccxcTlGTjQggN/EiQTQrKWgknRMkoMjRQoM
EEAUNJoUbXZ1eI5IC7mlx6MG//cmqPu80KPR7diYny5HoSkbhpY5XjOQYOj1
WVriLVUuU0COaSKXSObOFc+dj8yZJ3lpvjqKbeUJYlkiPxcN8NEUvjhdJMkR
SYokaDVBtlCKEYtpU6LnQFbK0aIM6BFOlaWeKki8XJx2uTD9fHHmmcocqIXO
tFec6a05199wbaTzen/b7YHOT4d7T5bm7krxrPXaViTFTmakbqitP7pq49UD
b6xuGxmr6nht1ZYTm3Z75XpAAOWQSoATHDHOYiu50WT0UjKaTUZzIRbA/4wB
C1k4HDD6hc+IArzIWJCgREw4gDFE4E/MZnAFX0TxAAdfE950aRAjZqnEitFa
AAjc0rD/+ZHM+Af/m3lsE59nCFMwsaMdPK5HKPCLxSmIMB0R5BHSUhVeraUR
QGvc7db3xOl647W9gCBs/fFQl2qG47VgI9Cvxal7nEqIlC63vtNjaYi1ltgM
Fi4bW7BA8OJcWUQUb858wdz50kVLgEI6qQtKFV4u4mbxEjj8JA4/wOJksDiF
XH69BBtSqze4HUdy00Bbb7SX32wp/rCh+N2q/MvloTPQvjWVXOiuuTzQcGWg
+cZgx82+tps97ecbqrcEvNAv7y7NHE12zzbV7+zt37dsxfndr63vGt/QPXFs
3a43Vm9L1doNXAwQKJ8h4Co5IASRSg5keB4eyQYDELT/w+FAsHl/RBBWB2HY
gAX/OQIQi2fbbcJ3wkIUgByA/42IxCRBGARxMp5LCp6PsvAiwP92Idcq4Bp5
XOYOSjBzWBfoQKARiFMlglwyvMRUS8/UNVnk7TZlb6y226mEcrTPremDvsCt
7YMGwSofjtUPuPV9bkOHUwNNXKtT3xhrLDAo/bhEHbFUumCRYM4CzkvzuS8t
4s8HW4DMW2iJ4OZQhiKdNYBg8RxeKiLNlZF5EiyPJ65G0FZU1olKN7kdr4aS
z1XnvtdW8VFb6ced5W/X513rrjzXXnqmvfxyX/3NwbYPh3ve6+08V1u1KyN1
f3HBpWWDqwuy1lQU7ujo2NrZe2Xfq6e3H5wdXnVgYuOxtbPbe8fiUYWJnkkg
FHxcFi0G78nZbHk0i4zkQG1DRvLC1T4PWxoNLOApi2ChkSxgAbB+zzlimh3k
Is5/DJTi2UYnIUIvOuULAQG971Isfo4gHuc/R0Drr4AD41/P42g5LB2Xracj
ggupyS2gz11JlaFBqSCHlBapZGVaHHJRvYFoMcuhI+h2qntcKugLuuzK3hht
j13TbVF2mJWtZuidjS0OQ41ZWaQlMimpB+EZWVHEwkXiuQu4L85jvTCfNmAx
d4Fo3gLypYVurihbpS0yWHIUqoBA7Gdx0wVIvdpYIZF1KrUdJNEuFS03KPal
xJ/IT75RH/qwq+RaR+Gljvy3WvLOd5Tc7G+80dPwTkvdpbqavRkZu0J5F0eX
XVi5cra9fU1jw2hp2anNsx+euPDOoVMHlm8+OLX50OS6maoWH6FxShVaAYmx
UJSNEjyMCJc3UORAO0ZE8OVRfCKCK10YAc6n/b8kCkA8y0vhcgiL5KNRfNDo
5wIB/if49HY/pZD+mgO56I8IjIjYgkqdCrmHEMSiMPijrfxIC58NBiMfnK9g
Raq5LPruaQ6byUU+CAEcS0HFWQq0QC0r1chAkWt1skYD3m55RoHuke2aFlPY
82Zts0HTYDHUWY2lelUqKnSxl5giFqiWLCAWzUPnzxe9NB9SEPvFBYAg+k/z
2C/NF85bgM5dIHvhJeOSiGyFpt4RW2OyVWiMdSZ7gUxRgOJ1SnWrWtmropab
NRvshpcDjnPFiVfqU660Zlxoy7rQlnu+JfdmT/V7XfUXqst2JQd2ZedeGpn4
cOf+l0emtvaNzbR2v7Vzz18uvXPrzTMntx/aMbJ65+DMkeXr+3KK3BK5lzI5
KKtaoicEKpRDotEYwZZCmyDnSIlIkTxaBLqMLmFBOgJj8hLIBH39d3g2SRYl
AASSaK40XCmB8xljNl1SfChfhUqB8NnuY1qRxaDI9JnJ4SiIEbFsomg6BARs
HTcanK/gRCnDL1p2pCE60s5he0VCels3Js5UotAml4QR1OlxQNBqoSAd0aWR
S9cco6W/rJl09WZ9qUoZohQpGOZks5RzX5D+z/+RzvkvZM5/81/8H2T+PMFL
cyEKuC8uoCm8OBcyEm/efMn8hfiCharFS51cfgahKDeYW92+kfSs2caW46Pj
exobJvy+QbNulcOy0+vc5Ta8FrS+VRh3sSF4ujb5QnPWxcbsa02FF6pyd3nd
L2dlvjO67L3N289s2D7Z0Ll+dMWNU5cfffz5p2cvXzp07OSOw2+s33Nk5bZL
2w/UJaQ4RHic3Ow1+z32NL3KS+/M5mul0QQDAosSQ79GsERoBAe8/dz59H3f
HD7xbE5PiEULkCiOJFwpQQgwBnIQbh+EYAq+4DkCPSIyoRKoS2MxrkPCsotZ
MQg7Rsz/HQF9zTFtnEgNOxLyBjQLCWJRMioJyMQZCim96Fob/mpgJJtNJPi/
2UrVWeR1VnWlRV2sVxbq1VkKeTxfYFoarVkcRc6bh8z5H/Gc/0EWvCCa/wJ3
zv8I5r3EnTOH/acXgYJg7kLGAAG6dCm6eIn4xbnoC3PsLB7EQpnFWWl3lZgt
a8orzq+Y/vrA3gu97Zt8rsPpfnoNWFrspcLAtYbQW2XJF2sywE4XJu9OsO0J
uF+vKPpo04abO3ftGJvYPr3m5sUbD7784cHHf7lx7Ny7xy/fOHrx5pHzt4+c
P7NlT4bWBhWRBdU4tN5gUoU7tkSnTdMqkiUcA8qRQ15CIsTSaDEWJZJEcGm1
jeQ+12WUNi4Y+J9BwLQMjBY8z0jQSoBRAoFKLNaETSsRQYNsxTEXyolBogGB
Q8KxIXyjkK3hRav50So+WxW+e13LiTJzo10Cnl+CpOBookycrpBCFJTpiHqj
ssmsbDFRrTZVk1XRGKOpdRhotcUQKK70URHUwsXoCwuxuUukCxYjC+YLFr4k
XDSHv+hF7oI/8ea/yJ3zAufFF6EWkiyKkC6OlCxaIlq0mPXiHDQySsHhEUsj
5QuWaCOiPCiea7SW2525KnW5Rr2/tvLtoa4d6QnHijPeqS++0VB+qargSlPJ
5baSqx0lpyvT9wVsGx2qN/KCV7qbLo4PfvHaK99dvvLj+x//87uffv7y/scX
boJ9ePbdm0evfHzqxv1rd7Z201rsU1oMEo2eiktKrPX46s32MqezUq9OU+Mx
lFQjYWEISyKJFkuihDJGc6M54HxpJEsSES2JYIPnwf8oS0gnojCCP1IABEwU
AAKlSMQgoE9CkEkhCgCBXRxlFUYBBYuIq+fTIQAIlDyWWsDRCUCRWSZuNDRo
CVJRkMCeI4AoAARQlzYb5S1WZYNVVWPX5Onl8RKecskCwZw/8V58QbxgEf/F
xYKXIvnzlnDnz2fNnxM1/09R8/87at7/w13wImfui/y5c0ULFkA5CoYsXAwI
YGhB+wm9D8mDGOfiUVHyyGgzl5+p1tbYY2p1mla95kBJzt6cxBP0cY7QArcf
aax6taXi9GDDucH6480Fu9Kc2/3ms1WhPenetcnxrzTXHG5vPzu54snJt//9
3hfXXzv96ZX377z9yZ1LH9279Zfv3vmkI7PYjShiCaMRtygItyuuIj7QbnE1
xHk64+JqnbZ0iy6WECtRPo7xUCkHwfmSsG/Bz+BtjiSaDW6H5AP+x9giBsEf
Q4BBwGgBg0AlFqkRsQ5FTDh9GI4LY9vEERbBUqAAWQjGPCQfNYQAj6UVcvVC
DiAwsKMsnOg46JFxaYpMBHKcr6SX+NYYFZCL6oxELaQghyZbjZqi5iMv/B9I
9ZBqWC+9IFy8mDcvijufw1vEESzliqJ5AhaHExHFWrgoeu5c9ty53LnzQIKh
EBK8NI8/Zy4PbN580ZIlSFSUjM8jhAIpiyVcuAgEwswWJGNEi9PdajFvL8o+
UJZ9oqnodEfVvvqK3S11O1prdrZWHOisPDfWfrgqe1vQvTPVO2LVDrjMnQ5b
pUZXZ7CtSCs8Pb722/O3vr9x55dPvv/7nfv/unPvxr43cs3OBEITQ+gtSgcq
sRisoaSMHlegy+7ttsc1e7xldluynDAREg0ukqNcKcYVI1EsjMNB2WwwoBA2
HjP4AcHziQsw2XNFEIjo+6n/g0DIIAA5jsWWOiRLrKKlFkGkgRcNtaiWw9Hy
eVo+J/wepedG61mgyNF2Ht8nlWbL0SxMkI2KCim0Qk9WmvBiozTPgNg4c7CX
/m/hi//Ff+lP/LlzIOfwIe0vnR89bwkhoGzauFhzssOYHGdLd1vTzCo3b7Ew
8qUlvPlLgIJk4WIoULH5S6FTEyycx1swlzv/JcHShZLoaMGSJfwFS8WLopCF
kfjCSD+hLDRa1lWUvtzecKip8mBL1ba6igP9nYfHB16bHDw2PfraQMex7vb1
WZlT/sTpjIyJ/ILB/IJKX2KWOSbPFldo8cy2D51cvunOrjd+O3vzn5dvbq2u
D2n0iSq9nTIZAIFUL5JZk7KakvL6zb5eR8qwJb7C6SlUqT04atQQZoWEgqEO
IwTnc0WRi+Ep43HQ6Gh6BiOCRbH5dGqKZks5XJTLQzkClCeUhUHQxhcQfH6Y
ghCyEAiBRUbLcRy+1IktsSORZiHLyActhkDgaHjc8EuUjhcFXHQAghVtE4h8
GJqKCvLkYvrcifAqx3KbLt+iSNWhWs4CbMlc8cL5kMyj/jSHP38+pH1AwJq/
WIGqvTGpnpgsuyHTbStMcJXFmnJNqgRcqOUu5Ea/tJTzwnzhSwuRuYuFc+Zx
54FYvCRYBLGwWLh0KXfhYt6iCEkUH1nCEy9iSeZFuCT4RGn58empV/u61pUV
zDY37B/se3V6/NjaFafWrz61cub0+NSq3MLV+WW7Wnu29Q5Nt3cNN7f11Dat
GZrsKqhOp0zZmLZSbm0zuicCGZ3xCVVut5tSubROOuHI9BJUa3NlpBf2erOn
TP5+i6felVCu1vpx1KySGVUSRXgFtYQU8sXRkSgXooCFhhs0fCkLyiQGgYTN
AQoSDl/KpSmA4UKEFErkQrFcKAQEGkTIHMxlx2VxBMuFRYMiW0RsowCcDxJM
10JqXqSGH6GF0BBEablLdZxIi4jnwRE/Gp1B8UMaKqTRFujt+WZnusHiVagt
qEyyNEq4kC1cwuMtZPHmR0ACwTl0qAojWLiAMFCxdh2EQHF8THWMsSTWVmpS
p+Eis5SrjJ4TxZ23lJmmgEQkWLSIv3AhaAdv/iLaFkWII9niCG6izZ1kdkCw
mDm8Oq93c1PDtpamba2tO3q7D06Nn9i47q1NG4/NrDg6OrWmqGJnU88b46uP
rN785va9h7fuuXH6yrunrx7ZuDfb5EzG1V6OLChWtiWkVrm9WTZHrFJroYxx
prh4s9uisVOkOZjRkle2wZs+6U5qS0ipN1nSSZkVdFkhlqslpFqKg0sRNk/M
FUJ2FUXypdEC6VIuVEqgy0hYGqA7AINAwLh0IIT9L6FECCBQCIWQi/ThyVIH
Sbhxuii1iKNNIlp8mY5AwYlQCyJU/MVqwRKtYKmGv0THizCLuS6U55PzfaQw
QCkydI5MvT+g9sdT8U7KBVomjJByF4kFSyWCJSLuAqCwBCIUY0VzQJQXcymx
Vi/3WvXZDkuZ1VRhM1c6YyrjYqs8riItGUsIlEiUCP6PgKtFSzns+YujXwQE
S4SLlvIWLQEKUS8tMFPq4pRMGyanrwOOiOrKzjk0MblnYGh3/+CuoeGj69df
2LH75NqNr43NzLb0bmvuP7tp95UDRz++cP3CkbfeOXHp40vv3333s96SKocY
S0B1zcn53TkVGebY9Jj4lBiPTW5MMLnTXD63wSHlyWOsWQUla3JLNiam9yan
t9nt2QoyhhBThABTIDgYJpQREgUmUYp4pIiFIlEIEimURoskLAHjfzoL/e5/
nC9mOmVQBAgEBR0I9L0e1vAVEk4pG5oyIz8KaiEoR0GLKfZSkr1YwVtC8RZS
vPkq/kK1YBGA0IuizWK2ixTGyWVJGkfQlJakzXORIRuZbVdna8gkucwNuY0T
SUQs4PGX8oRLo8NyvFCyhCWNEIgiEFyoN+uDVku+WptrsdfqTBVme63JVqrT
ZRFYHInaSLEe2lJJtISzgBX54mL2PNr/kIvAEBZbsCTKqTPRK/ZFqIYj6iku
P71t15HpNa/PrN4xOLZvYvrs9j3ntu15c3rjkcl1B0ZWv733jdsn3r5z+fbH
lz/at27vpdcu/eXqp2P1rRYR5pGbO3LrOgobAyZvckxialxyvN7pVJpjlf9f
S+f93dZ55vl/YSexrcaO3jsucHFx0XHRe+8gAKKQAAgSIEACYO+SWESRIilK
rCpUt2xZimU7jmtsx07iuGQcJ5mJZyaTKdnZ2bOzZ8/+si/tPec5PNI5KsD7
fZ/v8/0A974XkbMgLpEvZBsC4fl0/lowsegJ1pXKkICj5JI5HCIdonP5DD6T
KkLEJgS28TgYjYgQ2znkVhq9g0rtIFM7ifRO0g/F6CL/f1IGBAdiHkADwkk6
EpKoCIOt4vGBBIDIwCCWdJ2Dca3AfARd53gdZ7idp06q60Ue7gWggpB4BnQE
hG8FJcS1arhCh8xpl3brhBkFNysX9srFfYgkBSPdCBKh0XWtZ1ktZ/BdpzvA
ohF+dJoGfOnHre0/aiG1M0E7o7KgxVXTWIb58n6RegjVDZtd4yosLxYHKUQF
BQ/TugQEkIleaG/90enWv3mx7Uc/wp8+3XX6FP7sOZQrhGls+rlOlMprpPsP
5ldfXdv++Nb9N64dPljZBLbz5u7x86s337/x+I1r99699dqfPvndd5/98a+/
++vnP/382cHTz55+OJLodUgULsTQbQwXQ0Wv1oeJQQvLMEgtY4pOrnBgCWV8
JZ+rc3ibyfxmX2nLHxqTSd1cppRLZgM/gZg8PlPEZMhUmoga64GlES7XQsLB
hDY2sY1GaSdT2knUdgKoHzri+3R6sv4/hG2w/gIiBRRMY8q5XI2Qp6WcSIB0
noU7z4q7zgpwZ3jfrz+z40UO7jSPcBYUu+sMu/0Us+U0vfUss61NTOGp+Eat
MKgSZBTCAiouIUg/jBZ4cA+i6BWh3VSa/uw51qkX2oEKhBfa6Kc7yadagcOQ
OkgtZ0li1FGfPowVN1XuGZaqxpIPQdgIoh9CsX6JrJvNNjGpCmIXr+ssqeOl
tpa/ebHlv/033OmXCGdPd730EqW1HWZyqee6EJpgbnB0a2zx8er2Z3cff/nq
mx/fe/X1nZtv7N372Y2Xf/3k3Sfbxz87/sm/fvEP//X3//kfv/vr//jmrz+7
89anT96vBBIWHuyXmVyIySYxedXeHl/Wo/NiYi0Gq+V8VI1gMtQESZ2WYD2U
WSoP7/t8DUhg5tJhPpXLozKELCGXibA4Br253+AYVhnKqDLN4dqoJITYwSS2
k8DbpHQQQP0wFEBG/WH/s7u6ODgccCEwEUCJ6EzZ93d56GmdSuI5tPMM0nka
SCDsOsPvPAuMiNVxhkfsEFJwPEIXve0cEWzCl14CUxKIyOigcPAilGPVShIq
SU4m7UOVJUiaF8lLStOYyjgCy9IMrqOtQ3D2JQLhdBcwIsKLp0GW5pBpba04
gcQ4PL3XXd5xZLax8IYxflXpXVK6ZlFzTWYsIYo4X2CnkKQEHIfURek609L2
wo+7Tr0ICmRUcksbIFN6K94gVt29crg1duF4fvXp5au/uPvqN8/f/eD2q+/c
fPzu8WufvPL2k2t3P37l3V+//vFfv/7Lf//qL79/7+s/vPvV872X846gSyz3
wFodA9Gx5Rq2ImoOj/TVw/ZowBFVyy0qpYMrNsHaiC3asEVBktqx2wY4DDWH
BonZAhGLK+ZLOGw5F3Kb3A2Lf87onjU6GjJlgi8wUIkCYieZ1En4XgLcDxIA
iANdAEgTSADqZBBQ6aDEDBaQQCsUGmkdGKlFgTsjx5+REs4BFbjtZ1itZyAS
SUSlgiEChiP+VFvXi224l9rBTv6BR6jtwOW4Ipaay8QoVB2MxlFsQKwaUprm
UN0Mio3LsBqV6+8EbNdOBdmS2t5KaWuhdeFaznSAFswOrOZH70TLd5ONZ5nJ
Ny3pXWNiTRuakdkrMlNBpk0IYSedISMR2IQOPP5cS8dLINz+GHfqFK2lHUhA
O9sFSOrzNz56vv9gvdx8srL506s3/vbZz758+u5r2zc/ePD89aNHPz1+7R8+
+93v3//N373/1Xcf/Pbr13/x+ZMPX7lyM6a22YUyN6wysEQ6ukhDExn4Co/W
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
wb7NZH7T6W18L4HDasj4fANAgv8HiKmVjQ==
                "], {{0, 150}, {129, 
                0}}, {0, 255}, ColorFunction -> RGBColor], 
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
                Interleaving -> True], Selectable -> False], DefaultBaseStyle -> 
              "ImageGraphics", ImageSizeRaw -> {129, 150}, 
              PlotRange -> {{0, 129}, {0, 150}}], Annotation[#, 
              Association[
              "URL" -> 
               "http://www.wolframcdn.com/waimage/hset028/484/\
484058ab6fd9536566119961305e3348_v002s.jpeg", "Dimensions" -> {129, 150}, 
               "Source" -> 
               "http://www-groups.dcs.st-and.ac.uk/~history/PictDisplay/Euler.\
html", "Popup" -> "hset028/484/484058ab6fd9536566119961305e3348_v002ms.jpeg"],
               "Image"]& ], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Timeline", "scanner" -> "Data", "id" -> 
     "Timeline:PeopleData", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n   ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n  "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  AbsoluteThickness[2], 
                  Hue[0.67, 0.6, 0.6]], 
                 
                 LineBox[{{1707.2848258602414`, 1.}, {1783.7134999603256`, 
                  1.}, {1783.7134999603256`, 1.}}]}}, {{
                 Directive[
                  AbsoluteThickness[2], 
                  Hue[0.67, 0.6, 0.6], 
                  PointSize[Medium]], 
                 GeometricTransformationBox[
                  TagBox[
                   InsetBox["\[FilledSmallSquare]", {0., 0.}], 
                   "InsetString"], {{{1707.2848258602414`, 1.}}, {{
                  1783.7134999603256`, 1.}}, {{1783.7134999603256`, 
                  1.}}}]}, {}}}, {}, {}, {{}, {}}, {{}, {}}}, {
             GridLines -> Dynamic[
                Join[{{1700, 1720, 1740, 1760, 1780, 1800}, {1.}}, 
                 Replace[
                  MousePosition[{"Graphics", Graphics}, None], {
                  None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], DisplayFunction -> Identity, 
              PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {0, 0}}, 
              AxesOrigin -> {1703.3194671149365`, 0}, PlotRange -> NCache[{{
                  Rational[2506421615081819, 1468187191800], 
                  Rational[2619017413483181, 1468187191800]}, {0, 1.5}}, {{
                 1707.1539849145133`, 1783.8443409060537`}, {0, 1.5}}], 
              PlotRangeClipping -> True, ImagePadding -> All, DisplayFunction -> 
              Identity, AspectRatio -> Full, Axes -> {False, False}, 
              AxesLabel -> {None, None}, 
              AxesOrigin -> {1703.3194671149365`, 0}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{True, False}, {True, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> {{
                 Opacity[0], None}, {None, None}}, FrameTicks -> {{{{1., 
                   FormBox[
                    StyleBox[
                    "\"Leonhard Euler\"", {
                    FontSize -> 9, FontFamily -> "Verdana"}, StripOnInput -> 
                    False], TraditionalForm], 0}}, None}, {{{1700, 
                   FormBox["\"1700\"", TraditionalForm]}, {1720, 
                   FormBox["\"1720\"", TraditionalForm]}, {1740, 
                   FormBox["\"1740\"", TraditionalForm]}, {1760, 
                   FormBox["\"1760\"", TraditionalForm]}, {1780, 
                   FormBox["\"1780\"", TraditionalForm]}, {1800, 
                   FormBox["\"1800\"", TraditionalForm]}}, None}}, 
              FrameTicksStyle -> {{
                 Opacity[1], None}, {None, None}}, 
              GridLines -> {{1700, 1720, 1740, 1760, 1780, 1800}, {1.}}, 
              GridLinesStyle -> GrayLevel[0.9], ImageSize -> {550, 38.}, 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Verdana"}, 
              Method -> {"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> NCache[{{
                  Rational[2506421615081819, 1468187191800], 
                  Rational[2619017413483181, 1468187191800]}, {0, 1.5}}, {{
                 1707.1539849145133`, 1783.8443409060537`}, {0, 1.5}}], 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {0, 0}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "TimelinePlot"}, {}], "\n "}], 
     
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Include today", "input" -> 
         "Timeline:PeopleData__Include today"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Notable facts", "scanner" -> "Data", "id" -> 
     "NotableFacts:PeopleData", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"TheWikimediaFoundationIncWikipedia"}],
          "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"NotableFacts\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             GridBox[{{
                TemplateBox[{
                  
                  TemplateBox[{
                   "\"Swiss mathematician and physicist\"", 
                    ",\[DiscretionaryLineSeparator]", 
                    "\"considered one of the greatest mathematicians of all \
time\""}, "RowDefault"]}, "RowDefault"]}, {
                TemplateBox[{
                  
                  TemplateBox[{
                   "\"Known for his totient theorem\"", 
                    ",\[DiscretionaryLineSeparator]", 
                    "\"helping to prove Fermat's little theorem in 1736\"", 
                    ",\[DiscretionaryLineSeparator]", 
                    "\"and proving the irrationality of \""}, "RowDefault"], 
                  StyleBox["\"e\"", Italic, StripOnInput -> False], 
                  "\" in 1737\""}, "RowDefault"]}, {
                
                TemplateBox[{
                 "\"Made discoveries in calculus and pioneered terminology \
and notation now used in mathematical analysis\""}, "RowDefault"]}, {
                TemplateBox[{
                  
                  TemplateBox[{
                   "\"Influenced the fields of astronomy\"", 
                    ",\[DiscretionaryLineSeparator]", "\"optics\"", 
                    ",\[DiscretionaryLineSeparator]", 
                    "\"and fluid dynamics\""}, "RowDefault"]}, 
                 "RowDefault"]}, {
                
                TemplateBox[{
                 "\"Listed on the Lutheran Church Calendar of Saints\""}, 
                 "RowDefault"]}}, RowLines -> True, FrameStyle -> 
              GrayLevel[0.84], RowSpacings -> 2, ColumnAlignments -> Left, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Familial relationships", "scanner" -> "Data", "id" -> 
     "FamilialRelationships:PeopleData", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> "Parents"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"Parents\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"\"Marguerite Brucker\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"Paul Euler\""}], LinebreakAdjustments -> {1, 10, 0, 0, 100},
              LineIndent -> 0], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Siblings"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"Siblings\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"\"Maria Magdalena Euler\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"Anna Maria Euler\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Spouses"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"Spouses\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                TemplateBox[{"\"Katharina Gsell\"", "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    FormBox[
                    TagBox["\"1734\"", Identity], TraditionalForm], 
                    "\"\[Dash]\"", 
                    FormBox[
                    TagBox["\"1773\"", Identity], TraditionalForm]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               StyleBox[
                TemplateBox[{"\"Salome Abigail Gsell\"", "\"  \"", 
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    FormBox[
                    TagBox["\"1776\"", Identity], TraditionalForm], 
                    "\"\[Dash]\"", 
                    FormBox[
                    TagBox["\"1783\"", Identity], TraditionalForm]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Children"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"Children\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{"\"Johann Euler\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"Christof Euler\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], "\"Karl Euler\"", 
               
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"Helene Euler\"", 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"Charlotte Euler\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show full dates", "input" -> 
         "FamilialRelationships:PeopleData__Show full dates"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Scientific contributions", "scanner" -> "Data", "id" -> 
     "ScientificContributions:PeopleData", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Mathematics"}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"PeopleData"}], "\n   "}], 
       XMLElement[
       "minput", {}, {
        "Entity[\"Person\", \"LeonhardEuler::39r8r\"][EntityProperty[\"Person\
\", \"MathematicalAchievements\"]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"Euler formula\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {"FamousMathProblem", "EulerFormula"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Euler's totient theorem\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {"FamousMathProblem", "EulersTotientTheorem"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Fermat's little theorem\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {"FamousMathProblem", "FermatsLittleTheorem"}]],
                  Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"irrationality of e\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {"FamousMathProblem", "EIrrationality"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"K\[ODoubleDot]nigsberg bridge problem\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {
                    "FamousMathProblem", "KoenigsbergBridgeProblem"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ScientificContributions:PeopleData__More"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Wikipedia summary", "scanner" -> "Recognize", "id" -> 
     "WikipediaSummary:PeopleData", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            InterpretationBox[
             Cell[
             "Leonhard Euler (15 April 1707 \[Dash] 18 September 1783) was a \
Swiss mathematician, physicist, astronomer, geographer, logician and engineer \
who made important and influential discoveries in many branches of \
mathematics, such as infinitesimal calculus and graph theory, while also \
making pioneering contributions to several branches such as topology and \
analytic number theory. He also introduced much of the modern mathematical \
\[Ellipsis]", FontFamily -> "Helvetica", FontSize -> 12, 
              LineSpacing -> {1, 3}], 
             TextCell[
             "Leonhard Euler (15 April 1707 \[Dash] 18 September 1783) was a \
Swiss mathematician, physicist, astronomer, geographer, logician and engineer \
who made important and influential discoveries in many branches of \
mathematics, such as infinitesimal calculus and graph theory, while also \
making pioneering contributions to several branches such as topology and \
analytic number theory. He also introduced much of the modern mathematical \
\[Ellipsis]", FontFamily -> "Helvetica", FontSize -> 12, 
              LineSpacing -> {1, 3}]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {}, {
           XMLElement[
           "link", {
            "url" -> "http://en.wikipedia.org/wiki?curid=17902", "text" -> 
             "Full entry"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "WikipediaSummary:PeopleData__More"}, {}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "Wikipedia page hits history", "scanner" -> "Data", 
     "id" -> "PopularityPod:WikipediaStatsData", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{
                    GraphicsComplexBox[CompressedData["
1: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
m2t+0jxVX5BqGTcJM6euZt7uo/dlZa/vkA6DSepzH5mOE/jRdzLSizsMkQv7
M7fPofmgiX/aS2IaHhzYefvHYhJXnu6til4vwIzt2sLwX0N/PjRFy37dNKBP
7uV9WiQWmhj8zDvHB3u/6GWrttP3uGtvRqzrKGgF+vZ82U+i+NTuumt+A9DX
4NV+24nEHdaE5Zq7EzAv8suAwVnaHy6E3gnKpJ/HonCh+hUS4+NrN8zMnYbN
IUJmC26T+HFIVjfedQIMive/+3KP9unmwr8ifydBhVl88OFLEv3v6x4JMp6C
ixvDRF3ek6j5FF8d1Z+CSNVfTUebSPQbWmZ6IIADC27dPjX9i8TiJFcx/w0T
cNLgb+IjFok9WWab5qUNw7Wx3G/XeCQKjh/bfYf++S1YMaBmM5fOf8e3867G
o2C+Y12O1HKaJ+xvJ29tGgfPt9dcf6pS2HTpkFrBs34QSGPq3N5M4dsFc+fV
jHDB+FrQ4qu76DxxcwrfCI/C7Hal5kVWFCbPEdlXtGAU7l52lnrpQuE592ij
j+oUDCmpul/zodBi9/rJ2OsjkLPNvM3sGoVBg5m5Iz4c2GA1bbs/hsI1zlJP
blrOYq7oWPB25AGFy0fVtl3LpKAvr+De/dcU+gVfvzsrnQMeUURi2AcKP4hP
No0uGAKHH4EZzp9ov4hrXZD0j/YpxSXsNR0UHuW8in5cRUDKuzqHoUF6/9x1
p1zL2ZBQ/pd8OUPhtdC6sp2mQ2DWdCHk2QIW6pvOkYdfg+C7+wIfVrAw8Yg+
FrQMQICE9HSHGgu3Kr+Wnb2dDVtatRe+38rCRbIrrNxpf9rl4KkwacxC73Dy
7FjMEPQuLMje7UTgDaFO7luaPx30tbzEzxAYrdhqev4GHzwVj02yLhP4ulMs
404yza99d3xqomi+mrhuqi08Ccpfo1+eSSNwV/f2/2Y2jYP+OaMszSya9zXe
BiremgLy+/pFYsU0D6ltBbXscei06/URbiQwVaWpj0n7IaNsBevZLwLnebla
dx4ehpw/oTXOFIF3dzCnK3snYSov3W0Tj0A/99tQ920ATnpUTc+h/UF/en+K
vr0AU2V3zr4nS+k8LQ7fuMuYCwF/LN1tVUgcWbs3K9OOB0fU15Mqm0h8eqzO
caZgFG4/aXGR2Unzv4f9389lPCB5k6OvLUncm1taHbxkCn6IHex3OkbixVNt
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
N1z9uLGnD6JP36zaMUzzXJXJXt77ITjhft5jtSDdh5DEpYD0/kT+JMYlWLhl
k+z994ls2OHOYkWtZOH7np7Dp+/0gqKSnZiFOu3fHy48l7MeggT1Z6LL9Fm4
qkdLRX/HIKhJJsmtcyPQ3MBc3LNrHFjXE7Wv+xN4o//pnYTEKciOdp737zqB
4g62le232eCreT44LY7A9W7c3wMx06B/fGrhr8cEXg54qXddlQdiGsYOcrkE
msjmu6YETwH/R55MeAWBqt2PvTJofr22xcrf6SuBvhvlp17EMZjW5cr6oV00
X20YjLiSPAkH/pM+/X2Yzn/ghp3m13lgrvTxyFpBEtvzteqeio2BeX4L+4cE
na/lev8V6gswD7QbJc5dRaLp4IOSTa5TYJ0QLGCoTvP7u3VR6vUzEKLx++tD
fdp//ZavkzcYg11XT5qeMSPxzzz9M75vGUzLabV1N+xI9NzQcHgqj94bSzH/
jx4k5s37+5ZvLMAsM3wTJBNI4sf99/Qk503CKvGA8YgIElf+WKSbXCnAlIrx
WeSeTOIHwy4xJ5qfDjDvx8Y/J9HyvO+D7TFCzMI6Mqj/LYnaNwaPDriNgSI5
o76rlsTbzLCMjR9n4FaawwX+dxKTVGPyQIYH071qndq9JO4PcSpsiJ4Az6qK
2d6jJD7REjl0g86baHBAXJswhesJt7mP/9D3aMK5/uViCuMehDJ2PRqH7LhL
xz8p0nmSlGz5tHIILCQLTslqUThWLsVcLzECXIUibQ9DCktUt7otcxuFlJq5
qYv3Ufj3xTJWDX3/twtVL9/uSOFrwTTvIkk2sD+b2vh5UuhwggqoaR+G8svD
Ql8v0f2RX8jYeo8DCeVOJ7WjKBRoOduhv2cUziTL+bFTKTzWWtDRv6YfTESM
EjZkUuiR13dPbvYw/Ce2+ZxPEYVtO6pf59sMwnpyd2VXPYUrBvtfvYziQE1w
VF5JG4W/pZ93Dp0j4eV2YfFeksLlb1SKN/YPQVFXwmfdSQqFHqdmt6b2QsOS
8YNRoixM6TzGjTEegva/D87BUhbul68eEr/5Dzj6b3O8lVl4aW359JG5bBDT
TH6ZpcPCMOq/BcpJ3TBw8B9vnxHdp6i3a45VsWHp6nd3Lx8jUFPFr7bfigv/
/ShIivAm8IPcf6tMwifhs1G94PqrBOb33v1O9LPh3p13ShPRtG/bZRdkdU9B
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
c8bg+swc+FdD4ya7/n0eAgE4xXm6JzaTPGXMihfFMZhy45gH5x+NAUuX/Y29
OATV5kFDcsM0OtK7c6x7+FD44qh2mhTh/bk+X/6F8mHBSIXePmXim3kPTi6R
50PPLutVB+Yz+OHLGWOV0G5oSXvZ2rSC+EPBnctyhPdrjq5QnGLFoIxe6p9L
vWyobPnreG8z8Y/Uam7EOg4UN//xHfMgvtAQ9/hHUQ/cPdSsOuM4gxsfPZ6x
3JMc/6vSNSHs/79PNTI6fWgE2F0Zq77FM5jzLVNW/NUAyIU/U76YQeZbff8a
hWwGTEp1vjKFDNb1hQeGefDBIyhq/oxKBj9Bi9FTMwpKNFum59Yx2GnG8y26
RPZ9cGjjqZ8M6nxXS5pwpKFWdN/NMDaDrDDHZxHcPpjntWZscJTBZ3rS2opp
XAjbM6V/yRQ2RkbP+1XX0gNttBL1TZWNlgq3gz5s7QaLaYdfLlnIxp9v68u3
O3Ph1puXi+1M2Li9R07LqZYNTo87js5ez8atUis6ytg8KCowVVbfR2HezSyj
WnWy/+adLrQ5ReG69WO77T+Ogtj28cj68xRqPpD7LaVM/Gq/Y8iVRAoTbNcn
aJePQ0SWXFx2DoXOJs0BCkIBhF5VapMpoTDOO/Dik4hRkIdXyrZVZN5/9hiP
LuFCr/yNIb0GCo8+1H32beEEcKt0XgT8IZdfofNDyBqFi/qbjqZxKKy265Xu
6BqFso1vPGaKkPlwmDV5zmE+TN0i4Vc3ncanhtPTHyiLsO6fKb35nwaNty31
3Ke1j0OH2x2pZfo0pgjS5oyvFkLhmMUuL1PCUwEfDobq8+HNq6lbzeyJb686
5sfVEGOJekYYn91F8vJweI5UuBAaX2SKXvel0S7i3c0uFRGW6VfR6ZOCSD+8
sc671z8MJrlSEnYXyf6+ZF6wd6oo61yqWaZRCo2f1/h/iAwTYXEPz9G5kE9j
yHoT5fMVUiy+8M6Vh2U0PtDWCb72kw/xlv6sZe9p5HE6bmvsGgMnXwVZzlfS
N6JXuocCR2BPmcaAsJPk+VRbVfatcRh/fkjNfYDGmR6LDkfWEt4+67HohjjZ
l1mcr3I/huCp14XfQTPIvNUtPZDjPAwei3eerZrLoKt7ylQ9dz5k3v0y6c8y
4t9/a+enkf17siO23hkZfJ053eu2tgCOjiiXyTgx+HaJS0jwCR48NlF4PNWV
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
W9aUMwCuYtqsPctp3h+epKS4mAeVqUp+D80p/Dktx637/BCkP7iZv3U7heEK
/U5BB4bAYUxe+9JBCr/kv7vA6BuA0p1hei9PUZjn/s7dTZwHd9WpL/JBFHpv
ye4VOfHApM9KcCqWQkW59KcLHgyBme6KJt3bFMpt3mLZuKcPFuWqkiefUXhH
t/hz4QZ6f5mNXH9RRPtKb5ht8IE+qDetrltQTSHjOrfCayoPbq22SBz7RfvH
L5PNT0NIsArNfKVBUTipOSTz2FEO7APhMV8RzUM9YzuLjvbC0jHzV5XSNK8I
VebJZHPg1BKN7PMqLNzoyAoq7+qBa5nDLbnaLFx8LqN1fDIbjmnStGLCQtaX
uyHhmn9BHXzL4q1YOMeKEx7/ig1TZz0+UniYQH/f17OOJvFBq8vNoeoMgcVR
Jpdk2CK49sv10tFQAlM+FC3WK2VDTHT4BeMbBD67tNmQs5DeB/PK27XuEdjv
D35OF4SwsGFj+KMcAjdPvnUlbsYIeDd7KVWW0PMR2Ca55icHltvOH879SiDX
P0nSatYEZJVqKs5uJ1Db0chBwm0cJl2um6s2QPOV8t8/P/pF8OBEkWvOOIEL
7R5GrFw4BG0za31OTSfxw/oZyRsmaP+8MTa0S5XEvN9XnxH5DCax5nh+3RIS
j2YqlTnwheBlGLa/x5TE/vyp5onUMHgmaOz+ZEP37e1KpiVzHOaPycfN301i
/MJPYT5+o/DixfOXs4+SeF2+My784BjEREUp3vMlccORdbutaB63eSl3sDKc
RGZ9v6Z8yQScs1YZf5tEooXY7yB5LdoXus41az0kcVFK9eOTKZOZahUBqcvy
SSzWPXa5zEsABo2f71Z/InFh6RunoeP0PKQZn4qrp/fXg4glb5kjkIbFT4K7
6PnYc9DtMu3XedOvaE9wSazf2PirpGYQHi0au6oqTucz2ok9yWsMZLN55uKz
KDwdarFP8Qi9j1fjqkMaFOrOvJAz7cYw6MqtUnQ1pPCMy/HpZSpsODPj5HIe
UOi/zvZ9Dr0v7T9XzsveQvfv8ed1Ej95sGuvhVfcPgovGTadCZWheXD2uJTk
cQrPv4hJLMjiQIvmwQjlC/T8lNldvVTGBQd7CZuCKAqjpNM/FUQOgeu66obQ
FLqvlZeYWb7lQJrky2q/xxSWn1JpmqZIgdpQk+REAYUvM4fTnhsNQrDhQ+0F
5RR+zkj+ZEH//rbI9E0+/yjsfu56+JFsP2y8zOsO4FNo0tPpd1hmEMYeXC5R
mMzCoBs/xffZD8LGkLVujQosvGZ0Qr0mmYI3a2b6fFjAQtNbSRbPV7LAR1Wr
0tSYhcFBdUu96zjAf+pk47uehRfO2uuEBfWDIdvtsMJxAnvn9dazmoRg652U
+DOKwLH3C89Z0Hy3qmqySUAKgdLPYXtNA4M5c9uxeZXlBJIDYV+D1/Oh5Nih
jJhmOq8XOTqt+0fh1OzmO57/CGR7djnsTxiDRfsi2mSHCQySS71vojEEjMAe
CdXJdP9OLBn+tmAEtMotil8p0P74dXuyVL04s6vS58zahf+9v9qzPzeSwfzy
dNcsPWMS62raRphjY5ClcZbXvp7mifkSr09RQ5Coty8+ZTuJESv9X3nmjENw
dcnj4wdJnLmBFXbmA72vxA6ITz5NH7+p9YG26QSkFa34XBNLYuLZ7IbF/yag
QHhFOvkOiYWaqwqW7ByB+iqnDxezSczaLHk3eBuDObjscJF2MYnGi50cX9wf
gbW+andMa0hMTnlvo/eLDbXdTQq/fpHo7vyNc8VJCFay9zqcRSR2no3AanUh
3Hw0O3DOVJoXVP4G/NrFhb7Gva0tsyk88G6pdNSZIbBImZudp0PnbTBkut2C
XrjNVSyzX0Xzu/lijaW36f5fXPx+zwYKK4+0HlhI+29/mNtWzg4KR7e1emx4
JAS7212/vA9TKP24eIp6DAktN2bY7T9D4XrxlXV9NTxwUzs7RS6Uwms/S2zW
/uWCSviVB4tvUNhj/yck+58IVJRvN39Np3/emcO3+WMkZB8In3I4h0JWUnHC
jL08cI9QU3MpodBwaeHfgykc0Lbk+Cz8Suf/l1uP5Rcu9CbGXqf+UDiwIGxa
7WoCsi4+nl/dT/O+wnz9mo9s8BKOs0+P0/2/JHCdDf38/fbiT4Kms3DmyyU2
rf19kFwvyVdVZeEm9SjPpJBBOCLbZvZgCQtTwmZMeezChk3fE9fm2LDw58jU
H6GTuBCUslrn7yECbZLHKXIbC6yi+GE1XnR/fltWntQlgLsrbgZEhxBY6NkS
w+/iwIJi7doD1wkUU/cqahsWAfv4kQy9uzR/iMe9i5/PBoemKPmvzwm8HUQ0
7v4hhE2iPIXKYgL19Ay4J6R4cM2idtO7WgJ/zbMoLReOwajn2WUWbXTeI8p3
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
WP//+H+CFQJP
                    "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl2mW4EOXCheFNt12UiJSUSCuhhIJ0d3d3d3cISEiD0t0p0i3S3dLdLXju
1/PjO2fWPOtZ++NSZ78zx6S1W5RuHjkiIiKS/4sV9///HTPu/68zuY7hv5NE
j4hIHysi4t0oERHTYkdEjI8aETE7RkTEIOWycSIiqkaLiGgcMyKimKFrekf1
LnG28xfif+B/4ovx7/nZ+T/wU/HfyK/kWPgteSi/Db8Xvw7/NP8e/zV+gd9a
v6F+e35F/dR4OjwHngj/nT+Dv4w/mt8bH4ZPxLvjH/Gj8z/gP8UPyHvkE/I6
e9X4+fgl+Rnx6P78n7pO5/477k/V/0V/lv5A/TL2q9hvZL+o/SM6f+tv4y7A
NmB7sUVYfm427vfclNzX8ks5Jn5THuJntOb35Nfmn+Lf5f+Dn+e30m+g345f
Qf8LPC3+DZ4QX8//jb+U/zO/Fz4Un4B3wz/kR+O/z3+C75d3y8fltfaq8vPy
S/C/wqP5syd2ndb9t92foj9Of6b+AP3S9ivbb2i/iP2reof1LnK28n/H9mAL
sXzcrNz83BTcf+QXcgz8hjyY24rbg1uLe9L2Hf4r/By/pX59/bb88vppsK+x
BNg67q/cJdxR3J7cIfh4vCv+ATcq9z3uY/wveZd8TF5jqwo/D784PwMe1Z87
kes07r/l/mT9sfoz9Pvrl7JfyX4D+4XtX9E7pHeBs4U/H1+P78YX4Hn5Wfj5
+Mn5r+TncnT8ujyI35LfnV+Tf4J/m/8SP8tvoV9Pvw2/nH4qPDWeHY+Pr+VP
5y/mj+T3wAfjv+Bd8Pf5Ufjv8h/h++Sd8lF5tb3K/O/4xfhf4lH8+RO6Tu1+
PPcn6Y/R/02/n35J+xXt17dfyP5lvYN65zmb+fPwdfgufD6eh5+Zn5efjP9S
fiZHw6/JA/kt+N34NfjH+bf4L/Az/Ob6dfVb88uGv++xbNgn2BruNO4i7ghu
d+4gfBzeGX+PG5n7Dvch/qe8Qz4ir7JVif8tv2h4xuGR/dkTuP7C/bjuT9Qf
rf+rfl/9EvYr2K9n/0f7l/QO6J3jbOLPxdfiO/F5+Hf8TPw8/M/5L+SnclT8
qjyA35zflV+df4x/k/8cP82vo9uKW0Y3JZYKy4p9jK3mTuUu5P7E7YYPxMfi
nfB3/axI/Lf5D/C98nb5sLzSXkV+bn6R8HwLvwP82eO7TuV+HPcn6P+sP12/
j35x++Xt17Vf0P7fevv1znI28ufga/Ad+Fz8W35G/nf8pPzn8hM5Cn5F7s9v
xu/Cr8Y/yr/Bf4af4jfTr63fkl9aPwWeEs+Cf4Sv4k/hL+AP53fFB+Bj8I74
O7HDP8z+Gebfd7lH3iYfklfYq8DPxS8cnnF4hD//J65Tuh/b/fH6o/Sn6ffW
L2a/nP069gvYv6j3l94Zzh/02fhqfDs+B8/N/4r/Lf8z/jP5sRwZvyz34zfl
d+ZX5R/hX+c/xU/ym+rX0m/BL6WfHE+BZ8Y/xCdz53OHcbtg/bHRWAfsXywe
7x62285WOwfl5XbK+7k58ULhGYf/y/3YdQr3Y7n/i/5I/an6vfSL4mVt17b9
g+0Levv0TnM28Gfhq/Bt+Gw8Fz8DPzc/Cf+p/EiOhF+S+/Kb8Dvxq/AP86/x
n+An+E30a+o355fUT4YnxzPhH+Ar+ZP48/hD+f2wn7H22NvcN1hc7l1sl7zF
1gF5ma1y3Bz4j+H5hr+x/ZHr5O7HdH+c/gj9Kfo99YvgZezXsv+9/fN6f+qd
4vzOn4mvxLfis/Cc/C/5ufif8p/ID6OGQ5V/XuQ+/Mb8jvzKbh/iX+U/xo/z
G+vX0G/GL6H/OZ4Mz4i/j6/gT+TP5Q/hd8b74qPwdvhb/Nd4HP4dfKe82d5+
eWk4r/G/wQuGZxz+mv+h62Tux3B/rP5P+pP1e+gXxkvbr2k/v/1zenv1TnLW
82fgK/At+Ew8Bz89Pyc/Mf+x/ED+V74o9+Y34nfgV+If5F/hP+If41fXbapb
PPzZ3f/K/ffcX86bwJvDG8zrxOuDj8Tb4v9gsXm3sR1+5iY7f8lLwhmN+zVe
IDzb8H+4H7j+3P3o7o/RH64/Sb+7fiG8lO0atvPZPqu3R+8EZx3/N3w5vhmf
gX/DT8fPwU/EfyTfl9/IF+Re/Ib89vyK4czJv8x/yD/Kb6RfTb+JfjH9pHhS
PAP+Lr6MP54/mz+I3xHvjY/A2+Dxwhkaj8W/hW+XN9rbJy8O5zR+dvyH8GzD
X/Hfd53U/Wjuj9Yfpj9Rv5v+j3hJ+9Xt57V/Rm+33nHOWv6v+DJ8E/4b/jU/
Lf8bfkL+Q/me/Fo+L/fkN+C341cI507+Jf4D/hF+Q/2q+o31i+p/hn+Gf4m/
gy/l/8KfxR/I74D3wn/CW+Nxwzkaj8m/iW+T/7D3p7wonNf42fDvwzMOf8l/
z/Vn7kd1/2f9ofoT9LvqF8RL2K9mP4/903q79I5x1vCn40vxjfiveHZ+Gv7X
/AT8B/Jd+R/5nNyDX5/fll8+nD/5f/Pv8w/zG+hX0W+kX0Q/CZ4ET4+/jS/h
j+PP5A/gt8d74sPxVniccJbGY/Bv4FvlDfb2ygvDeY2fFc8fnnP4C/67rpO4
H8X9UfpD9Mfrd9EvgBe3X9X+d/ZP6e3UO8pZzZ+GL8H/wKfj2fip+dn58fn3
5TvyK/ms3J1fj9+GX45/kXuPe4hbWa+hXmG9T91P5/5b7i/mjOXM4PTntPMz
e+DD8JZ47HCGxqNzr+Nb5N9t7ZEXhHMaPwueLzzb8Of8d1x/6n5k90fqD9b/
Rb+z/g94MftV7H9r/6TeDr0jnFX8qfhifAM+Dc/K/4Kfjf8J/558W34pn5G7
8evyW/PLhjM3/wL/Lv8gv75+Jf0G+oXCnx1PjKfF4+GL+GP4v/H78dvi3fGh
eAs8VjhD49H41/DN8np7u+X54azGz4znDc85/G3/ndi9SO6N0B2kO063k+73
tovarmw7t+0Tetv1DnNWcqfgi/Df8al4Fn4qflb+x/y78i35hXxa7sqvw2/F
LxPO3Pzz/Dv8A/x6+hX16+v/qJ8YT4SnwePiC/mj+b/y+/Lb4N3wIXj4WBEz
nKHxqPyr+CZ5nb1d8rxwTuNnwvOEZxz+jP+W60SxwsuN54b+QP2x+h318+NF
7Feyn8v+cb1teoc4KyiT8YX4enwKnpmfkp+F/xH/jnxTfi6fkrvwa/Nb8kuH
czf/HP82fz+/rn4F/Xr6BfUT4Qnx1HgcfAH/Z/50fh9+a7wrPhhvhscI52g8
Cv8KvlFea2+nPDec1/gZ8e/CMw5/yo/nOqH7//KH6w/QH6PfQT8fXth+Rfs5
8WN6W/kHOcv5k/AF+Dp8Mp6Jn4Kfmf8h/7Z8Q34mn5Q782vxW/BLhXM3/yz/
Fv+v8E6jX16/rn4B/YR4AvwLPDY+nz8qfGvi9+a3wrvgg/CmePRwjsYj8y/j
f8hr7O2Q54QzG/8r/NvwjMOf8OO6TuD+G/4w/f76o/Xb6+fFC9mvYD8HflRv
C/8AZxl/Ij4fX4tPwjPyk/Mz8T/g35Kvy0/lE3Infk1+c37JcP7mn+Hf5O/j
19Yvp19H/wf9BHh8PBUeC5/HHxm+NfF7hTMeNhBrgkULZ2ksEvcStkFebWu7
PDuc17gZ8NzhWYc/th3HdXz3X/OH6vfT/1m/nX4e/Ef75e1/E75f6W3m7+cs
5U/A5+Fr8In4V/xk/Iz89/k35WvyE/m43JFfg9+MXyKcv/mn+Tf4f/Jr6ZfV
r63/vX58/BM8JR4Tn8sfEb418XvyW+Kd8AF4YzxqOE9HCR8m/Q4N35jkVfa2
ybPC2Y3/JZ4rPO/wR/zYrj9x/x/+EP2++qP02+p/hxe0X87+1/hhvU38vzhL
+OPxufhqfAKegf85/yv+e/wb8lX5sXxM7sCvzm/KLx7O3/xT/Ov8vfya+mX0
a+nn1/8kvHvhKfAY+Bz+T+GbE78HvwXeEe+PN8KjhPM0/i9+EV8vr7S31d7M
cHbjp8dzhucd/pAfy/XH7r/iD9bvoz9Sv43+t3gB+2XtZ8cP6W3k7+Ms5v+C
z8FX4ePxL/lJ+Rn47/Kvy1fkR/JRuT2/Gr8Jv1g4i/NP8q/x9/Br6JfWr6mf
T//j8P6FJ8ej47P5w8M3J353fnO8A94Pb4hHDmdr/A1+AV8nr7C3xd6McHbj
p8NzhOcd/oAf0/VH7r/kD9LvrT9Cv7V+bvwH+2XsZ8P/4P6pv4g7DpuNrcR+
wT7jfcl7h3fNzmX5oXxEbme/Krcxt2g4g3NPcK9yd4f3Gv1S+jX08+p/FN67
8GR4NHwWf1j43sTvxm+Gt8f74g3wSOFMjb/Gz+Nr5eX2Ntv7LZzZ+Gnxb8Jz
Dr/Pj+H6Q/df8Afq99L/Sb+Vfi78e/ul7WfFD+pt4O/lLOSPxWfhK/BxeHp+
En56/tv8q/Il+YF8WG7Lr8JvxC8SzuD84/wr/F38avol9avr59H/MLyD4Z/j
UfGZ/KHhmxO/K78p3g7vg9fHI8KZGv8HPyeukZfZ22Tv13B+46fBvw7POvwe
P7rrD9x/zu+pO1y3pW5OLL/tUrazYAd0fufu0V/AHYPPxJfjY/F0ftan/HT8
t/h/u77v+pDrNtzK3IbcwuHszT3Gvczdya3KLaFfTf87/Q/CuxeeFI+Cz+AP
Cd+a+F34TfC2eG+8XviOg9/BX+Fn8dX2ltrbaG96OLvhqfHs4RmH3+VHc/2+
+8/4A/R76A/Tb6GfA89nv6T9zPh+vfX83Zz5/NH4DHwZPgZPy0/MT8uPx78i
X5TvyQfl1vxK/Ab8QuEczj/Kv8Tfwa+iX1y/qv63+u+Hdy/8Mzwy/ht/cPjm
xO/Mb4y3wXvhdfE3+G38JX4GX2Vvib0/7E0LZzf8CzxbeMbhd/hRXb/n/lN+
f/3u+kP1m+t/g+e1X8J+JvwvvXX8XZx54d0eW4qNxtJwE3HTcONyL7i+6/pA
+HbKqc/5MZy9bR7h/c3bHt5peMV0q+jm1n0vvG/hSfBI+K9+5qDwrYnfid8I
b433xOvgr/Fb+Av8NL7S3mJ7G+xNDec1PBWeNTzX8Nv8KK7fdf8Jv59+N/0h
+s30v8bz2C9uPyO+T28tfydnbnifx5ZgP2OpuQm5qblxuJfl8/Ideb/ciluB
W49bMJy9bR/mX+Rv41fSL6pfWT+X/rvhvQv/NGb4uO7vWf7A8J2J39Gthngr
vAdeO3zHwW/iz/FT+Ap7i+z9bm9KOKvhKfEs4dmG3+JHdv2O+4/5ffW76g/W
b6qfHf/OfjH7X+F/6q3h7+DM4f+MT8cX46PwL/gJ+F/wY/Mvyefk2/Jfckt+
eX5dfoFw9uYf4l/gb+VX1C+iX0k/p/7bWGLsX9fTuAPC9yZuB24Dbku8O16L
+wq/gT/DT+LLbS20td7W5HBWw1PgmcNzDb/Jj+T6bfcf8fvod9EfpN8k/G63
XdR2Bmw1b7vubN4o3jRsETYSS8WLz0vFixWeb/JZ+Za8T25hvxy/Dv+HcN7m
H+Sf52/hV9AvrF9RP4f+O+F9C0+Ev5Gn8vuH70z89vz6eAu8G16T/xK/jj/F
T+DL7C2wt87epHBGw5PjmcJzDb/Bj3D9lvsP+b31O+sP1G+snw3Pbb+I/S/x
vXqr+Ns4s6gj8an4QnwE/gk3JTcm94zrm67/dN2cV5ZXm/d9OGvzDvDO8Tbz
yvu5hfQr6H8T/lqH9yw8If5ansLvF74v8dvx6+HN8a54Df4L/Br+BD+OL7U3
395aexPDXz88GZ4xPM/w6/x/+fHcf8Dvpd9Jf4B+I/2seC68sP30+B69lfyt
/Jn8EfgUfAH+E56S/zE/BT8G/6J8Wr4h75Wb8cvwa/Hzh7M2fz//LH8Tv5z+
j/rl9b/Wfyu8Z+EJ8H/kyfy+4fsSvy2/Lt4M74JX5z/Hr+KP8WP4Envz7K2x
NyGczfDP8a/Csw2/xn/Dj+v+/fA7Xb+jfn/9hvpZ8Jx4Ifvp8N16K/hb+DP4
P+GT8fn4cDwF/yN+cn708HyXT8nX5T1yU35pfk1+vvDdjnuGu5FbVregbjnd
7LrxwnsWHh9/JU/i9gnfmbhtuHXwpnhnvBr/GX4Ff4QfxRfbm2tvtb3x4XyG
J8UzhGdb+E7PjePePW4P3Q66/XQb6Ga2nQP/0XZafJfecu5m7m/c4fgkfB4+
DP+Qm4wbjXve1kn5mrxbbsItxa3BzRveL7j7uKe5f3DL6BfQL6ufTT9ueL/C
P8FfyhP5vcM3Jn5rfm28Cd4Jr8p/il/GH+JH8EX25thbZe+XcDbDP8O/DM+1
8K2eG9u9u9z2en316off4+4XtJnG/Z34Ms4mzq+cYX7mRHwuPhRP7md8wP2c
G5V7Tj4hX5V3yY35JfnV+XnC9yruKe4GbmndH3TL6GbVjRPep/CP8RfyBG6v
8E2J24pbC2+Md8Sr8J/gl/AH+GF8ob3Z9lbaGxfOY3gSPH14nuFX+a/4scK5
j99dv51+H/164Xc5VsB2amyHzlLuRu507lDuBHwOPgRPxn2fm5QbhXtWPi5f
kXfKjfgl+NX434V3Kf5e/kn+7/xS+t/rl9bPoh87vEvhH+HP5fH8nvzh/Jb8
mngjvANemf8Y/xu/jx/CF9ibZW+FvbHhryH+KZ4Oj4df4b/kxwxnPn43/bb6
vfXr6mfCs+M/2P8C3663hP8Hfxp/CD4en40Pxj/nv8f/jB85PNvlY/JleYfc
kF+cX5X/bXin4u/hn+Cv55fUz69fSj+zfqzwToV/iD+Tf+H34A/jt+DXwBvi
7fFK/Ef4RfwefhCfb2+mveX2xoS/lnhiPG30//6n54jL/Bf8GOH8x++q30a/
l34d/Yx4Nvx7+6nwbXqL+Rv4U8O7OjYLG4Ql5b7LTcKNxD0tH5UvydvlBtxi
3Crc3OF9yvZu/nH+On4J/Xz6JfUz6ccM71P4B/hTeRy/O38ovzm/Ot4Ab4dX
5D/EL+B38QP4PHsz7C2zNzqcy/BEeBo8/Dq/5D+e86OH8x+/i35r/Z76tfW/
wrPi+e2nxLfqLeL/zp/CH4yPw2fiA8O7Ov8d/qf88C+1nZKPyH/L2+T6/KL8
yvxc4b2Kv4t/jL+WX1w/r34J/Yz6McJ7Ff4+/kQey+/GH8Jvxq+G18fb4hX4
D/Dz+B18Pz7X3m/2ltr7OZxR8IR46uj/vdpG/M1/xo8WzoD8zm620u+hX0s/
A54Fz2c/Bb5FbyF/PX8yfxA+Fp+BD8CT8N/mJ+b/i5+UD8sX5a326vGL8Cvx
c4b3Kv5O/lH+Gn4x/Tz6xfW/0o8e3qvw9/DH8hh+V/5gflN+Vbwe3gYvz7+P
n8Nv43/hc+z9am+JvVHhrIInwL/AXUZc5D/lRw1nQX4n/Zb63fVr6n+JZ8bz
2k+Ob9ZbwF/Hn8QfiI/Bf8P745/y3+In4r/BT8iH5AvyFnt1+YX5Ffk5wjsW
fwf/CH81v6j+d/rF9DPoRwvvWPi7+CN5NL8LfxC/Cb8KXhdvjZfj38PP4rfw
ffhse9PtLbY3MpxV8Ph4quj//asBERf4T/hRwpmQ31G/hX43/Rr66fFMeB7l
ZPgmvfn8tfyJ/AH4aPxXvB+emB+Pn5D/Gj8uH5TPy5vt1eEX4lfgfxPes/jb
+Yf5q/hF9L/VL6r/pX7U8J6Fv4M/lH/md+YP5DfmV8br4K3wsvy7+Bn8Jv4n
PsveNHuL7I0IZxb8Ezxl9P8+5Uac5z/mRw5nQn4H/eb6XcHq+unwjPh39j/H
53HXcCeEdzj3p7vf1/1EvLi8BLx/sGPyAfmcvCl8H+WV530d3q9sbuMe4q7k
FtbNrVtEN71ulPB+hb+NP5BH+f+tE38AvxG/El4bb4mX4d/BT+M38L34VFsL
bf0UfndhH2Mpov/36hJxjvuIGymcA8PZxs9upt9Fv1p43mHf2k2KzeWtJo3n
9eeNwqZhfbCEvDi8+LxX+FF5v3xW3mintv2C/HL87OHdir+Vf5C/gl9IP5d+
Yf10+pHDwxh/C78vj+R35PfnN4Qq4rXwFnhp/m38FH4d34PPtDfF3gJ7w8Pv
LPwjPHn0/2YjHob/CGdAbjvdprqddavqprWdAc9t+zN8o94c7iruL7R++Eh8
Kt4bT8CPzf+E/xI/Iv8ln5H/sFeLX4Bflp8tvF/xt/AP8Jfzf9TPqV9IP61+
pPB+JcfD78kj+B34/fgN+BXwmvzmeCn+Lfwkfg3fjc+wN5k/396w8I0TSxb9
v38FLeKSfhMXnbAq4XlmJ5edJOGbs53Zuit1x+n29XNG4FPwXnh8u7G4H3Nf
4IflffJpeYOtmvwf+GX4WcN7FH8zfz9/Gb+gfg79H/XT6IdfuG/kuPhd+Sd+
e35ffv1wjuE2w0pyb2InsKvYrvB9zNYk7jxbQ8Pfp/gH+OfR//ufViPO2n7A
/5f/N7+tfmP9jvqV9T8N37oVV+iPDe9kupN1e4b3cN2Yuh/pPscOyX/Kp+Tf
uTX8rO+5pblZwjuTn7WJ/xd/Kb+A/jf6BfVT6792HQe743o4tx23D7cetzy3
OrcpXoJ7Az+OX8F3hm9itiby59oaEn7/4u/jSaP/9xkr4gz/Pv8N/6IbbfQb
6XfQr6SfBk+P58QT4xv4M/nL+WP4ffDh+CS8B/4xPwb/Q/4z/KC8Vz4pr7dX
nZ+fX4qfObw38Tfy9/GX8H/Q/1q/gP4X+v/K/8ix8dvyMH5bfm9+XX45fjV+
E7w4/zp+DL+M78Cn8yfw59gbHP5+xd/DP8P/B6eHPso=
                    
                    "]]}]}, {}, {}}, {{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    LineBox[CompressedData["
1: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
zlfqH9Xfqb9f/0H4sV/+Hf9Q7mz/e/sD7HfnD8MX8ifja8I9hWfBk+HlbbXm
1rN12vkz57ec1+R047Tk9Odc0/tL76nec5+RUP5Mzih/Ks/j7uau5c71mVv4
5/g/8C/zP8cb4JXw0uHZmz+NP5I/Przn1UuuF4vzB56GX8J1XudVnK/SP6a/
S/+A/sPwjzr5Dzya3MX+aPsD7ffgf4sv4k/B14b7CM+KJ8eTh2dYe2349e21
Cu968ef4bfwnvBb/K/6X/AH86/p/6/+q/0I/kZxPziR/Js/n7+Gv48/jb+Wf
5//Iv8IvijfEK+NlwjM4fzp/FH9CeN+rl0IvNudPPC2/pOtPnVd1vlr/uP5u
/YP6j/Co8p94dLmr/TH2B9n/mv8dvpg/FV8X7iU8G54CTxGeYe215Tew1zq8
+8Vf4L/gJ/Ha/O78VvyB/Bv6/+g/03+pn1jOL2eW88kL+Hv56/nz+dv4F/hH
+Ff5xfBGeBW8bHgG58/gf8+fGN796qXUi8P5C0/HL+X6M+fVnK/RP6G/R/+Q
/mP8A/kvPIbczf5Y+4Pt9+QPx5fwp+Hrw32FZ8dT4inDs6y9dvyG9tqEd8D4
S/wO/jNeh9+D35o/iH9T/1/95/qv9JPIBeQscn55IX8ffwN/AX87/yL/KP8a
vzjeGK+KlwvP4vyZ/NH8SeE9sF4qvbicv/H0/NKu8zmv7nyt/k/6e/UP6z8J
P9rJf4efwWyPs/2N7V7cEdhS7nRsQ7in8Bx4KrySnfa8RnbOO3/l/K7zU7y6
vK95bXiDebd0/9N9ofvaZyaVC8pZ5QLyIv5+/kb+Qv4O/iX+Mf51fgm8CV4t
fJ8Jz9/8Wfwx/Mnh3a9ear14nH/wDPwyrvM7r+F8nf5J/X36P+g/xaPJ/+Ax
5e72x9sfYr83fyS+jD8D3xjuJTwnnhpPFZ5f7XXgN7bXNrz7xV/j9/DTeD1+
T35b/jf825Ei/vcvB7zUf6OfTC7EzyYXlBfzD+Cb+Iv4O9Uv84/zb/BL4k3x
6niF8PzNn80fy5/Cj6qXRi8+5188I7+s6wLOazpfr/+z/n79H/V/xaPL/+If
yT3sT7A/1P4obDl3JrYp3EdYLiwNljo8v9rqyG1iq114/4u/we/jZ/D6/F78
dvwh/F/0I+Gv9N/qJ5cL87PLheQl/IP4Zv5i/i7+Ff4J/k1+KbwZXgP/Ah/E
n8MfF34mDu9/9dLqJeD8h2fil3Nd0Hkt5xv0T+kf0D+i/wyPIf8XfvayPdH2
MNt9uN9jK7izsHhYbiwtliY8t9rpxGtqp314/4u/xR/gZ/EG3N7c9tyhPveO
/jv4a/3f9FPIRfg55MLyUv4hfAt/CX83/yr/J/4tfmm8OV4Trxieu/lz+eP5
08I7YL10ep9Eifjf//ic2S/lXRdyXtv5Rv3T+gf1j+o/x2O+H/G/fwntY7mn
/Un2v7Xf1/5oaCV/Nn9zuJfwPHg6PG14brXXmd+M3yG8A8Z/wx/i5/CG/D78
Dvxh/Lv6kfE34b2Tfkr5c35OuYi8jH8Y38pfyt/Dv8Y/yb/NL4O3wGuF7zXh
uZs/jz+BPz28A9ZLr5eQE8mfPwu/guvCzus436R/Rv+Q/jH9F/hHciQ5ltzL
/mT739nvZ38Mvoo/h78l3E94Xjw9ni48t9rrwm/Ov4L9jj3CzmONuH25Hbnf
cu/pvou/1f3DZ6WSi3JzyZ/Ly/k/4NvC+2r+Xv51/s/8X/hl8ZZ4bbxyeObm
z+dP5M/gR9fLoJeI844/e1b+F66LOK/rfLP+Wf3D+sf1X+Ify+/IseXe9qfY
H26/v/2x+Gr+XP7WcE/hn+IZ8Bq2unJbcDuGd8HYH9hj7AK3MbcftxP3O+59
/ffw3/T/1E8tF+PnlovKK/g/4tvDe2v+Pv4N/in+HX45/Eu8Dl4lPHPzF/An
8WfyY+hl1EvMiezPno1f0fXnzus536J/Tv8H/RP6r/BYcmQ5jtzH/lT7I+wP
sD8OX8Ofx98W7if8Mzwjnh6vaa8bvyW/E/8a/if+BL+IN+H353fmD+c/0I+C
/67/l34auTg/j1xMXsk/gu/gr+Dv59/kn+bf5ZfHW+F18arhmZu/kD+ZP4sf
Uy+TXhLOu/782fmVXBd1Xt/5Vv3z+j/q/6T/Go8tvyvHlfvan2Z/pP2B9sfj
a/nz+dvDPYXnwzPhtWx9xf2S25l7HfsLe4pd4jblDuB24Y7gPtR/H/9D/2/9
tHIJfl65uLyKfxTfGd57c29xz3DvcStgrbF6WLXw3M1dxJ3Cnc39SC+zXlLO
e/7cOfiVXRdz3sD5Nv0L+kf0T+q/wePI78nx5H72p9sfFd7h2J+Ar+Mv4O8I
9xOeH8+MZwjPrfa681vxu/Bv4H/jv+KX8Wb8gfyu/JH8R/pR8T/1/9FPJ5fk
fyqXkFfzj+G7+Cv5B/m3+WfDewisDVYfqx6eubmLuVO5c7gf62TxGcn0o/iz
5+RWcV3ceUPn2/Uv6h/V/1n/LR5XjiLHl/vbn2H/e/uD7U/E1/MX8neGewkv
gGfBM4ZnVns9+K35Xfk38X/wZ/gVvDl/EL8bfxT/sf4H+F/6/+qnl0vxP5NL
ymv4x/Hd/FX8Q/xf+Of49/kV8bZ4g/D9Jjxz85fwp/Hn8mPpZdVLHuX//38B
ufj/BzQVPp0=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1996139#1"]& ]}}], {}, {}}, {
                   GridLines -> Dynamic[
                    Join[{{{3.4081344*^9, 
                    GrayLevel[0.9]}, {3.4712928*^9, 
                    GrayLevel[0.9]}, {3.5343648*^9, 
                    GrayLevel[0.9]}, {3.5975232*^9, 
                    GrayLevel[0.9]}, {3.6605952*^9, 
                    GrayLevel[0.9]}, {3.7237536*^9, 
                    GrayLevel[0.9]}, {3.7868256*^9, 
                    GrayLevel[0.9]}}, {0, 50, 100, 150, 200, 250}}, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], FrameTicks -> {{{{0., 
                    FormBox[
                    TagBox["0", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50., 
                    FormBox[
                    TagBox["50", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100., 
                    FormBox[
                    TagBox["100", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {150., 
                    FormBox[
                    TagBox["150", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200., 
                    FormBox[
                    TagBox["200", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {20., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {40., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {60., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {80., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {90., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {110., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {120., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {130., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {140., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {160., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {170., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {180., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {190., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {210., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {220., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{0., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {50., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {100., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {150., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {200., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {20., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {30., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {40., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {60., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {70., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {80., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {90., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {110., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {120., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {130., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {140., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {160., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {170., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {180., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {190., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {210., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {220., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{3.4081344*^9, 
                    FormBox["\"2008\"", TraditionalForm]}, {3.4712928*^9, 
                    FormBox["\"2010\"", TraditionalForm]}, {3.5343648*^9, 
                    FormBox["\"2012\"", TraditionalForm]}, {3.5975232*^9, 
                    FormBox["\"2014\"", TraditionalForm]}, {3.6605952*^9, 
                    FormBox["\"2016\"", TraditionalForm]}, {3.7237536*^9, 
                    FormBox["\"2018\"", TraditionalForm]}, {3.7868256*^9, 
                    FormBox["\"2020\"", TraditionalForm]}}, {{3.4081344*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.4712928*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.5343648*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.5975232*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.6605952*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.7237536*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.7868256*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], 
                    TraditionalForm]}}}}, ImagePadding -> All, 
                    GridLines -> {{{3.4081344*^9, 
                    GrayLevel[0.9]}, {3.4712928*^9, 
                    GrayLevel[0.9]}, {3.5343648*^9, 
                    GrayLevel[0.9]}, {3.5975232*^9, 
                    GrayLevel[0.9]}, {3.6605952*^9, 
                    GrayLevel[0.9]}, {3.7237536*^9, 
                    GrayLevel[0.9]}, {3.7868256*^9, 
                    GrayLevel[0.9]}}, Automatic}, PlotRangePadding -> None, 
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, 
                    AxesOrigin -> {3.4064928*^9, 0}, 
                    FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {50., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {100., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {150., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {200., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {10., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {20., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {30., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {40., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {60., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {70., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {80., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {90., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {110., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {120., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {130., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {140., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {160., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {170., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {180., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {190., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {210., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {220., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {230., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {240., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {250., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{3.45*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.5*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.55*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.6*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.65*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.7*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.75*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.4*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.41*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.42*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.43*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.44*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.46*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.47*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.48*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.49*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.51*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.52*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.53*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.54*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.56*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.57*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.58*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.59*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.61*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.62*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.63*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.64*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.66*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.67*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.68*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.69*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.71*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.72*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.73*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.74*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.76*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.77*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.78*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.79*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.8*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {{{3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, DisplayFunction -> 
                    Identity, 
                    PlotRangePadding -> {{None, None}, {None, None}}, 
                    PlotRangeClipping -> True, ImagePadding -> All, 
                    DisplayFunction -> Identity, AspectRatio -> 0.2, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.4064928*^9, 0}, AxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BaseStyle -> AbsoluteThickness[1], 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {{{3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, GridLinesStyle -> 
                    GrayLevel[0.9], ImageSize -> Full, 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    PointSize[Medium], "PointSizeFunction" -> 
                    "SmallPointSize", "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}, "AxesInFront" -> True}, 
                    PlotRange -> {{3.4064928*^9, 3.799008*^9}, {
                    0, 222.49186034208262`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{None, None}, {None, None}}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "DatePlot", "Frame"]& ]}, 
                    Ticks -> {Automatic, Automatic}}], 
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"in \"", "\"thousands\"", "\" of \"", 
                    "\"hits per day\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}, "Labeled", DisplayFunction -> (FormBox[
                   GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    
                    ItemBox[#2, Alignment -> {Left, Inherited}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{#, ",", 
                    RowBox[{"{", #2, "}"}], ",", 
                    RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                    "]"}]& )]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"based on weekly averages of daily hits to English\
\[Hyphen]language \"", 
                    TagBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"\\\"\"", "\"Leonhard Euler\"", "\"\\\"\""}, 
                    "RowDefault"], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Annotation[#, {
                    "URL" -> "http://en.wikipedia.org/wiki?curid=17902", 
                    "Popup" -> "link to Wikipedia", "OneClick" -> False}, 
                    "ExternalLink"]& ], "\" page\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,timeseriesdata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "TimeSeriesPlot"}, {}], 
       "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Log scale", "input" -> 
         "PopularityPod:WikipediaStatsData__Log scale"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "Euler", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "4"}, {
        XMLElement[
        "value", {
         "name" -> "Person", "desc" -> "a person", "input" -> 
          "*C.Euler-_*Person-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ProgrammingLanguage", "desc" -> "a programming language", 
          "input" -> "*C.Euler-_*ProgrammingLanguage-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Function", "desc" -> "a math function", "input" -> 
          "*C.Euler-_*Function-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "SolarSystemFeature", "desc" -> "a solar system feature", 
          "input" -> "*C.Euler-_*SolarSystemFeature-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "Euler", "score" -> "0.29411764705882354", "level" -> "low"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www5b.wolframalpha.com/sources/\
PeopleDataSourceInformationNotes.html", "text" -> "People data"}, {}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "9", "datatypes" -> 
    "Person", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.587", 
    "parsetiming" -> "0.10300000000000001", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP105281i01ceii6degdehi00004a01h1a200099a67", "host" -> 
    "https://www5b.wolframalpha.com", "server" -> "54", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 13, 16, 57, 48.556463`8.438822019960213}, "Line" -> 
    41, "SessionID" -> 16179469689345703595}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "Euler Langrangian"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1776., {847., 853.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803641068576934*^9},ExpressionUUID->"924b3f09-d18a-4e12-b3f0-\
e3f24ccf5bc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  StyleBox[
   FormBox[
    RowBox[{
     RowBox[{"\[ScriptCapitalL]", "(", 
      RowBox[{
       RowBox[{"r", "'"}], ",", "r", ",", "f", ",", 
       RowBox[{"f", "'"}]}], ")"}], "\[LongEqual]", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"m", "(", 
        RowBox[{
         RowBox[{
          RowBox[{"r", "'"}], "^", "2"}], "+", 
         RowBox[{
          RowBox[{"r", "^", "2"}], "*", 
          RowBox[{"f", "'"}]}]}], ")"}]}], "-", 
      RowBox[{"m", "*", 
       RowBox[{"sin", "(", "f", ")"}]}]}]}],
    TraditionalForm], "Output",
   CellSize->{550, Automatic},
   AutoStyleOptions->{"HighlightFormattingErrors"->False},
   ScriptLevel->0,
   NumberPoint->".",
   RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
   FontFamily->"Times",
   FontSize->14,
   Background->None,
   GraphicsBoxOptions->{DefaultAxesStyle->Directive[
     GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
     "GraphicsAxes"],
   DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
   DefaultFrameStyle->Directive[
     GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
     "GraphicsFrame"],
   DefaultFrameTicksStyle->Directive[
    FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
   DefaultTicksStyle->Directive[
    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
   Graphics3DBoxOptions->{
   DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}], 
  InputForm]], "Input",
 CellChangeTimes->{{3.803641207780582*^9, 3.8036413177814093`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[42]:=",ExpressionUUID->"8c090ae1-b43c-47d9-abac-eb95660372fa"],

Cell[BoxData[
 TemplateBox[{
  "MakeExpression","boxfmt",
   "\"\\!\\(\\*RowBox[{\\\"InputForm\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"MakeExpression\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"FormBox\\\", \\\"[\\\", RowBox[{RowBox[{\\\"FormBox\\\", \
\\\"[\\\", RowBox[{RowBox[{\\\"RowBox\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"RowBox\\\", \\\"[\\\", RowBox[{\\\"{\\\", \
RowBox[{\\\"\\\\\\\"\[ScriptCapitalL]\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"(\\\
\\\\\"\\\", \\\",\\\", RowBox[{\\\"RowBox\\\", \\\"[\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \
\\\",\\\", \\\"\\\\\\\")\\\\\\\"\\\"}], \\\"}\\\"}], \\\"]\\\"}], \\\",\\\", \
\\\"\\\\\\\"\[LongEqual]\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"RowBox\\\", \
\\\"[\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"RowBox\\\", \\\"[\\\", \
RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\
\\\"}], \\\",\\\", \\\"\\\\\\\"-\\\\\\\"\\\", \\\",\\\", RowBox[{\\\"RowBox\\\
\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\
\[RightSkeleton]\\\"}], \\\"]\\\"}]}], \\\"}\\\"}], \\\"]\\\"}]}], \
\\\"}\\\"}], \\\"]\\\"}], \\\",\\\", \\\"TraditionalForm\\\"}], \\\"]\\\"}], \
\\\",\\\", \\\"InputForm\\\"}], \\\"]\\\"}], \\\",\\\", \\\"InputForm\\\"}], \
\\\"]\\\"}]\\) is not a box formatting type. A box formatting type is any \
member of $BoxForms.\"",2,42,9,16179469689345703595,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803641318917049*^9},
 CellLabel->
  "During evaluation of \
In[42]:=",ExpressionUUID->"372eaa59-29c5-4d1d-b652-151daae624c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  StyleBox[
   FormBox[
    RowBox[{
     RowBox[{"\[ScriptCapitalL]", "(", 
      RowBox[{
       RowBox[{"r", "'"}], ",", "r", ",", "f", ",", 
       RowBox[{"f", "'"}]}], ")"}], "\[LongEqual]", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"m", "(", 
        RowBox[{
         RowBox[{
          RowBox[{"r", "'"}], "^", "2"}], "+", 
         RowBox[{
          RowBox[{"r", "^", "2"}], "*", 
          RowBox[{"f", "'"}]}]}], ")"}]}], "-", 
      RowBox[{"m", "*", 
       RowBox[{"sin", "(", "f", ")"}]}]}]}],
    TraditionalForm], "Output",
   CellSize->{550, Automatic},
   AutoStyleOptions->{"HighlightFormattingErrors"->False},
   ScriptLevel->0,
   NumberPoint->".",
   RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
   FontFamily->"Times",
   FontSize->14,
   Background->None,
   GraphicsBoxOptions->{DefaultAxesStyle->Directive[
     GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
     "GraphicsAxes"],
   DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
   DefaultFrameStyle->Directive[
     GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
     "GraphicsFrame"],
   DefaultFrameTicksStyle->Directive[
    FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
   DefaultTicksStyle->Directive[
    FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
   Graphics3DBoxOptions->{
   DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}]], "Input",
  CellChangeTimes->{{3.803641207780582*^9, 3.8036413177814093`*^9}},
  EmphasizeSyntaxErrors->True,ExpressionUUID->
  "80970bdd-5d32-40b9-afcf-badbc3cbefe9"],
 " Euler lagrange"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8036413232115498`*^9, 3.803641383284033*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"6b8e03a4-c745-4b5b-8067-585f9265ee8a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\!\(TraditionalForm\`\[ScriptCapitalL](r', r, f, f') == \n\
\*FractionBox[\(1\), \(2\)]\\ \(m(r'^2 + r^2*f')\) - m*\(sin(f)\)\) Euler \
lagrange", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"\"f\""}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               TemplateBox[{
                 StyleBox[
                  TagBox[
                   TagBox["\"f\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`CharacterData, 102}]], 
                   Identity], FontFamily -> "Code2000"], "\"  \"", 
                 StyleBox[
                  
                  RowBox[{
                   "\"(\"", "\[NoBreak]", "\"character\"", "\[NoBreak]", 
                    "\")\""}], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Visual form", "scanner" -> "Character", "id" -> 
     "VisualForm", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             GraphicsBox[{
               InsetBox[
                FormBox[
                 StyleBox[
                  StyleBox["\"f\"", FontFamily -> "Code2000"], 40., 
                  StripOnInput -> False], TraditionalForm], {0, 0}, {
                Automatic, Baseline}], 
               Directive[
                Opacity[0.5], 
                GrayLevel[0.5]], 
               LineBox[{{-0.5, 0}, {0.5, 0}}]}, ImageSize -> 40, 
              PlotRange -> {All, {-0.5, 1.2}}], FrameMargins -> 0, FrameStyle -> {
               GrayLevel[0.75]}, StripOnInput -> False], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Name", "scanner" -> "Character", "id" -> "Names", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"Latin small letter F\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Upper case", "scanner" -> "Character", "id" -> 
     "UppercaseMapping:CharacterData", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"Unicode"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               StyleBox[
                TagBox[
                 TagBox["\"F\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {$CellContext`CharacterData, "U+0046"}]], 
                 Identity], FontFamily -> "Code2000"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"U+0046\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Positions in alphabets", "scanner" -> "Character", 
     "id" -> "Alphabets:CharacterData", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   FormBox[
                    TagBox[
                    TagBox["\"English\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`AlphabetData, 
                    "English::ff9sd"}]], Identity], TraditionalForm], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["6", "\"th\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6", "\"th\""}]]], 
                    "\" letter\""}, "RowDefault"], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["21", "\"st\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"21", "\"st\""}]]], 
                    "\" letter from the end\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   FormBox[
                    TagBox[
                    TagBox["\"Spanish\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`AlphabetData, 
                    "Spanish::stxh4"}]], Identity], TraditionalForm], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["6", "\"th\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6", "\"th\""}]]], 
                    "\" letter\""}, "RowDefault"], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["22", "\"nd\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"22", "\"nd\""}]]], 
                    "\" letter from the end\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   FormBox[
                    TagBox[
                    TagBox["\"French\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`AlphabetData, 
                    "French::2m3g9"}]], Identity], TraditionalForm], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["6", "\"th\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6", "\"th\""}]]], 
                    "\" letter\""}, "RowDefault"], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{
                    TagBox[
                    SuperscriptBox["21", "\"st\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"21", "\"st\""}]]], 
                    "\" letter from the end\""}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "Alphabets:CharacterData__More"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Encodings", "scanner" -> "Character", "id" -> 
     "CharacterEncodingsToggler:CharacterData", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"ASCII\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{"102", "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    StyleBox[
                    RowBox[{
                    TagBox[
                    TemplateBox[{"\"hex: \"", 
                    StyleBox["\"41\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}]}, "RowDefault"], Identity], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox[
                    TemplateBox[{"\"octal: \"", 
                    StyleBox["\"101\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}]}, "RowDefault"], Identity], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    TagBox[
                    TemplateBox[{"\"binary: \"", 
                    StyleBox["\"01000001\"", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}]}, "RowDefault"], Identity]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                  "\"Unicode\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    StyleBox[
                    "\"U+0066\"", {
                    FontFamily -> "Monospace", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"decimal: \"", 
                    StyleBox["102", {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}]}, "RowDefault"], "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "CharacterEncodingsToggler:CharacterData__More"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Typical letter frequencies in English", "scanner" -> 
     "Character", "id" -> "LetterFrequencyGrid:CharacterData", "position" -> 
     "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"texts\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"anywhere in words\"", 
                   BaseStyle -> {{FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["2.2", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.2", "SRString" -> "2.2"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"ranking among letters: \"", 
                    TagBox[
                    SuperscriptBox["16", "\"th\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"16", "\"th\""}]]]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                  "\"dictionaries\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"anywhere in words\"", 
                   BaseStyle -> {{FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["1.4", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "1.4", "SRString" -> "1.4"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"ranking among letters: \"", 
                    TagBox[
                    SuperscriptBox["19", "\"th\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"19", "\"th\""}]]]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                "\[SpanFromAbove]", 
                 TagBox[
                  PaneBox[
                  "\"beginning of words\"", 
                   BaseStyle -> {{FontColor -> GrayLevel[0.3]}, 
                    LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    StyleBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox["4.1", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "4.1", "SRString" -> "4.1"]], 
                    "\[NoBreak]", 
                    StyleBox[
                    "\"%\"", FontFamily -> "Helvetica", FontSize -> 
                    Smaller]}], Identity], #& , SyntaxForm -> Dot], "Unit", 
                    SyntaxForm -> Dot], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0, ZeroWidthTimes -> False], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"ranking among letters: \"", 
                    TagBox[
                    SuperscriptBox["10", "\"th\""], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"10", "\"th\""}]]]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata,quantitydata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Language occurrence", "scanner" -> "Character", "id" -> 
     "CharFrequencyTable:CharacterData", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               FormBox[
                TagBox[
                 TagBox["\"English\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "English::385w8"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Spanish\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "Spanish::77gfp"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Portuguese\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "Portuguese::72qq5"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Indonesian\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "Indonesian::473fb"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Malay\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "MalayColloquial::33t85"}]], 
                 Identity], TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"French\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "French::367gk"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"German\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "German::8jz29"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Javanese\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "Javanese::25jfw"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Turkish\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "Turkish::5d235"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               FormBox[
                TagBox[
                 TagBox["\"Italian\"", 
                  $CellContext`TagBoxWrapper[
                  "Entity" -> {LanguageData, "Italian::39fbj"}]], Identity], 
                TraditionalForm], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               "\"\[Ellipsis]\""}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "CharFrequencyTable:CharacterData__More"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show frequencies", "input" -> 
         "CharFrequencyTable:CharacterData__Show frequencies"}, {}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Standard blocks", "scanner" -> "Character", "id" -> 
     "StandardBlocks:CharacterData", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"Unicode"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"Unicode\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"Basic Latin\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"CharacterBlock", "BasicLatin"}]], Identity],
                     "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"0", "\" through \"", "127"}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
                    "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"128", "\" characters\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"ISO 8859\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  TemplateBox[{
                    FormBox[
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TagBox["\"ISO 8859\[Hyphen]1\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {"CodedCharacterSet", "ISO8859-1"}]], 
                    Identity], "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{",", "\",\"", "\"Latin\[Hyphen]1\""}, 
                    "RowWithSeparators"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0], TraditionalForm], 
                    "\"  \"", 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"\"character \"", "102"}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"], LineIndent -> 0]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Phonetic alphabet", "scanner" -> "Character", "id" -> 
     "PhoneticAlphabet:CharacterData", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{"\"Foxtrot\"", "\"  \"", 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  
                  TemplateBox[{
                   " or ", "\" or \"", "\"FOKS\[CenterDot]TROT\""}, 
                   "RowWithSeparators"], "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Unicode classification", "scanner" -> "Character", 
     "id" -> "UnicodeClassification:CharacterData", "position" -> "1100", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["microsources", {}, {"\n    ", 
         XMLElement["microsource", {}, {"CharacterData"}], "\n   "}], 
       XMLElement["datasources", {}, {"\n    ", 
         XMLElement["datasource", {}, {"Unicode"}], "\n   "}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               TagBox["\"letter\"", Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  StyleBox["\"  \[RightAngleBracket]  \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], AutoSpacing -> True], 
               TagBox["\"lowercase\"", Identity]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Transliterations", "scanner" -> "Character", "id" -> 
     "Transliterations", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TagBox["\"Greek\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  TemplateBox[{"  ", "\"  \"", 
                    TemplateBox[{"\"\[Phi]\""}, "RowDefault"], 
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"phi\""}, 
                    "RowWithSeparators"], "\[NoBreak]", "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowWithSeparators"], Identity]}, {
                 TagBox[
                  PaneBox[
                   TagBox["\"Russian\"", Identity], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox["\"\:0444\"", Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "\"f\" on a Swiss German keyboard", "scanner" -> 
     "ComputerKeyboard", "id" -> "LetterOnAKeboard", "position" -> "1300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                GraphicsBox[{{{
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{-10, 90}, {1340, 90}, {
                    1340, -370}, {-10, -370}}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1210, -90}, {1210, -10}, {1330, -10}, {
                    1330, -180}, {1250, -180}, {1250, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"enter\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", Selectable -> True, 
                    StripOnInput -> False], TraditionalForm]], {
                    1270, -50}]}, {{
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{0, 0}, {0, 80}, {80, 80}, {80, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Section]\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {40, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{90, 0}, {90, 80}, {170, 80}, {170, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"1\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {130, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{180, 0}, {180, 80}, {260, 80}, {260, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"2\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {220, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{270, 0}, {270, 80}, {350, 80}, {350, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"3\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {310, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{360, 0}, {360, 80}, {440, 80}, {440, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"4\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {400, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{450, 0}, {450, 80}, {530, 80}, {530, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"5\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {490, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{540, 0}, {540, 80}, {620, 80}, {620, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"6\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {580, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{630, 0}, {630, 80}, {710, 80}, {710, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"7\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {670, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{720, 0}, {720, 80}, {800, 80}, {800, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"8\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {760, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{810, 0}, {810, 80}, {890, 80}, {890, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"9\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {850, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{900, 0}, {900, 80}, {980, 80}, {980, 0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"0\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {940, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{990, 0}, {990, 80}, {1070, 80}, {1070, 0}}], 
                    
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"'\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1030, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{1080, 0}, {1080, 80}, {1160, 80}, {1160, 
                    0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"^\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1120, 40}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1170, 0}, {1170, 80}, {1330, 80}, {1330, 
                    0}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"delete\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1250, 40}]}}, {{
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{0, -90}, {0, -10}, {120, -10}, {120, -90}}], 
                    
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"tab\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {60, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{130, -90}, {130, -10}, {210, -10}, {
                    210, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"q\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {170, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{220, -90}, {220, -10}, {300, -10}, {
                    300, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"w\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {260, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{310, -90}, {310, -10}, {390, -10}, {
                    390, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"e\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {350, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{400, -90}, {400, -10}, {480, -10}, {
                    480, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"r\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {440, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{490, -90}, {490, -10}, {570, -10}, {
                    570, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"t\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {530, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{580, -90}, {580, -10}, {660, -10}, {
                    660, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"z\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {620, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{670, -90}, {670, -10}, {750, -10}, {
                    750, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"u\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {710, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{760, -90}, {760, -10}, {840, -10}, {
                    840, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"i\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {800, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{850, -90}, {850, -10}, {930, -10}, {
                    930, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"o\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {890, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{940, -90}, {940, -10}, {1020, -10}, {
                    1020, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"p\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {980, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1030, -90}, {1030, -10}, {1110, -10}, {
                    1110, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[UDoubleDot]\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1070, -50}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1120, -90}, {1120, -10}, {1200, -10}, {
                    1200, -90}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[DoubleDot]\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1160, -50}]}}, {{
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{0, -180}, {0, -100}, {160, -100}, {
                    160, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"caps\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {80, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{170, -180}, {170, -100}, {250, -100}, {
                    250, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"a\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {210, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{260, -180}, {260, -100}, {340, -100}, {
                    340, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"s\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {300, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{350, -180}, {350, -100}, {430, -100}, {
                    430, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"d\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {390, -140}]}, {
                    RGBColor[1, 
                    NCache[
                    Rational[208, 255], 0.8156862745098039], 
                    NCache[
                    Rational[157, 255], 0.615686274509804]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{440, -180}, {440, -100}, {520, -100}, {
                    520, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"f\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {480, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{530, -180}, {530, -100}, {610, -100}, {
                    610, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"g\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {570, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{620, -180}, {620, -100}, {700, -100}, {
                    700, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"h\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {660, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{710, -180}, {710, -100}, {790, -100}, {
                    790, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"j\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {750, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{800, -180}, {800, -100}, {880, -100}, {
                    880, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"k\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {840, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{890, -180}, {890, -100}, {970, -100}, {
                    970, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"l\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {930, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{980, -180}, {980, -100}, {1060, -100}, {
                    1060, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[ODoubleDot]\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1020, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1070, -180}, {1070, -100}, {1150, -100}, {
                    1150, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[ADoubleDot]\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1110, -140}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1160, -180}, {1160, -100}, {1240, -100}, {
                    1240, -180}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"$\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1200, -140}]}}, {{
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{0, -270}, {0, -190}, {120, -190}, {
                    120, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"shift\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {60, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{130, -270}, {130, -190}, {210, -190}, {
                    210, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"<\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {170, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{220, -270}, {220, -190}, {300, -190}, {
                    300, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"y\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {260, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{310, -270}, {310, -190}, {390, -190}, {
                    390, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"x\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {350, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{400, -270}, {400, -190}, {480, -190}, {
                    480, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"c\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {440, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{490, -270}, {490, -190}, {570, -190}, {
                    570, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"v\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {530, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{580, -270}, {580, -190}, {660, -190}, {
                    660, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"b\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {620, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{670, -270}, {670, -190}, {750, -190}, {
                    750, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"n\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {710, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{760, -270}, {760, -190}, {840, -190}, {
                    840, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"m\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {800, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{850, -270}, {850, -190}, {930, -190}, {
                    930, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\",\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {890, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{940, -270}, {940, -190}, {1020, -190}, {
                    1020, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\".\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {980, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1030, -270}, {1030, -190}, {1110, -190}, {
                    1110, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"-\"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1070, -230}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1120, -270}, {1120, -190}, {1330, -190}, {
                    1330, -270}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"shift\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1225, -230}]}}, {{
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{0, -360}, {0, -280}, {120, -280}, {
                    120, -360}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"control\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {60, -320}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{130, -360}, {130, -280}, {250, -280}, {
                    250, -360}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"alt\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {190, -320}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{260, -360}, {260, -280}, {1070, -280}, {
                    1070, -360}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\" \"", FontSize -> Scaled[
                    Rational[3, 98]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {665, -320}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    
                    PolygonBox[{{1080, -360}, {1080, -280}, {1200, -280}, {
                    1200, -360}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"alt\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1140, -320}]}, {
                    RGBColor[
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451], 
                    NCache[
                    Rational[50, 51], 0.9803921568627451]], 
                    EdgeForm[{
                    Thickness[Medium], 
                    RGBColor[
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961], 
                    NCache[
                    Rational[40, 51], 0.7843137254901961]]}], 
                    PolygonBox[{{1210, -360}, {1210, -280}, {1330, -280}, {
                    1330, -360}}], 
                    GrayLevel[0], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"control\"", FontSize -> Scaled[
                    Rational[4, 245]], FontColor -> RGBColor[0.3, 0.3, 0.3], 
                    FontFamily -> "Code2000", StripOnInput -> False], 
                    TraditionalForm]], {1270, -320}]}}}, {}}, 
                 ImageSize -> {490}]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"left index finger\"", 
                   "\[NoBreak]", "\")\""}], {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show dead key", "input" -> 
         "LetterOnAKeboard__Show dead key"}, {}]}]}], Typeset`pod14$$ = 
   XMLElement[
   "pod", {"title" -> "Computer keyboards containing \"f\"", "scanner" -> 
     "ComputerKeyboard", "id" -> "ComputerKeyboardsContainingLetter", 
     "position" -> "1400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               TagBox["\"US English keyboard\"", Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox["\"United Kingdom keyboard\"", Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox["\"Chinese ChaJei keyboard\"", Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox["\"Japanese keyboard\"", Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox["\"Spanish keyboard\"", Identity], 
               StyleBox[
                RowBox[{"\[NoBreak]", 
                  PaneBox[
                  "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                   GrayLevel[0.6]]}], AutoSpacing -> True], 
               TagBox["\"German keyboard\"", Identity]}], 
             LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "ComputerKeyboardsContainingLetter__More"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Less", "input" -> 
         "ComputerKeyboardsContainingLetter__Less"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show key location", "input" -> 
         "ComputerKeyboardsContainingLetter__Show key location"}, {}]}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Wikipedia page hits history", "scanner" -> "Data", 
     "id" -> "PopularityPod:WikipediaStatsData", "position" -> "1500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  GraphicsBox[{
                    GraphicsComplexBox[CompressedData["
1:eJwUm3c0lu8fxykyKmRUVEokSimh8pU+n6aQURmJQhIl2Xuv7L333qtSJFRI
MiIpoySr3Pf9VEqEpN/9+8txnOu6nuec93r9QcTk9rlrK5iYmITWMDH9/+d2
Haboy8YEDvA1rIr+4AfWvO5hPNYEpk93lDVeTgLn18u/l70I3G5+z/fe5lyY
ZjIVHokgcOkbgqtKBJxyN4m2TyeQKf4H57hpKOgsXrc/VU7gjdA9xtK7EuHd
lAYvZz2BJ58ntTmeiwGeIaVtnJ0EzrUPS25kvgMSG164PnlPYKmRX+wK9Wio
atkfZUYSmLzjW7uMXwz8tM8VUFkk8M/yq5AQ9hjIi/+tvZWDRKbnSvFjxskg
u2JyrHgDiccXq/9sN28CT5vBEeudJIp+W/33bEgBHNKqSpSUJ1E7/qm5PW82
lB2IeCJ8ikTfXVJlj0/nwrIxq+xLbRLNHnIrwekCeMp05eo1UxJFXtf3jJbm
gmLOkxVK9iQaWayyHE7IB4nqFYbsfiSmKjw1+VuYDa/a1HZyx5I4Vx8ZKXAi
F85J7lPqyCGxVEw+eM39PDi1OMvtcpfEFVeYQzhO3oVfXU1aV5+RWJ20Wagr
Kh94eW3Vj/aQGOHnIdJpWQ5cOXWJPR9JLDkltSflWC60yHJqZXwjUdrjbFNK
awGQBxWfG/4lsf10+k5mu2xoP+JQfHEthbGVbZm2AnEQFHl6iHMLhXaBBVWl
pXHwUGvpefluCv3T1giETcdCxvpakfD/KOxPq8a8q6Ewp6pz6LIKhZ1hF7sC
HP1hT1d46oQehWq//wQO2vnDFq1Oq0JzCrPTk1ZwBviCx8mvS5ecKIypPCVc
UusHiYoCf9TuUBgtVepe7BUIInlbq6UTKGx6HirxSM0HQnSbH73IozC/re3m
+KInlK21kk6rpvCyXYb008+eoCT754pJM4Xr1AIdufZ7Q4hhJNO1NxQeUt9q
L1XtDtW99V83j1PoucOet3XEEzRqO+Nbf1BoollNfC/whNys8fIyZgYa9Q1b
5oq4wfWFD97+PAy0Za/83jPhCpwZt7PWbWVgkhZTVtARGzA7ybHv/V4G6j/q
l7Iut4cDhgGuCUcY+MTup0jvFy/4WPzvMrs6A73+6moyHfKHM7KNETXmBH4q
IXvDvdPhl82RJjZnAq96urj6uyaCrMX+1bfvEOhl3pM43JEIqUrj/ZIJtL7j
ZD0jPoeC+n+Tvob5BIasFuGpqAqFhB+XjhdVE5g9xbpr180osDM+LcjZQiCr
4ehRibsxkDbv2zXxhkCNZ/N/t2SGAeOWOyvfOIEl31rtWgoi4XUaeU7vJ4Ha
w8+tRaaKQDWg60E1M4k4xBb8zDseGKpWaaY8JDYfTtwx9yMPBg9fMQ7fSqKa
yAJKDhbDpdGW/7r2kjgfxPpffnEe2B7L3C2mRCIhnGJaWpINb9tfLsycJZFM
39J/4mYWXNl/T3WDIYmyazYfWerJBU8t7vtaliSe0Ws9ymxWBjK7R6Vz3Ug8
22jgvfJiNrg17mxaHUriqw062zbuyQEel0aZrykkRtsV/tsrWACd6/h2bi8h
MZw7+u/RF/dgi+mHfVaPSOQqbTqKTJWw0lpI83UbiTz8zc192wuAR3/9zJ1+
Erf3PreQyqwEi5sm9jWfaf/+tCxOMCsAXXnR1cuz9PniYbfqnHwYqtOrucRK
4bOfyqy3t2VAsdlHlBGg8O7UjxuvjiRA5rSIpoEYhYzruNpANBl2yQ7ZpR+g
kHNjt/tkTT6o7Gcrnz1GodDWC+e3X4+HmDU/LbK1KLwY5zb07kcA7ODew9pq
RKF0k1nkj79+cLbjwwNmawqZy5+JV3L7AScyu1/wopDvTfsVtpO+YGCdotsY
QaGrPrOoeXIAvPP48dAtncKTTHfil609IPVe0q+7ZRQ6mFqU2nr4wGxW9el/
jymUNBZJgWN+MKF8supqB/2e4qHI8XAf2LpR/De8p1Dmdl5qnbUv+D5veWZD
Uvj36toXlwrdwUVqIPvRAoU8t6u2sfx1BtazRokbORiY8uqo9bZ3blCrWsDT
sYGBBvrBw8dPOUCtjaL5nDgDhaHq9WpmB1DTOv32kDwDHdeEHFih6QhBfk2W
3ScZeNl30edsnS/InxzhXn2N1l/Y0sHotYEg02Swc409gcJKi/nJdomgsyWJ
ucaPwMKFqJVrKlKhNVPUzT+GwAdY2B6yKwLa34tyWmQTuO28vP97niCYmx29
9LuKQDMesR15GREglt8hwPmUQN6BAFZuzSjQIT45/u4m8ISydIjg4TAIaRIB
ixECyw7mJGm6hcLTfRE2V74RWBGbln8jrwiEPWqv/ftL4P0Nk7HfG6KhbVpm
4dkaEpnXK0T4VqbCKuHtOambSDywvP7RaeMXYCnZvXbrbhLzNwnWKa4rgLcv
C0fFFej+KO+0PFOdD/Cv1IBDhcTEXVb/2V7Mg4qX749aX6T1yzxfpvSuALZK
Hgy9ZE5ieZf2byI+B2rMNJOnnWi/8Yua3iWz4NzheG7OOyQeFZse36uWA9+z
WPcsJ5Doo5cwnLGrACLTs+85FpD4e0KsbOZADshIW2TZPaD13/k5VyyrEpYy
vmkKPSexo00nuLenANbJt2SNvyExYM41uPNqFdQHcq1qGSNxgXmV21BOHkQ8
WL9X/SeJJy8XLEwEFYKJi0qjATOFCmdCpfvpflLoLZ49uY7OZ7/cS16HY4H/
qWz8/W103su0T3mdT4bpY1RavjSFfdxljvuSs+BX7pXreJTuh+UQDx6/aDgh
Jfb631kKIx4JmRpV+YOklaHmWwMKr2nFcfZP3AG5iAsxFywp/N3e6zf/1QdO
HHdS1HOj8LP4odWrdPzA9Z1uMWsohfxnTlwPcvSDpaigB2+T6bz/HCSrbe8N
vKx7++uLKBRQWfN1mvQATd3ox2drKRzvZzNhEvWFaKVt7FdfUOisUcxWMhEA
fXVDf871U9gtV5zPSPaBTZ1PdV98prC0vJNYedIDTG17Nz2dpZA0HLUryfWG
vrnsHBNWBtpZX37uO+gOUTnP2nbyMzChGhSZyl1glE2HhUWUgQ6bIiRUpOzh
omrRihAZBipJaLwqU3aCy9O5M/eQgfvFJI3mZHzAQDR9raklgZsPTB9UTU6D
hyLChivdCbzu8v7uess04H3Qzr8zlECVK0wf3G6FgPVwjmx3MoGPLM4z7dkd
Ar0pBX+0igl0mjTu/rgjDOS/vt11sZZAkbbxn83ZUdC0pXkzZxuBnjknfh9Z
mw5jbDvEevvpvVSdH9TfFgLqgv3t9Z8JXCjdv7r6WDiMsZ+W1ZojUHD2m4JP
Xy44h4+x3mAlceJS2zQrZxLwFBYfZeMn0Y1/okbiTAmUaadt8xIlcffDXXEn
Tej8S66zcJMh0ePPtw/99lnA/TjBQeQYies2zV90e5kONxK+JHzUIlGeqVRJ
QC4XeJKDdBuNSFzz34+K1r25MOzyZei0NYmcbJLNNaM5UP7dplXbiz6v0VPR
ezcD8o7X2a+NpPfMVlf9yqBc2K/ldOhDBt0fBxo3VDzJB45A/9SuchILJ14x
/r2rAvZkjWfmDSQqKP8kmv+U0vl6SiOok8SVa+UrbAvLgdvT/KTUexIjzawW
64orYL3mw7ESkkSxHzwhIvyFsK1Geqp8gcTNfx78W/uZ3mdLZlX6HBTqf9cY
/5KdBhv/8EYIC1Jomtj7tFM3EXaJcK9mlaBQzJHpo9vWKDDd8VIl/iCFcm3H
DEYPZENWY8XP4lMU7m9y1j14xB8+MZ6sOK5NYcJWOb/tH/1ApGrp0UNTCj8a
veQ4qu4P19ivDVbYUahy+bDhlH8A9CiFPtb0o7DEaHvrIuELSpzDrE4xFG7O
Px27rOgNVTf0a0WyKbT/9zIu6LcPiBmt5C2sovD7g+RxmyPekEL2v6l6QuFC
xr/n6eK+cPD8DT3TbgoHpkf1l6194IaDzc+9IxT2TN3gbFIIgKnGtt2bv9F+
n2W5cXrRCyI+D++8/5fCnwKFenLBHiCfKxz2ag0DH7+sWX+r0RlGf4XoWW2i
8z6QOSK9zQYi32/vnNrFwPNXjHtCZxwBdD8XfjnMwBwNnglJIW+4v350kjrD
QPKzZf/Flf5Q1nW7R/YqgeW5413XIn1B6wbjIpctga/2RozKZSfBdaeOpSEf
AqUGoqXufsyHSz3NnXejCDR/oNz+ayoc2KWau6wyCfQ37rqvOnQHxOfFpoQr
CYwo0n+44BIBf1vX8nM2Erjpt8Lx1I/RcH80soPpFYECHvV9cgFBMGhpbxg3
TO+vp7zFlqeDoHZxhOkqg/bLEbfKOpFcYF8obxBbIhBza4DbMQrkj8cXTnOS
aPo1bc/67mTYEuXXlCNI4mOHjQrZLM/B4Wzf3GlJem8kPPRu/5oPgWvLFCUO
kcgaMv/u/c4scBTcwsWvTGKOqFYY5ZUL7+KnH6Xp0v75zpZvLVMK0/yqTkZm
dJ6ntke6x+WDKwu7+gZHEi/HqNR9ZsuBhjlVeY4AEtfeW9mw8k4OfJSVLFkV
T+Lsp73Xp+i8tx43n8/KI/FD9AXGsRc5UB8nred4n+YV3l3GymerwPmh3mul
ZhK/PHvN/kic5gmxVKd1vbQ/68U+bs4qg2txE+rtn+g+qJcduG+RC5IOUUcd
p+n7blF8TjuLoUCvGQ3/kVh0cPHM++3psCIosluDm8Ln/YJn57Rj4NXOxoMj
wjQ/HPGcjUhJhPPtdneL91Donifxb/eFJDgzHHri+hHaD+HuMRJn42GLYgOL
tBrdJ+1HDF+o+ENp+uzsB30Ka/Z02smX+EPx7SgmzxsULg1N3AzX9AGjE/c2
67tQmEQ4prfu94OgYPlzksEUjl30cA0bCYAIob7qFUn0HhK9PKLT6AXqFc7K
TQW0f3pMqw6PeoLnPa9Z+4cUTkf+0Xkt5APmj9ZWmzyn8N5RhZ0z6/xAeo3c
8qW3dJ/4RCnER3qDeXfj9p8TND+4d3uVXnMH/fhuveYZCufdLXM2PXGD+o5j
RXdWMrDCd3N05yMPWDrbLabDy8D3uZUrGXQ/zPWa9HKKMPCl5f3Xb41twahN
L/nePgbiV5tguy2O0FbAX5N3lIE/FK88HbPzgd7SPa/CbxBovTTKo6KRSu+L
8khWVwJdUtW+COxNBlHuZW7VYDrveSryt/4XAqu4jgcuJRIY49ujI9kVBDzU
ySe6hQT25AtprhUMA7PvG2u8HxL43whbSIFVOKQcZd3E2UrzuG/1q91lgXCU
qc/5/VuaNxrmL87vCoH0ZsmpLxME7laPjMr4HQZDvUnNF34ROMhpYGT4IR9M
OAYMI1eSuLzvrMS/h/HgubD6mxwviba+Lr3MhVnQ9OIvBIqQmGXxfY9JcQGc
a3hyLm8fib3wfl+Haw48XU7p2Q4k7jC1kEsfpvOxSk+Z0CCRMr/wcnFDHhy6
lv6avEziLSpA4M2rQqi49qdVzYpERZ/zp/nE8sA6XNLN3YPWc02HB+NTFvAw
26SuCaf7YqBy/5mdubBtMuXBRBr9/rnVB3/tzgeyQ3X0dyl9v5bgUPuluxCz
LOBy8zGJl1qtHTbbVEKgXlV3WTvN66eLL/pcKQYey6Ob9QdJFNha4KMmXAZP
DcN2352ieXyp+/s/rXyodyxeePubRPOcPersj/Ih4f3IgUtsFOZYhAQ73kyF
T1Xz1yU2UMi+seRc7rt4mAhKKt8nTutz7HZnx85YeFGmdSVZjkJZIv6Dr3Yx
zP4e6u4+Qeezhc1zH0s/eLSkJ297nsI9akf5fpj6Qe5I3JVGEwr3GokeKKn1
hUEi6/SADYXv+3q6z1v7wdejrannfOj70n6ru5Z7w9mGxxUpURSeu+hVJc8f
AMd/5deoZ1KofNrknFWUBxhxqPuVVVBoG3I5aOKUN7SdbF070EDz9U2zmhzO
AOB6pcti2kXvLU6p/J4kb2hp7fh1cJjCYw37BYVf+oNcU+vcKQaF8rvUhupf
uoM/x3vTh38oFDfdwfRr2g2EnZ9Ez3AyUDcR9z7w9gK1rKTqNEEGTgZ6zIse
doC8AumU7xIMZPrFuxhY4wCn+hKUeA4xMGAh+IZ2B32+S6t4+DTtJ0mD4GcB
vvC0Xl1j1IxAXd2Wr/MLicAn1PWLw5FAomSe4+JkEpxsNl0VG0DgMy1L5mDX
ONh3209SN45AqnpWwG51BISF+p+6mkvgDVa9739Lw6B1JqO7+x6BxRUJQjsD
okHNL3gDZxOBfL/mAt7+ioWF6f3bv70m0GoxfOtfh3D4b2P3dqVRAi0EdU3c
yXBoM1McuzRN4GLl7LBnfRHIMjevHfpHYO65NuHliRTQz+hRieUiMe1H8zWT
FekwXfrUJ24LidVBX5b2KtwDU9Z2sTkpOm+VitQltxaAWGBu4A5Fek8FHzSS
mc0CzkmF0mVVEtO1zXQqT9L98bf1+fFLtF5PHNo8pVkA6kdEM3VukLjza+7B
VNdS+NWWNPHShUTjDIMvLzyz4LPbxynOYJo3PjgLdqzKAaa1Y5WzSSTqrrsf
/ZX2Y4XukKVaEYmOJtpa3c/zoOhlzpR1DYkxDoqvQ3MrwfuOf89sK833Du5b
HlXnAY/y15cP3pLIKF295q7PXeB1OdTQMEHidfYq8xN3CuDnbNpm8V/0ef3E
kKxnBSCc8lrBYCWFcRrXbx48mAq2m1s2KfJRaNa9mFZ4NR709Up/3tlO7/Hw
E1qVbnEQ/tgkKHs/ra9f+jwf89Mg88aBkE1I98ebZqtajIWbm0PTezQo/GK2
naPucwAUKj0v6bpM7yX7/oGUm/7wrGyj2G4rCj+4EyYym/xh5zFFAx0PCr/6
NnweSPWFm6IuTGNhFB7w8uNVb/QHC7YjD4tSaX8O5u9Mt/KEd5fGr9WU0Pct
2N26re4B25dyfMTrKPRkM5j+POYLdc0yBldf0v3xx9zxFd03rhbeC2cGKfQI
KvPknveAV21NYWlTND8bWTL/u+EBVhpvP9b/pnBj8ci/EwHewBBhTj/CRuv/
oMD7zNNuIPb7vuWCAAPbF7e9UnNwhE7FM/J/xRh44WxZWbO7PZx79fumsSwD
e0QeXA987QAzhw/se3acgZmqXO/ier3gc8qaswpWBMZPRSUbs6ZCokvELmZP
Wo/G3mahl7KA+VKi4MpwAoVyucPzhsLgfdmK8exUmgcen8hszgiCOBW2Q2ql
BAadEauzdg6HVVRMxv46AjvbIm/ezowB4o+3MGc7gfP3OXuuHgqGAG7H7rZB
Am1vsH5Kbw2Gf1b+5dFTBK6fXZT8czAKSKXZvLPzBOqlDiyq1MVCxLqv5SfY
SByzjL7APp8MORdORw8IkHhlSsRp+7kmiB9XYHLeQev/CZkc1lII6PDA+5ws
iRZ3puw3eGXBZacYoW0nSFT9eS22uyAbZN0dJ9+cJ3HVI+NllYwUmOq0G442
IZHvr0+EUFIGrIl48+2YLc3Pw0OvlWTovNeqWyftQ+IIsjJJtWTB4cCV6lzR
dB9U1BxeZZsPxxrOP36TRe+f+iePgj7ngwQ0aOdWkhiRlW+XeagaPA8Ec5g9
IbFrcrWTRkMRREh+eHX1Fb23Lj6oqz5YBlxR0VbLH2g/yp/QVk3Lg1vHPiXn
Mej+sfwnKv+rAAJ+P3gX8IdEq2XWi/rXcoBryzcp/dUUWn/LSO0NTAHNk3uq
+TfR+XxInavyWjxYPwowH5SkcOv8D23d7BhgzgD56MMU/vLb2SNjGAeqAb4C
/soU5spQ5bswAFYNi3fz6dL94KrSMK3nD5nepvyVZhT9eVr8r5b6wg9xyZsB
DhQGfrCWXqHhC9VHNN+rB1D4kmVVerS+P+zTXTY4H0dhyrTjREieD2wZ5Xr0
K4dC41VmbJLD3jD1sDYr+x7dV+9wac0Fb7CMJJKDn1G4xaLjqR+bNxgNuJeZ
vqb5W5TrfreUN3CLbZjeMUqh9GRWgoCqD6Q9bjf68Z1CXjKW06/YA5KaP5GV
/yhko96GNal5gPorj8BiLgamkprrCBlncDzjsXR0CwM/pNSpPfC2AVee9cuj
UgyaN0T/uvTag8KQ3Lon/9H87Lw2urzeG5SNrLcvqjJwrVwCW+6QH3xZV1t1
xoTAftEYmYGrAWCkJGvHbUPgS8bqDuXtyWAtdm2R4U2gKpkkpDmTBwVTsQ5t
kQSy6bjqDR6OgJ19MZU2GbT+GxqXLfVDQMnlVIVMBYG+9VnvbprHANm/l4+z
gUCGMPsBFecYGDP84sDaRaDjhIbEb8tAYGrawij+QKBHzwFqcW0wVI8EtZlS
BC7v0PT+tDcN/j4ssjj4h8A7GiF5+1mj4ZZl6zIbzQ8C9T/G3t5KBokz1ecK
NtJ7e/IBx3BvM7iO6Nw0kCBRuxFyWmi+vSK9l5Q4SCKTn/jrezFZEF3w1kzw
NInXYtIecFrmAvlnce6eDolhn127rssVwACn9leTazSvD9ZEmL3MgUtvrhbt
ciCx8orE6oLN+WCrXfiS3Z/ul73fhhtCcuDdct0UZxyJvzaneUgP5IFxoNqm
h7kktqaJZ9+KyQWfF7zVTvfoPohe/fHw3bsg3xS+TquJzvvBnh7zApofUldd
lXhNYmzyfy+2rygHhVQNu64Ruo9cRmO8c3Jh7sJZ5ZDvJEotH+3Te1kAym1e
fobLJCq/60mZcUuHzya+9Re46P0TcHpgRVkMlL5fwTG7hUKdTGULn8I4YOGq
fVwqReH6oiHPiqU4+LUgcsBVkcK5+v9WNwlHAGdLcMYpVdovbMUbdor5g+WD
Z22fLlKo4H6TtCr2g6tGFTUxFhRmpLHHrm/3gm8t3WsuOVPYobHB3OWDH/CM
54v/F0Tz7/U4b3bhQNAbcZEVTKRw+8mHGf/M6fxeIcz8PJ/eN+bpbbmRXiDw
yTEm6AGFdr8Pb9Y77gtvHFlCTFoo3GkBfzpUfOGDrImXUR/thx0pr99s9gKu
10eC2Gh+mNs4KeWb5AF94uq/W37S3+f72edZfz1hnzzf7pQVDDxSIKm98qo7
3BN9d+7WOgZGPRXSOtbkAt6HLA5zbWPg6VF9J0UVGxhfdXeiVZqBTTr77sX4
OMAyc1dSuhID92x/eFrM3Ae4ph0qcizoftjBWce8OxMm0meLVrkQeHJhasFY
IAmk6hPXGgYRyHPNiUOoPgI0xfmk+Wh+6H/86DRTfTBIxwpk6xcQ6HRYzdRC
NQw8rRU84h4Q+OhYttZOyXAI1BQX4nxO4AM5mQP1qTFg5b5b9FMfzQffrDeP
80ZAy8Y3jn/HCdzDmxR940sYvKvBUJ0ZAjnCR4y/Pi0EnRe9HDkrSHQp/bnp
JCTAg+1HTp5dRyKv3Scu87AceOW993XwNhIVPuu0zazOBx2NYy9qpUn8a6MR
/2ooB5K3bfEUPUqizRHOftHybKg7si77mzrNv3OCRztv5IJaRyEXM80P5qki
R4x35EHCJdYjGrfo/Fc9cmx9eBFoGQS8jXQn0foH08eg+GxovdK5d00YiZ/e
FOCB0RzYWCn1ayqVxH9hw1v6PfPhvZU0y1qaH3Yuel5bcfge6O1f6LOsIzEq
7AK5abACTphOcj95SftBmRyceFJI66mEzWaAxEQ52VrOmkqIM/2tUf2F5qMb
OQrOp/MhRMdsBTlH4pG+gEYJzXw4pJrmcGkVzbNiptGSRenQEkpd2LOewsmG
3SeuesdDk+Kw56kd9F5h3H73yjIFnKfjLVJlKVQpS3jJV1AEWfw2jWPHKRy4
UZ349UYMFPjv6Ak+R+Gmcu8Jpvf+YPrbSKbJmEKRmXAx95e+EDvUuMywpvDJ
ve+Hdpv4gvvT8dDz3hRqiOYdPrXdB/rW7/Yri6Tw1NfGD+PhfrDmkerBaxkU
prvzTQaPecCy4cx/leV0P8iOc02y+MBlu4YSqp5Cp+1Xu3+5+YNLqPrQ1U4K
q142tSY2eIPt93kHxQ+0v0dYzuhX+cGH5pMGBhSFN8eMeYSeuMNyysWVtYv0
3nqhmO7b4AIxY5H8q2h+aGziKXA38YAVjplj9zcy8L89Vdc2tNjD3jXyzDM7
GbgmnOhUWrCHl7zfg8UOMvAjg2urIr8LnJfgDH13iu6H6jMT8hy+8IcpUXru
GoH//Niqs61iYPs3fq7VDgTmi/Q2eYomg7r18sp8fwJl+q57OMbGg9ud8723
YgkMX5wf6BOMgNIDFyTMcgj0E1ERq6RC4KP90/jxuwS2f8wv3HcjFg7Flazn
fEbn/bfS7kbuaJC4Fdz5s4fAz1YzVe3GkWByy/nu+U8EvtpolW4rHQ4tqpPF
ht8JXLnl5NYOohgknzQ8YiwTOFV+7eVqzmSIfsGcU7KWxD3LF4LyilLhj+mP
dUmb6b0UIfc3a74JzBPVkjlpfrj6xJkIasyHpcIdsuL/0f6IieB/45ENO2xn
VrLQ/GA5IDJnSOZDytXXK/T16X5YI/5QcjAf5A/sEbhoQeK2IHaPU5xF8C7x
l9KwM4kdVo5y0sFZkDZ02J0ziPZLjn3R2aM5MP/O7ttCIolCZKiwZWABZCw2
RBoXkggPtAp56Hy/tRRwwvYhiaHZYXe2ZVeCUuwjHnaaH/wtGO2rtfOB54ne
g84+mtdPW0/uvHgfvnjljj4dJzHZetQkeG0hPH17cYfCDIllE1lXaksL4ClH
hLvBCgp/1jIqLrplg87vh+zIS6GRfa/T7udxcHDNdHO6CIUxFja+cD0elP4V
xOTuo/ePQM+k4ZF0ULnz0nkv0H5QOF9543Ms6OXpHpxSp7Dt5JZXHk6BYK4T
7fHakObbqyfiax8Gglu6/Pujt+j9//rG1sHfvvCw6aKarjuF+zg088oafeGn
+1TfTCiF+S52opbt/iDTOSb3JIXCQkxOadjkDfZVQcJ1xRTWtrpXN3l7wCPJ
FGGFRxTa55XzvXzuB+I+kjJX2yjsXKEnf0kyEHbGlLuqD1D4JyNkS2cGfb4d
f979Quu/vlGQSvcA4tN5j8Y5CqmG0JCIQB8wCnu9VXMVA++Oxq2OMnGDoc66
FB6aHwoz5iouzTiBTo5GOhPND9GHSBWuWnt4t0azxuEAA+drLt1ds98JJOKp
dXXHGCjL9t5RudIbREYu7NG4RaDElFlErWw6FJx9d3yFB4EPbVUcLTUzgJN9
/waBMALF7OxlnDRCQfx5b2htCoHGs41vdj8Ogvs/3wlqlNB8wcPh8mhNBAhb
VpuefETgvjN7pY3eRtPv52zhfElg3Xj5gXOMMKgO7XLpGiBQy9rhc74+fV/L
HsXCL/R7hqGlaqwR8Fk0w1LjN91HQgaxnrTe/bq/XNRdRSJ7jINMVXYyDHo4
T33nJ5H/iLnmyUv1kJV2M8pNjESN+7fm7lB5cIrt0KzZARIzDP443TbNAvlk
/rZtx2ne7XRebb4vEzQ4pJUGz9F6/P54XWZDFizJeAoVGZNILTsu9PFkwy+/
YdOTNiQevliSI3QiFzq3rbc85k1i8RWj+0dmMuHbxOXRtVF0v9w6kSKhngcK
dyYX+jNJFLPWYzyj9+TG8Szn2gqaT/qqs7JC7sJxM8tr1xtJPF33/d0GtxJQ
k1vH7dhFfx+vwaKQBZof2P5eFKD5YfeGrmIl9VI4dka1sZAiseXomgTx8nw4
1287krxIYpzBCqbLAzlQFVZipc9J52saNTwM6SC7bVu2oBCFqq2TD7W4kuDs
rfbD3yUovP1OFXgdY+DeqD/EHqKQKd+7uvFwCsxlb2RJPE0hi/HxM5fb/GHG
dMZ8tw6Fr5oGN1bx+YNR0r4v965RGBUZUBH+2hdKN5zenmJP8/jcbXXOSV84
1nirQ8Ofwr6eIueLGb5QU3Vr/7VYCi9vSppoZtA8ml99aDXND9od/PvXnfCD
wNWXL+bdpflihey1jVresLLhk3z6UwrFHhzphyAf6Iy38zXtofCCxbfbcro+
UK92wmbXJwptv9nc47Wj32s407qK5ocIdr1beqOewKd9JfjuMoUjl7zOWNz2
hqZD6hz1axmYxnLk8qatLiC11X+X7mYGKvspLDTq2wCL4+Zrk7sZeLHUvlhC
wwEaNkYYvFFgIFEcUMDH6QOejyVYZlQY+BBF3Q2K/MAmeOf0VlMCf5+u9Vml
4APHEvJgrR2BcPz+4sDDRLjcvv9fmy+BbntubtOsofOsdkY0NZrAP6f2idVK
RQDhN0PdzKL3Ts2q0wNFgcDltHL76ioCv/FM6/zjigKehwx+zic0f1zi2vye
Nxr8rx0SWXpF4NGrFlFcEcFwb0PHK8+PBLbm3CphLQuGeoGDh42/EjjDuSFn
xL0A+P67v473L4G3WlS9+09Hwj9BU83B1SSm1Uv93VuYArz952QyhUi8N/7x
y7vyVrB+rOV7YBeJKQmVOzZNF0AFJRm58zCJCdbTh/NGMuFSmOkDrjMkrrk/
vjtjJAeapD+7B+qR2DO4TfWRWwWwb0Xmy9dJfNV1jWuldAEkyZXNrHQiMX5d
XLy9UTawJ03ncASSePTxmonbajnw+UbizRUJtN8+Kl54UlQA3hDwNjSfxHBP
FdZQxTz4bay2ZF9NYsBzg0nh45VQVyIaLdVC4sSuEl70KQDecumwxV7av0VF
dbvTyiEq3GXXi1ESr6+ZeTSmnwsG8W/kTX7QfdFgYr89pwhYiFVMhkw0P3NN
uFivzwDh8rQxFR4KH1wQOfNQLQZ+2LmYvdxKYdwdlo+UUA7kBEoXFu6lMEH3
6br/dudAxtNZ7QtKFGqqNc8caYiDfdXTNzacpVB/RlrvRYI/kAGSooOXaL5u
eiJhmRgA3z1tz1jcpPf//q+f1xX4QG9znNRFVwodH244c1fWD5j3vfDYEEIh
o5p/Uonmjefae+UYSRQqX7hg/83JG6ouvol8UkjztRW/zT5zD/jiH6RnXEOh
1NZX8bV0/i/9Wf/RpJVCmZIVRnVM/uA7zuah+46+P6h0T/wLWu9dRxs+TNJ/
b/vR7V3pDiMrteqe/aKQOzrQ46GRBygb2+5wYGHguvmwdb5cnnDKuW1OiY+B
M2N6h6weuYLlLYObbNsZKJm541TSbTv4EMyknrGfgX2Sgz++1DpCrKrB21Jg
4GDVcR8rUR9IvD751fkmvWemt5iNLaRA6+w1RxY3An86aeyKvJwCQiamvIdD
CNwoGRNayRcCj2dthyeTaH0a30787B4MP445Dl8oIvDM3JYdc+dDQd3q97Rl
DYGvDx8pdfkVARV7JzZxvqD7hOlbbA1PKPD4u796947AF+pnigKEg8DRyvti
7ySBW8an/wZdCIePX7//OTdLYEp7gsSLjDy4pTp8152FxBwNL3i8PwFO9wwl
CPORqJQZaWIxnw01XF1VvttJXHE5ueFIbCGo7z7yMXI/vVc8XggseWXD1IeN
otuR3lcxfop62rkQIJr1fVyTRGZX1mExx1wQ+xcT13eFRI6Gj28kNxVA6+0f
miq3ab9cVoi1W50LEY1d2yw8Sfz8W+4i68os0M8RYF8bQeKBb+c/kcm5ILGJ
w+lTOn2eQ+7Sc8t8WJQwbxwro98/J+Jv1l4FXR0yW27Ukziz1VNNP7oc2tTc
IlM6SDzB4iIdcqoYeGbf7Ds+RKKwarjfz7MVQOmIsFUQJH7nv/PjdV4BfEtg
TD+bJ5GhKX3R/GQ+/Lop+lOfncL+6392Ks2kwNJbVjfRjRTm5MqqZ7cnANvb
8x+EdlJ4tvH0OYHrobDeYq12ojy9r1r2Gv4KLQCV9ydG609S+GO35JzaMX/o
tA9L079A4YT5ZiGw9IOxF21hdVcp5HOb/fTOzQ+2LvhGNdvS9y0HCMt9C4LL
T4pKtXzpvfXGN2lljg+0XlUbCoqmsIttnU9BoS+4SjMdOpRFYQD/QfN2JS9o
qi5qL66k0Dosc1J3gzfs39ht3dJI4ZUC3enrMr6Qw2O81/QVhRbhadOb+rxh
Q0aG3YGPFB69/JUrbNEPIp6ejt7/lcLkM6qG26zdgcPZoLV6id5XzMsbXVa7
Q8na71yjqxmY0G1wPaTNFRLaowMDhBjYv/PsvO8VexBCyQMMSQZy6/zS8Il2
guZ4pZk/hxi4L8Fob4uPB0zZJL+YUGaghPIN7vASP/B3XnW78zqBBSGizE/n
U4DlVMB7dicCudaUWt1fSgTF9R3sPoEERmV0XInbGA+fde57QzyB/xlYv4r8
Fg63xqtNjfIINH8s+zL4TihU2Hpw1N8nMJNT8kKbYBQY2Zpv5Gym+fmuqUXl
9Uhotx9yInoJ/ChbKbjJPxT4m3fESYwRuIFPaHOCYhR0+sQK6f8gcMzuVqpG
XRHA8TbjF0wkBm7/2ivOkQCiDpkzbtwk2oUhp/KqfJj4GfkjSpjEy+dYa5T5
qsDI7nTV6B4SF++cr7pJ61vVVGRQ7AiJg9GbNqn6ZsO0ru+5BTUSc1eVEacs
csA2sT5ojwGJ7bqrzcMc8sHstKDkhZsksslYPOLSLge+RcWQh64kbikatLBf
mwX7tvhprw6h+Tvyw62zBN0XxzVtfiSTuLHUrWJrWwE0VM+dOVhMYtN/01/a
thTBWMKTsNu1JObNbfiy0q4Smtw0osZfkLg++uBTOE737WufjxnvSPzmDavF
ZKpAybYrqW6SxFvSNWb3OQpBbP0nPt5ZEl+UOqqIJRaB+y6BhUssFEofZs8v
25MBEfh670F+Ctf74J5y/3hwzzMTsRWl/RHN0dYyFAcfnIQ9M2UoNH+ib2c6
kAW/zqansh+jMESLs/SuSRx4xjWufKRJYcX20JTL9wPgs/hC/8srFDZs/MOl
PeoHbPWLlutv0/c/HHDLZfaHpGfCltqetB83yHZ6p/rBxEsOqZ5wCmezLsbM
LvlD1rFE+Zg0Cj9zCXIt2LnDITal8upSCo+Uay8dPOsFYa9KJ3gf0/pPvXj5
WLwvaKxSDLzaTmGanCvXi0I/6ITzzieHKHy8msnveKM3SLw4vvMOQfN1Tv2L
13Pu8KtBBx7P03tOxjuKt9oDnGv2Ce1mZ2DQHTPxFlM3sBIpVxpbT/OxxdYd
0lEOcKz/WPfCDgZuVZH8mbXTHrojM7edlWOglZS4rqCcAzR+dFVvO8HA3PLR
m/tv+kCpTovljtu0fp1D0pujEiAo/9Q6Ji8CxVW1TV4ezob58r+bfoQTKNfC
yK34GA5RcTIKoWl0P1xb3i/+Khgccg7qnCkjsDuowvpzXQx8s7AZ2PKYwJf/
8Y4Wj0XDEnllK2cHgcWjr50cnweBTqzwjpYhAvmCR84WbgiFAcH3wu4Egeh6
+or/Hfr8RbVh1QX6vtyFrWm9MZB8/iezDDuJj/95togXJ8PN3esVnq2n8/MH
+4LYkyYI2cVpbS9OYtVkyEnLR4WgOC6zRkmOxE9VcisLBLMhQJvn1taTNC/L
124b+Z4Dgt8bwl5dIPGUh6zW+Tf50GdmkeV2lUSb7I/+mW/yQCzppTPY0fn9
YM5cWaoAOPwu12zyJXHvZ1cb1M0G/51FdVwxNK+4q+ec5cwDlZln7t3ZJO70
bKhUUMyHg+mDMhFVJErtbnd+n3sPHjEVlJs+JVFmQyrL0qcC6NlSGKHVTeJv
HJZ/10Tzg6C435dheh/JSJa0deVA0n8ODtlf6f5zif7w+1Yh1G5Y6LJZIpFp
mI91TDIHLMv3UxfX0PpSeOwtuhQPljcUXnBvpvPXXadyrjAOYlkxsXkXhUL8
rN3Je2JBU39pd6QChbqo8LeTCoMsc4a4zRkKeUsPZbu+9wchbX25JV0KXf2u
zhidDICP5klYep1CDsuaxs90Xh6UX11t7UghZ4f1Vg01mn8bZKizgRQ6KCgz
+R8JhqK/EUEYT+8jRkgP22cfuLDZ4vDHXJq3Y7/c+ibsBSomfFMZ9+k+0vR8
xGvsDW+Nfy45NNF7qUP7cg6nN8wKBb4z7aX95vLhpo+tB5j8IaxExug+qj+5
KtLFG+Yeqf55P03h05ae1KwSDxCWMVGrYKL3/mTezYMPaH6+Wr4ykZuBKe9n
i1OH3OCpneMrCWEG1hT29f+4bQPTJdyJH/cw8M+O/nfmQQ7wMHX4eYkiA723
CIUXHPEAPtZaYD7LQJ90cHIO8QcW2Q/b+owJXJFamCab5Q/mEgP/Iq0J5Gga
7O3Zmgy/FvcvOHgTqMwv6l9yJg86fv15eT6SwHsaBi6dmhEgX+S6bSadwK+S
AyxFIyHQflg3ur6cQJvNY/xqxxPAyOgJb0g9ga6GpdV3a2JgYRNfx51OAtMV
3N9+eR0AcZa292U/EEgob+FgehsOMucMyyZJAk8mO3W9bY2HeYGCJ08XCYyr
OqoRqh4N7MxXSmI5aH2WxGpb6SVDRX6nkMRGmj9vP1jhvaUZ3CWS8j/vpP2y
KmLRZCkf1OA7FMuTyNsHp71bs0D4636+tFMknj8rUplxKRd+7fUWUNIh8aeU
rHH+mQLoZNWXmDCl833J++9GjWzorIvWrrYncXIOpAS886GLRTs2yI/mF1nd
LEPBHOgdX8keHkti1PWu8bI1eTCk21gGuSQ6VW/zHL6dBxNGLCbzd2m+0N9T
Vt59FwSUi/YPPSNR9JHjbEpqPsTo1A/c76HPRxjYOx0shzzhAFaNERKPS564
LZGdC8MtpWr830n0XmJZK+hSAIJMl/OG/5Jodnw4krEuC/R6/sj0r6WwVYi9
vs4oFlLk8n94baH52bKYVeZ5HAxLDz2VkqIwcMXEYPPhODjDfqtkpSKFX6Sc
xQ88CwMmduubvSoUbuHLtpBU8we1ZzvvmVyk/SMXmnie3k9P9Y7wbbGgcN6B
q4BTzgfkAz76v3eisODDyK6ibj/oixzmablD4eiaE0sCxgFQ/0zNPi+Bws2c
5YOCY97wX7m14al8Ck1PeB3uvOoFnxx/GvE+oHBNIouQwXtvCHr7z36smUKN
T++ox7+94cDL+Sdjb+j+4Jys85b0gFGtvwox4xQ6cWmEBSl4Qszt8NaTP+nP
v9VHV7nXE27cdLMUXcHAVUfX7FV3d4OwiEFinoeBumu5r7Gsd4WTNxmMyK0M
tLjCo8ksaQNi4oacWtIMPNZtInqLxwGSpIs5hJQY6NX8RWUT3UdSvCnCeywI
rP/9TDOFOxMYd5Ll7jgT+PSu9IShbSJUxZiu+XyHwKHLu11nkmPBUcbNLyPh
//neLav6NgSUrv9d9yGfwOB2SFy/GAqc+1WNhB8QWP087YTXvwhYGngoGNJC
YFhN9ePzmxMhQEHX2aSPwNNcKlpmfeGg17xTKWicwFBtk8sD98Lhwq71t/t/
EpjUVJo52VAEmuI9V3avoPn1y34L8mM8aNa8nR7gofdGZlnxb/k8uDB8Knn1
NjpP935bUaxeCHpJfszHpUl09Nw1dbgpFwL3f+zLVSLx0AbkNivLBmX/W2dt
1Emc79gUyk5lg86y1J4wQxIjQ4QLlRZyIUSH07nHkkTbA4bKYw0l0HT8vq+g
O4nXNMaVW0ezYRu363xoKIkeDstVO+7kAH+cA9/NVNpP3BGJUy/y4QJkxyf+
//8fnHKLmX3vQV076fv1Ed0PMve/sA1XgBj5T1r5JYkGTc+7WbMKICrDyGOp
n+aNpE3ntTiqYPmL1JjcFxIzZVd8Yk/IB+vWllX2cyRS/WyS7YN5dF+5Jrxn
pbAsVEdVbSId5BdMOyoFaP3VLvL6r0+AqgSv66/F6H2dMJBmNZIMWry1Vptl
6T1/1dVTX7EQZrfXy1kep3DrAav8qOZ4SGtbnS5wjsK6bZ4jN80C4MTKF5tO
GFMYa8scJa7kB9O9Z/WdrClcfMUmdfi6LzR7/1zZ50XhqbSJusBCH0hqNrkl
F0nhJ9FP//Jj/cEmVdhpOp3CbOJwq2SFB6ixn0raV07hlJr48G70gV2ch10c
6ilMaYud9/3jB3vJM8/HOyi8nnBn6GunN7T5RT5sfE/3ydY3FbwTvlB5gpX7
C0nvKTWx3LdR7lA/ntR7aJHC3rvbJf9b5wKdG+a1IzkYWIWKHexJ7jD8Kcfl
6EYGXvi3+s0IqwPMKD2qtt/JwPjPaho7/toDp0xqZYU8A7XsYffj+07wTfvz
n3OnGNhrM1cdF+YLG0UfZ3pfI1CwiVXzhkM47BqoTQm1J/DL6nw1FYMk6D3V
sWKvP83XY2awmJYAWbGPxRdiCOwT4N/ZIRwBdWyKyV+yCVSzuta3yyMYbsi9
dr51l0DPmU2GzwyioWLzf+tDnhIYNJ5Efq6MgqO7H4g49BBozz22MbopHOY2
dDl/HCFwwFm87fflMDjW+Cj84zcCXbSF7A1vFYOY8GNux2WaXwaKbhjfiAMp
g5Sz8mvpPZ/57G2eYhp4P+MYEtxMIo8e0SK/7wXc+BT+Jm43iWcu1o5JD+fD
VO3nkAIFEg15DEw38ufBvVqNqkAVEgN829MOHsmHvAQdkcmLJK5li9xfrVsA
u/bKaA6Zk9hXqbOuViYfTnltZ5g5k3j6Md/JT+lZ8Dv4y8mQOySKnN8wYWeQ
A78e1691T6R5OnJMOdG0ANZ3SoswCuj8ntlzt9QsB3rinX7+fEDzyXfWsOy7
lbBFsG9f9HMSN414Tj7+mQ9Rrly79fpI1El3OOj68S6cWzlod2ycRN+6mW/7
B/Kh8GStZMtPErfZ64VfnyiAaLRM/8BM4aGv9f+yr+RDm+k+r+Z1FApny7Gs
l44DcbOYMgkRev/ffTBt/DceNoi8TBTbR/Ov5PfLxGAGZMbzT9ccpfBhi8+a
iaEYUJ86wmKvTmHpv02C32MDQNnkt9l5Q5o/zu8NLvO9AwPxz+XbLWl95z46
ts/aF/76mrf0u9F90HicpeaPLzyU3PbEPZTCudkkBxs+f0iseOCgkkLv+4CP
w5d0vaFZ/73rf8UU6vRRnZNrPcH/qcDX5loK7zPFzPTP+sKHEbEt4y9onncv
qdpgEAie4ice9/RTOEkkGxts9gFlVeZ8xS8UDpu2ZlUkeECBZKza0Tl6jynP
+ilk+EDKs8PGg6wM5C12MecQdocHBxv3p/EzcKTjapLdlDNsftur6StK7yMT
oUvOrvawUWrpwz8ZBnJZv33yQZHm66YXvvLHGMjH7z8mwuIDSswu6YOWBLo9
5BY160yHioOuPb7uNE/P8cbh5XSI+PhXICOUwFTWwszQ9yGg+lrh0/EUAmXT
76l9iwiGptbGkJ5iAs//94GPqAuHEqnnp7trCcxJ0lwtdTYa1OJltoS0Ebin
PTzo/rN46Diz8EpjgMA1mVEPTrCHQZ2V70qZLwRKqMQf4NkXDqYJtpo9cwTy
+KgfM+rLAs+9k5WfWOn85LqU+ac/Cex518W58ZNYdGsHYfvwPogv+On9FSXx
onrzO+jLA2VNF+kfMiQ+62k1d7mRBdtL3gpnHyPxXkiW/gqVdPigEUpeOkfv
j+pZYV3DXFhltvLwAWMSa2+7aWXy5cCU51hmqzWJs2+3bxBgyQVF9hOCnV4k
CrdpXlwUyYQzcWtKwyNJ3NMoO26ingvylnsF9TPp98RDhdbTfBxVzct5vII+
//7ZqZ59d6HgnyHfVAP9+c/PFo8rlNKhtFv6XyfN85ICJ/TWVkBE073urPck
alVs6ArYVwFlnd6akhSJ1qW/PQdsCuDw6dfjooskyk3nJbYa5IJPS1DkEAet
zwkJltFf6VAQnrwhTZDCviNsGa1vEkHxheV2VwkKo3eKc79QiYbQlYUn+Q9R
KFLpRQoUp4Fq1VW3badpHp7heFGp4g9k0aBcjTaFK7/lqmj99gM6IHpkr1H4
rNSlUnKdP7DzvPMQs6dQQsJk39laPwj2dD/e40dhkfj9sxtpHnY1zN/0LYb2
z2O1r9O+XqAadMc5IZvCa9e+j3Wm+8LbB1UPdtylMMzyfumzy97w6rwB686n
FLrfkJAOovPY95fVrYluChVGHhXN2/oA3+jQ3bIRCq9k3gjkXe8PAkocLtHf
KPxbdfJwzR8v6EnP0JNZpjAhcEmk7pA3LN16qHJyLc0Ley0/DOu6wKqQO8/G
NjGQhzXjeEW0DbQXZW68vpv2i81Jz8eTDrB8UMHXUIGBm3mE2comvGEjweJw
W4WBzS8m/Xnr/SCiVNWo5CqB2n5Wt+GaN6h4K3eF29L7/uZac5OdSTCWtfxX
y5fe976eBUwd+SDfcslZPJpAXU9Fp3ecETCv+97gayaBsbpqMnKr70DKQX7W
+EoC+f36Sza8iYRAJQ/+kEYCk9dalSi7R0OaqKmj5ysCjTbxPnyyMhhONW1N
4PhI4DSv6S6zpiBQCFq9ZYxBIPd3kZmD0vnAlVJ1PXWJQJUmK++/a6IgpWLp
j+lqEpeUgzZRCimQdODm4jYhEtnYdnIn1j8HW5bY+gZJEsveD8hKRhVAyhI5
WXiI3lej+897F2TCVO9T42hlmqc3uzBE9uVCp8nN1HV69F6yl+r1DaiEJcFT
iiNmdF9c39Vw/jDN01uGssIdSSy0qXNP8soGk9MZlsEBJMaqfdFaczsHxjQ+
hfjHk5hwTkvvlXYhzK/7bbY+n0RlmZngkIhc0P9zpGT2Ponu9gNv+r9VQvI+
pbsPmmk+ANuTe2xpfjCfZA7sJfHWWMTPM65lsMhTWa88SqJzoNCViZ25cIxV
5j/GNIk+rS1TxGwRvN02uW34H81PkVf21fimQ5TQ+otd3BTm7xuRbFSNgU9d
mzQubKX1Vd6sd2AqHVyLtMok9tJ8kXthnZZ2Bvx6BV3DRyjc9vTO0p/+RBCf
f3cwV43CGa58kQ5/f2iPjlxz6RKFSdxdPHH8AaDmxJw/c4NCnudJ3jEvfUDQ
Pzdv0IXmk+vdTpP9vtDyYfl6VjCF+q+FDV+H+cOuQ8wOTkkUHrvP/DNstzf8
WynOgEIKDe4kRVnu8IR7m1h2Ug8pzGTRFwho8YJ7+rwvx57Te+rGx929n31h
wCmjYfAthU9SxHfZ+nhDvPq/29cnKWR/073887Y7pKlFBR/7ReGuz8lR8bfd
wDdhyGx5JQN/ObVapezxBJHxjvB2Xgb2eLIr56Ar7M8aEQ4WYaDd5KWR2ilb
EC4us5PYz8B7+kMvzxo6wl6XQ6ckgIEflPeoz7P5QHUwx+WVNwmUOh5w5/Pa
VHg1wrEywJXA2rCDURppyZBxaP+6pmACI7/ZXjf/FwyfmN/vt0ki8NzrKxul
dwQD04bL6u8KCdyQ37q993UoDO1l75t7SOAFVGg5tRQOYjX2m0JaCSxSYHh9
MA4EiWNFohff0X5Rn8k7tTUYOAXfbjOcJLB/I7zgEw8HA6OWkTe/CFwMX+fu
P5cH5iVDbKtYSGzkz/bd+l88jJnaHSvhpfPdV/6N90gWKN6cdGbZTiLLxATz
h2maN+w9NwrtJ1Hd+pSX66kc6Ps66JIDJEq6zdW6JucA742lVDNNEgPjhPWv
/86FvTIb71+5Qu+rRQfjuxOFUHdjLrTDisS876duNSfmwr/8P10/PUj07PiW
aGOVBQ+0ml+HhZN4TOOYgpVuLogxnUswSSdR++3DPXnr88F2cVDjVhmJ0RMF
r1d8qoJ918Q6yMckjt6VY9G/UwGFvfGVoh0kKnIoTwSdKYaoquCCV4P03gsw
+mv2vQx0hnSSpQm6DxzuZ6xgL4C3q1RnVefp320/tXbT/P08l5nvPRuFLdqh
3FyMFLA67vUjfwOFlxqC/m3yS4C5vXMt+eIUOv/ZcW29SCh8C5HW3yhP4XuD
c49vShVBFhGpd+okheaqXYbX+/2gqdbW4vP/mDrveCr/949LslKIJCFRQkSy
knRdEhlFaUglIRUqW2Qce4/slb3JLkpRqCSETwqJQnLf90l7GOl3f//7/Xk/
jnPO+9TrdV3PJ90yo5DV8Af/RRH6+r/tHlo2FGpf5okE+trnKz/zoAuFSZe2
eeoqhkKxf6PUQACFazA1uTSHAZF8wR38NyisnbrSp5kcDGP8/3m259D87/V5
OlXTF/jPLkhvq6Z9nfT7ViBBz/Mqw72HWv7ny+NmIdlBYH719PqpHpqf2pkS
/4IYcEVZteH2WwqjHlQ0XDMJBmvk0L3PpM9Xblk77OUDTx5mJqsuUvhs0/Gd
UqM+MKVzwtR+JRPtbWNVnT77grNqshi/CBPvylXVrSlxh3HXyunLsky8vtFk
T3GwB7DdJoVDNZio0srXIFPlA0E57hrnDjCR36pRdz9vEORnyI0fv0Agk3/b
L+bPdOBRkr0Y4UHgwoYnT+e90uAhM5WDO5TA5NCZfdkeSbDSZsPg8yR6H3Du
dFn2NwZ8GrMG3xcQ+Nn+jDzBHg2aO2OZ++vpPIuLrw2SjYNX83/WRbYRuGLP
UusFKgEmlNl7HAYI3NIt/cDwQBSUXvY+Vf+eQO3gZoP8hVgw/HFhaeQLQftO
MDtffSlo5j9uNGUhUdBNofxATyq0cGnkcPCSyN16I/t+ex7Ym5TeXSNO4sFo
XcETMrVgfT+cdFAgMfzn6OetAcWg4T6hWKRF4ozpVLfn2TzwzR5bum5MIlMt
SFHpWQH4dGFJ0ykS+zhS3L0LisFCR9x20J7E5D+WeQfrKiH4vb06eJPIKpUp
I66XC1HdShujIujrC21ZEsw8YJNJj3dNp33dcl0u+91iUAu9+OZRKYlVP51c
Uu4Uwn6lWs0vjSQKr/RRz66uhrxl9jWOT0lcrbCRr2iuEOKj1Y/KvaL7NzM1
/epuDZT+ZN2m9YH2k8aF6BUZxbAyVFs46weJ8svD7K0rS+Cg9ff1o8tpHpda
qd68/SawVBsW3RWg8ysjfl7OLRkclji5/0pSeLk0a0Z2WxI0pEOQhDKdn3On
7+kH3ATD0zNrEpCe72vkWDVLE8FtqLBP15TCI1p//z2yCIEnymcfGZ2l8Iuq
L7vx0SCwbYjozL1C80rl3RZ20WB4F6AwNehL4UTPteHKDUFQ6oFCJ2MoZNyr
tNO1Cwa2LfYeYlkUFqukh4nw+kJYbTyXWgWFN49d4Y2q8IUT57fWZ92j8NCW
v/pTBYHAdl7defIZ3c8057YuxyCQGiSang5TWCB5LdahxA8W9JeP8BMUBgck
2c4o+UItewqv1h8KE4SuP5RyoPcLM+1UAwcTd8T+d+iG3XUwiK4ZvCzERPXm
NO0ywh04uJ8EXt/CxOiZ5Jh8FjfgqzbSe63CROHBA7J9x93BnOdEq64uE5cu
ulF7ymmfvzYzWn2FQI76mMw1z9MgPo68yfjf/Q//eNZwvsoFn+AuEe8Yej9k
5hJHr8TAndyMWKEsAtMqXkx8WQqHYI+NT7sqCOw4+s4urjkevOUCm0vuEZjh
eezlKkwAF9cv4pFdtI9UJym174+AK4cNvfVGCBSpzVTFkXBw7FCcZifoPmnk
dbSevQGO3RKPuv8QKHFuZn7RNwGS6j6faOYgsXw2NdKZSAf2h1UfjIVIPPIh
MzP5ThvwhUlq/NpC7w9f2QqvRyWgLe+m16lComKo8Zq51lxwsetvz9ElUff1
fT3HxnwoVhXZdfgoiR8kdX0/NObBWPpsC7sNiYMNg49Y3+WBcGJv/SMXeh5/
3bLYE14M3vbRtkUBdN9Ck2Qub6W//tWx4NgbJP6pMvPTqSkEvSHurMN5JF6N
mtJPKSiCmitGHcI1JOIO6XZZkwYQzUg99aGVRKWDE7wxrSVQXfCoaqSXxOKq
Lmdxt0qIffnmj8tbEs813PnHdbsAWFvLOaQ+kfhKSDVcvK0EssNODCwskOjM
kWEvfTAf9nzg5RlZSWH34uSXin+pMPa6fk/CBppnZO0Te4gkCDw76X9IjsJh
9n3BK+8lgIyP+A4+TQqvq75VnSuPh18e6tnzByj0rM202786BPjSgTX8BN2n
lLmmisfB0OK2JKdwgULV+MXUypIgSNqewbvgTqFX+mq3P0OBcNkXbXpDKEzk
+O/Nrq5QcCx/4tKVRKHzLMPC4HEANC3t9rpUQM9/psUl26v+kM5jpytRT+Ee
NZWPlCsDcv9cfv7vEYWm9jfUpjgZUO4V8Giqn3698xuV9Uk/aIpjVBe8p/ef
F3DsFA6AZ5orq+y+0Dy4h+fSU3dfeOOdt0GRhYmWF/csLjJ8QDB97X4JXiZu
sCk408buDZljXucbxJjo6XI+ryPaGW6/TTC0UmAiT3vbaNFBd/hzL4JS0WLi
19CM14xT/lClnFTra0z7de5cdKwuzYufE6HVmkD2DnP5qLvBYH40fjrWmcCl
r6tPcW1IB+bBtAWbAAKHij48uxRVBIzRbZv2xBM48uth/c/VsSDMUqH9JZvA
K9vkfI5vjYC6JtXnpVUEcva+ffRGIgbcTLIFIh8QePadbe2ERgJ05TRLBPUQ
WNgoeGbZzTBwXPds88a3BPLz199bmAoDtcsNU5MUgXrRLx32COYBq3mFQNUC
gS49PljwJB4GXiuY+XCT+O2oPqdHdjpcS1m7Y0CGxPvu3w2kg2heEb+cWKpO
4uNPzXkWdrnAZuV1L0Wf9oE3vyQW3AvgXaf70NYTJNrbT3pajhfDFK9p3fvz
JF50IwyuBBUCSaku5LrT/u1911ovoQCEi+f+hQeTuPtJo9Hr6HwYWe/yLDyJ
xK9w/uz8syKYaRiJ2FZI4toQ+Y6/Dfkgvn0T++86El1aszg2/ayBE1quX5+2
kWjm1OyjaU/7wrjpp6x+Ep8O+yhQLyqhb53Ie6N3NI8987szVFAAfB9m97HQ
vnCwce2PC39KwDM+z/rtEt2/0PMuF0xugttPTr2B1TQ/WLex6Z5PgPsBVhL2
4hRWDnzs7otIAnlm8h05BQrftvQ+kohPgWzqVfMXLQpHv1t4mFXcAEFGQf89
IzpfIa/S2vmCIbrs1LilBYU7lp2uylUKBvaLG09z0r5gFWTFl+zNgBK2R0kj
12h/Fg8OUagIAmO1K1p14TTft02xLYyEwvfF4h8xqRSeY/V/2jXuDzfNnxfu
K6bnvWjA/Ssa/mBosNC+dJv2l4bHpY7HA0FcmCtnooP2acEUScE9QRCa+1x7
7CWFv/O2ugmEM2C3qd+gzxT9eQwtXgn984F1Y6tldL9TaH9ca8K10Bd+sVQQ
fLQvXIpxqV/a7wuvmwaa3/MzMcBNeg/jihc0r5gOiZZgIufWsM1cr5wh/yNb
q5YSE1/4cxmkv3UHm5dftm7aS/OS0g3lnvEA+NJzWFvYnkBWfo8PW/bchNH6
w6KhXgR2QT6vXVMalH7oWv0ynMAdu8/WmXhFwjaRipGwVAKVmQUWt/PDQaJV
QWm4mMBOTVEDqyPR8K1aNoOb9oX5+Jefpo1igK8zWSTyMYED63O7pnoj4XjL
v54zgwQqDqk0fxKPBqUrftUuU3Tep79rq81Gg/n+yyWD3wm8fkJg88/2Yjh9
cbBeeDmJsyabZDerpIBIbGH6I34SefUF3Ybe58KBzUJcnJtINLeNyIg4XQhH
2ZfFbFci0cv2ZIdQVD5U8p7eWvD/7ndQ+N3ww8GERE8nLqXeIdpP0yS/uFuS
6NBuJisyXwT5ViysvZdJ3GNimDXKUwzv3E7IsNO+4JMo7mpkkAcONeLno6NJ
jP0im72MuwBEuyZf2mWRSL44C7pYBNY3H7gEVpC4vzVqIuF1LfxM5djKvEei
e9mEouiWajg/1vVZtYtElf7VU+3jpRC/9eeND0MkHpf7lFVB3gK5948eKM/Q
Pr21UVeapwgKpjmWzv6m/f7F8qNhT4rggkDL0TfsdD42XcwQSM+CI+IuY+VC
FN52eV4kJ5cM/01opjRvobCv2diOpzUNcntdbUVUKRQ2EjJ7/rcUDNml9U/q
Uvj0y4lbLNxRUAN7ly8dof3iyITGtEQwBFPzB8Cawqrxdex99wNBbUKxwNqZ
wv/+W/m5nBEIKiyDAv8xKDz2+wSncTMD+Oy/p0nFU5iVWs1SohcMpa+u/R7O
pjBXcPCB7rQvVNfnjitU0T7DFRT9t4gBiaM4eu5/90s/aOIIexIMHfJmnye7
KXQ3dZDNv8WADaesVe+NUihVZlKjEhcMnPtCy/opCgc9c3wtP/kAHhFRUV+g
MPPyGv5/Nd5gfmvrfz7cTORWkCXTnP1g68osI5n1NP9PGmurPneDS8N1B51l
mNjto/Wlg+ah8O86thnqTKxw6+7ovOoNTfMKIhb6TGRO5kieWhYIY2MurQ52
BPrky1dv1kwGETbngEh3Au3szk87sKVDV/qOFaIhBDo/vnjvGz1vjl+nfCcS
Cdw//jZyTDAWss46Nk7lE9irs+JbmEU0HGmorjtZR2DtixFXb49EaFspsi7y
EYFGT9vOP3RIoHntjKfT/+6XPv9u4k5xHPS2SZGd7wi8kzbh/zs6BvSG+Z6M
fibQ3+7m0mazMthu9dDG5h+Be4MkZe6U3YRfypd+ia8msYud12l+LgM8OIcN
hMRIPPCW88wxiXtgd2jlWYY8iVOhrrfkHhQBX6rt26Ld9Lw91h1q4pULadtS
TwQY0fN5u5dJcGoxxCsZT/VakPh63R+Fnqki0NGQGXl9ieb3F2qLuSvK4XzN
kxtmXiTWbl9u4ByZC7gtui4ynMSN3/odt0rmw+JXuReeaSSKZ495J6QVg7Ss
8dKrEhK1X+xS4hwsBG6bpJSvd0j8Mb5o75VaDWdX5Xzxe0Ji41UVtwm2Iohf
XrAXB0n8zBdt5uFVBz6Ll032TtF8x0s+a58ohuHzCxI132n+czjlauBXDJ/7
q0+NstK+wLXrvuT2TJiK2JPQsobCEo/t21LFkuFA3cE3a2hfsNukILixPwns
3gbHSO6gsDn0pJ1bVyb8uOa3rAgoDAtbGceflAjWVs72p03o+W4kO3XONxTC
DbclmVhSmObv1RBUHwLiRSX+ty9TeGar3KOQiCC4wmr08pUPhb+OTv5ZdzMQ
tvfVkPbRFE7vs2g5IRQCvQTvr52ZdL7nS6q0H/rDFna1No1yCkXursrK+e4D
swnipjV3KfQbZGM1p33ESXK7/mTn/3hoUKitOBj6/gppdg9ReMJ5Ze3uYn/I
Mwjcu3WG7oNIWYx4uC/IpwlW7flNoYaw2LnbogEgfeLS2BN2Jr4f23G/ZMt1
+HeucXnIWpqfNMvOfGHxhBtXuwm/zUwU572nWfjTDZI+FdygdjJxS9jPVzPh
HhB7gTdvzz4mbiueJ+23MYDtgdKDjssEBn4f8ym1zIJsG+XGAF8CheM7eNMY
ORC6w1Y4OprAHyvbxletjQaWu/bqCpkE2j6/eypFOxwKxT+X9pQT+PSlzr+3
ejGQUFEQ0HyX5ivOsz0XNBPAKphfPPIZ7QMKMT2vX4RDVk/eZqNhAv/oWKzj
uBUJCeuH3URnCNR1DpCKGImFi7XPwnt/033bXL7qUFEqhDuRy3vZSdT3D9o3
2p0O2sS4lu1aep5TJUeqPz0CETDrnNtMYr+6/AFu82LQbfl1b3QniWu+OXu0
O+eCYbiZc+4+Etn/2qwTTc6FtraBG8fNSIxpXOCJvZ0B3/79WRC1JvHe0ikJ
5+25wBIxJNvhTKLNs7iS6jcFcGrXTEsTg0SDJffXpFUuJKnWrouNJ7Gn6HNL
hVMRaOdnjRzLJTFEiMdsy+UiyOVX/KhQTfvz6NrD1sN1cLn61yyzh0S35bnL
jRYqINZIfypilMTTcl+9gopLYOjxWnlpJonS2bpfTr0vAscLgm94aT9w/Oms
H+ubD+NHuw+OcNO83WJ4qOtKFrTVFculilBo8i/dmuVeClgKyBy2laXQdcvF
/YIVCTDSar17zS6aN5ID/C50pUJuYk/0KtoPNvX4POfRC4FFCTqXx+m8ia9x
MFULBkZ0118lO9p/R6OcRaoD4NDGpie8tB+c7vB1fMofCAt/Lc1eBFPYa/86
0t0nCH4sV9MfTaR9Nr+lt6+PAYHt7//459Ovx9q6Yp1pIKifW/lXso5CpvDs
hbP7GKAhff6iAO0H3f+O+M8FMUBI/VrqVB+Fenp+N1jbGGDXdEup9B3Nbwel
LH65BsBVrUgBn8/0eVI2VGq/9YXjPBL3lP7R++vd1EHneT8IXz79VHk1E+22
fbDgd78GhxsYic9FmWgisOnhnfPOsHdfeq2NPBNjhj/cvtLiBj5z79UMdjNx
2OKsuQbtH5MxxokeRkxsvicwbUb70NELyxnJtgQqKZ/MSdkUCJqVLA3RrgR6
Spj+22WQCiPfbVkgiECM9pl79SUPqIqoF7wJBEo3tVQbq8XCSPXK62Qu3Q91
DpXowlAIvPNNO6CG9okYOXGhM3GQoXB6bWQrgdYOH1fI58XD5RKebq8XBD46
ZrwqaTISxC97cPwYI/CmsqdcUXIkaBdYH3v3icDw8Ys6//t+ifDo7ebwvwSu
b33eZF8YD7YhzwsP8tDzPrpOz0oyE6K9Ne3FNpB4rFD3lnnCU7jiwnegTI6e
1yenPlcwiqFt5KJGyS4SM90nOlYN5EPvfk6uaAMSXS2WLgVaFUDTopXlgjmJ
AnKdyo/cykFws9aT0Qskfnr+NtDDuhBkDvnpeXuSaHpZOShQPQ9uzegMR4SS
KPZfmli/Zj6QIYeMGSkkrreXMa1ZKALOqwK6y4ppH65pNN+rUQBJnRaHfjTQ
54u5kxtuUw1vNnM5F3TQfVk7MX40vgQSvnoJXf2PxBdX2gJXtVSBNLdu2v4J
Emtm1PWufCoA9y3uykNf6b4f+HHeWqEUdtbKjI+yUJj340zCrUu5ULlXyrGT
j8LH12wuVh1MAFaR177aEhSy1zusWvYpG57ZrsqXVqTw1tv57xPL8sGgrnys
S5vCnv4l0j//Bmg6cWdHHaTwGfn7+/ekYOD2bt914jSFP7jL0ze1hEJC6OSn
MQe6fzfx4I3AAIhaHtow5E3ne4WViO+NINAOikuMjaTwg5988WRcEFi5nvpp
lU6hg7VKn5wHA85VM3Zql1JYNsUraeLmC6KzPJGvGynk0vqcu/1UAOjd3PB9
4gm93zQe8mbLh8A2E2etwVcUfk4VjHM8GACzxgzuI9N0/n8NKJ+k94lkMz8F
Pyk0+JjxVOWIP6yW556i2JhYHxH1Hwvt0w6rHp+tF2Di4+fGmuo7vaFYc7gx
RJKJinP2dnqvXCHD/qiMoDIT4+0n9QeFPOGPGMNWEZn4M3g2l/9AAHjvf+Q7
60Dg/eo+YyW7TGhZ2UYEXSfwUFrdrU8XMiElKlWgJpLAfJva6l9bIyGF4I6w
SCfw2/n3z7leRsDElVjH/0oJ9NZ33yryKhLabk2vmmyk+/P5U0MjMw40is1E
I58SeOO0Y9fssWSYe2zqdfQ1gU2Eq0Pcu3CYaN+WoD9NoHpuodfIqRiwur5B
eOAngafV9RyMigrBhTl+6jsbiaGRZ5aOy6RC5W4dKkGARKexXaueSRSDcl3D
DIsUiSxDB71yVIvBeGKhYIUyiTsjD1T63s2FxecnuvOQxILbqUrBynnwZ3Tf
vnOHSaSMrCz/4ykAke5VHgZWJD7z19fLP1wIA27Mtc+u0vNcezJ17gftv69z
XMf9aJ4Rz66ZPZUD/75d0I6JJXEHo7V/oa0A5NUenrDMpvnFWCVi/UARBJ74
JW9+i8TUMNHOY001QDyxusrfTfNW+OsrSx4VEL9LvLlxhN4n4o+3fpGsBsZ/
lJs8SeIAa/cDr9Fi4Ngay1SfI5Gt2EW+ObkQpFT2949wUigw79E2eygTIi9G
s+UJ03mo/NLZ/C8FhK/Xfo/bSufPZ7mA4OsY2KNPmQipU1jNmsGXcaAQfnbP
XdqpR+Gjk2HfLx0OhldKxS96j9L+GqYrKdwSBKz3rQs0bCn869fp+H4yCNpY
fqjscqV9QSXWL6cxDNb9S9/ZH0jzzjcuQbs7gcDaKPjl3w0KCbn6HWvuMWDt
QYU/lbkUTl4K6XWaYIAr9/ErMjUUHvnnv0FSlJ73AWb5mq0UxmnOpu68FwDM
2vP7pnrpffZpKGSnVgA85OLcWTtG90mykqckIxia94aPFX+i339j6eROVT8w
VhT7vfMv7T/vi5Z6Na+D01BozwkeJrbYLj+8uPka3D8b+3lOhInBAwNyim9c
4OjqYn97OSYmHfSVPL3sGgR6JPQ472KiqfiKQJMcPzik++D4RQMmXtkhNvJy
fzDYHZ9YwosEnlsuypO4kAmLp94fCvck8Oxh418yJanQtHeJ608oPZ+X9y5o
uKTAQ0Mj+dvJBGovLzpq+C0aLHl7vo8VEhg7Wc7ckBUFknWO0soN9Lxf0S72
IjseSOK1cGQ77c9souFzUdFQf6dK8sJ/BPJlq3tQrVHAEO7vvjlB4If2ZF3z
nng4xNuqNvyVwN91ejNfu0tBb6prpfYyEkX85hV+dCRD+Dv2A194Sfy1SfSz
pV4RWKZ4yvJuJFFtepn523+VYCnH7nFiO4kpygG9/Bfpx82sAgv30D4xcOSS
eFEeWPNLF3scJLFybmnP7o15cNFW3T7/NIkdJQyLbH26b8aCswMOtG87uPa/
+H0L8tfwvpW/Tu8TwaqeDfG58OryYFRUJImvrjwr6ePIBx5LjiNXM0gMGPIW
QHeaxyaDmyrLSNwgHeG8+VUVMP72jM020b6cMVgprlQNEz9VnCw6Sdw1vy32
RRHtB2u7Lwq8JvGqssbZiaPV8HI2lX3XNIm2Na9dNquXgHZxAG/4T5rnMr71
nt5TAhXf1IbesFGY/fXAoLN8Noi+PNHUIEj7qEzMutNvkyHWsEPjoxSF4v5F
l/jofiw/vnhNfCd9raHAWRFSADl7j2z216Fw7UrNZQ3c9J+n6ZCawmEKubnW
qy6sDAX2DYmz+lYURixcW2d5JRjK2x34o69SyBl1fdOWpiA4vIzvx0s/Ct1y
b+vEsQaBhNgA6sfS/G+zsftJWQjstur4xX6TwhSOvv7r33yAPE2Z7qykMJW1
pqzmOQMeqisJRTRT2DRXtXspPBAySiBzsotCPh4xFvEXgeBReV+9fYTmuxb3
cOu/AXBML9htkaBwPPfF66LnPqDmvs5Zc45CRbM08yjz66Ad2DmUx8nEccbc
31/W1yHxTlnJ8XVMvH3uaMAuB3fwLWzdcE2aid80809Ul7pBrNP3+TZVel8E
LQ+xFnAHqdrst0b7mciuys1pLBAIsSq5ixlXCVy0qgpq3ZUKjOb8YH9/AjXW
RxlZjuSB22slsYuxBKa9PVLMoRsLDuFdH/5lEahDnZD++ygS7HpNPjytpH33
qsCxzNkksC6z+pnYTOCEm83eyzM3INT6xcbI5zTfGE4YkarhsHfw2wt8Q+D2
+cb5nrdxoHs19MRXgsCefVLO3GEJ4PTRc65rjsARxX/Pn7xIgOwfPypKOen5
PSNjF+aQDn0pvrGq60g8fmXzcaXoNmDr/VryTZr25cG0klwoAc2Mr/31qiQm
Ca+0DTXPgzRdE6Gc/SS+TK6fPyxTANGl594ZHSORXyT/qcGqYujaORXwxYZE
aylNhu9wESjd7NjT6krvmzWCybzPiiAtU4k7IZDEjwN3R2Q98kD22vyX2AR6
v4h+TttRUgCHVnudOZhP+7HUrbFuqhBanl/IW15LotCWK9tj/tTA8QsN/yYf
kthkkW/Qx1cMX1Ojr3S+IDH+6GXhfvFbEHvGadXpMRJvD8iSczS/bW/aO7lx
luarN5+U+teXQH9JxrOPi3R/wrujJVbkQ6a7WdcwD4Wv/3bdNuBMhvnFh6Yx
ohTm265x3hOXBIUV2VUa2+h+bHq6XiYvETw1RqRX76YwoTD5m8tSFBhZ5FV/
NKD5Y4OBOktZMGzmd7voZE7zThRfSYNdCCydVjaXvUjzlCTXhSH9IBjZ42M+
7UHhoQdvsn0Cg2BsUcq1J5RC9dXBnOuzwmHK9ER2UzK9j3ps0280BcDnXSlz
RwopLNV0c7nW6wcLjQ+jxBro86zyXvlrwB+4n3tsZ7ZR2LDyiv2QGAPgfiQ1
NUDh/vdmVb+e+cDKC2bbcyYoVGZJ4X512x8kd0UfOPyVwrkpie6gbX5gRUj6
KixjopPOtb05dP5zt+9vW8VH8/6GKcGf/dfhA6er+k1xJv4a3bd6o5kzbLsW
PXl6OxPLr74OYIq4g5vPjlyJPUw89fnVm54jfnDt9ZsXwQeZWHqw20brXDAI
7J81Tz9H4OUTdf3W2sHgKCanZ+pEYMR0yEj83zRQs0u7pskgULXFPmh7fQGM
zSu6rY8j0HLji9MFB2NBO2F2qP4mgR7jU2H7JaOAL2M8MOAWgRe7WVXuK6VB
ZmHYGsP7BFY2Rk5RUQnAtlD680A37dPLb/3zvxQKY49E183T/Yhn5TJG0Xhw
jtIXLyYJJI6sdOtLSAD3x4X2IfMEdp7g+BRZcQOOG21jnOSi+UP9krvMmXT4
+t/Q0gzdDzZVVf/+tjb4293UVrGVRF6nAH1tmpfaOk0cL6mR2NDAYu7NzIXz
fFaXzuiRSDYXK9w6XABenW2Fy4+TuKWPb1uHWTHoBY0+LrQl8du0+AVf2leD
q2TkvdxIlKqRMvaKKgLv0W3XDgSRKNcYFXDrXR6YHi9ddyiRxHGe6RSquABS
wPPnigLaZ4pTOxLTCiFZ4W9TE92PW6fXZZ6KrAW2qNuPsh+R+K70GYdKShEc
UUlN9Oqjz8v1qWvTkVtw8l1OL+84/for91VL+xdA3+LIoWG6H/J7yj4O5xQD
q2hPw82/9D7UffDGoy0X+MM0rqStolD+/MwtoeZEuGH96/x+MQr/qx2d/9SU
BF3gsO8T3Y8XJtd+b12bBG5xa+w66X6Y2wk1OKyJhgXZycNphhTWCt9MkLMK
Bq2nI8VSJyk8k7ovTuhLEMy+ZMMJuh+aUWZHud8GgMWHDw8zPSkUlNKN3vss
iM7HXEh4GIVjDMXF40EhMKusJmifQuHeJPbIN+sCwJo1YyVHEYUb2AsHTij6
g56O0oHXdD/OzBDCllsZMBnsa5/fTqGamOTUzkMM2v913xX8R/v+9HV57zIf
MFxzJunEJM17GedMtsb4wRcBhe3s3+h+NGZIZN33A/ZQxVUzdD+8InwzvnNe
h/l9p2630P3Ybb87LdHJG0rZqp6YbmSioznnH92dzvBYdaeYkCIT/65cPDXy
2g3s9NbpDNH92HV58dEXWwZoSlUe/0bzUpbJK37BA9nwxYe6rn+NwGnBeC1l
21T49rcrqjyMoPM22TDdSO9XjWoF2xQC/1guJtRYRYHeYeeurCICbQWalS73
R4Hpjf8OT9K85GN0tJsgaV8Q819v2EFgw+rnfx9MJ0H8+k/5Ui/p/NvlbW3b
FQP5wgN5BycJ3JAveKm3MhYSbFjep34j8JLLCtW7P0uhd7CX+wvNSz9C+nn3
VCVD9rL8J9l8JJY/fvnw0dNCSFlp5ttN89LrV7tylzuVwohWoTinIon3WdNu
fFYthMW72iy22v/7fcOf7oZX5EFsSWaB8iESL9WL1kpvy4OR1Kv3D5+h82Uk
5iL2oQDYXkavveFI4tvH/B1fb1SAt7rhyTGal6QFGk56PsiD3mnTt0ZRtJ/o
l8+IW+RDAruIlHwm7beH7Y46M4uAT9Zi7HQ5iXF3bhsFFNeBY+rk8K27JPrM
3kssnK0CQYVVD3mekRiYF2t54lwxmPrs1mijeelwwFLYx6FqaCjTr/hF89KD
hMYOk6UisF36zrnrF4mD282OWA0WwrdsojhzBYULLSalZ1jpv6/qPHbntRSu
ULH2TjqXAqXtfW9SNlNo84mH0ZKWDtpSBl9HaV4yaS38u9G7GCTKz31V2kch
Q/acz8nkZEgl/YLe0LwUObJ4elNlCKhwefOtOEfh5g0NvDzZQSBusjZcy4nC
2y22sm7NgTD9bm5vkj+FB4aDF6TJAJhP95uYo3lJodWJP0woBAp5ONfdoXnp
tETPnblEX3A7c1XvK81LLkP6uiZnAyB+0MNK8z6F5ckWz97Trx+R/vRewXO6
Py8fH9f7xIAfPSOv/N9QyNG5u8iuPBCEV5y/WElSWL+/skUt2QdEwjU052he
yitae3Vd8zW4qFz5y4yLiUc5Wm4KqtP9Sdm8f4UwE8tm7nJ1SLvD8SHvWNWt
TDye6Bcv/M8NKtC5zVWNibZwvnpsmSc0Ox5V4ddjokq/8c19vYGwVaXn9f7z
tL9uXdbh+ygCtvdwvzdyI3B5kcnc14+pIFi3I/BbEIGa5OjK3UmpUJ/+ua8l
gd4foRuGyjbHQtvX6sOleTQvvTsov/xpONQkn7RXriVw+O+rRq7j8UBYLRcy
fEjz0BneP/P+8WDIbWSs1kegoOWw8Q/aP+Cy52jBOM1f5rZKmz9FQcDvgn/Z
swQmur3hmeIsg7yeu/c0lwhk6XBeVmeYAN7FdlKLPHTeRv7WCvzKhPbPa1tG
NpC4aRvL3tYDT4EKrvpychuJWtLmZ4PofFqi/h07TRJ5Xujw7D5bBHNvfNkP
GJJYtkZ6M0nnS1Ypvab8JIkHg/ddnUsppnmj4VPGRdqf233ffHlSAEsud9u2
XSNR7GLmywMduVB4rkXOMIzE1u4NT98ezQeX7efE9qTS/XDTEsjUL4aBhplL
tcW0f6wRVZvrzIMAayeD+tskLqTorJ64Ww08p98/PPaYxImX9upP/9cHc+KD
2Ev6/Q9cs5LaVAscj79rLZ8kcc/YokroniLI8P24LeIbiR8u+e8rVisB7zNv
bmUto/P+a9OSQ10hBGy4fC+Yn0KnBGa1YUMiiCVOSsxK0Dzk7HW8NTQF2JQt
RD4o0vP2EJdT1bMc6BK9V+Gzl0IVG/b989sTwIC7ltx1iMKbpzNbtkqGgMbF
8lOCZ2g/NpIKKp4JA/Y1MbZxjhS2qOnZCCoGgsTkVZa06xRqf38QNiYTBMIs
WioYReHGhgrxH41B0LUxZy1fBu0rMvV29q4MIKvZZBdLKTzqEzmA0n5ARpm9
DG+i0IjZLecYHQhqcflrCp5S2PhBdtRKIhTKnOLe3HhN4UhcXtDmUwFQt/Lc
0rKP9PkiDPYPX/aFFb3KDf9+UrjKjLr+TSIA1Ec/LctewcR2HqbQk+s+IPlp
799zgkwMtxGJ+WftBX5XkuT2STERKnO4jE+4QdPugc8dykzcabzmaYeOJ8QP
qzb/QCaaZB3fFL0hAA6uiRrMdiSw+4f/rSHlm1An3y20z4fAZvXfkvIfsqDP
wDbZOopA17r/HgQVRoLl6yuRXP+7n8FJPuLFnwjoqlHed6OMwPN8OV9tvkTD
l+iDu5KaCLRWEvnn+TsewobnRQ07CTymRrReu5AOr2Ti5viG6Oenaacu3I8C
tg75C7+nCXyz489/EmoxUPDidFv8L7ovzdktTnTeFt5OWhStIHHNbf5OFuc0
aDv99hIKkjgjzukg0FkFl7bGa7VIkajD6qm6b0MRPPuRbnxHmcSN0yP5pVdz
IU1ZzfCcDs0nl1QCXxzPAinXuyB2hMRTFn3b1QwKIOrf/s4/VrQ/HFNj2ZmX
D9aLtnvCnEg0Ezx7eM1UPvxYGPkc70+i+eKBSvO72fDLYTLuYBz9/ldei0c4
FEDD2IDMhhwSwys3r7cOKALjm8+PcFaRyDzbuX5meS2c6D5uX/qARBvXiD7+
zAoQWdJobe8mUYSlnn9vahUcyo2JtHtD4k/udhuJy1VwLjZzPUmSqH/usuuO
l8Ug788yPTNHYoqmx+R8dgHYv/udk8FFoanDfVdbo5twVvfVkTPrKcwiHauf
JafCzh8PUvbK0Hk6lOix6XY8XBPU6HypTuE9k+1s3GY54KHOpf5Bj0IzD2cu
8Z3B8KHLWNT3GIU9oczpu2QQKJUbPP5pS6F1v8HQ5aBgUIu+WUG4Uuj7M7Y7
2iEYKseC/OODKFxqJyMiWgNhdOej+LoECj+xznJ5LvmD35yT8Ok8CqXqR5vL
DQNhkXvEZrqGQtEbxU/X0zyksjGDSbXS++Qw59uB0/TzC5jWhS/ofTDTE7Dg
HADa26QHLo/T+2vOzinhYzD4LV0cOD5L93dftomrLgMUdbQffvtLYSy/ae/R
v36QHm5Pca2ieWfxhteWlV7gtpcrpnQDE70fv5jZcssZ5HXOfdu6jYm6l8xK
Chw9IEefL1lSk/ZvxdSf9v4MmP7nckvBkIn8J2S33xkPgpv3z6RdtSEwQKBM
3Mw7AA65ZwgccqH70N2z2dg2DTbznPcVCiQwVyGcGHpZBAe64iSZ8fTj6W25
H+ZigEXHZG1VDp3/rZ9LbLTC4F1q1q+T1QT2r02vCZeOg7bA/YKGLTRfBbz8
5XzrBpSyzufu7aWfb3zhsXdHOMSv65rrfUvg0XQdiaJr4eD16GdsPpPAMymH
DnvJFEKUQfUaq0UCHysnWoViPMz86eyXW0n7LO8duWdsGTByznPs/Xp6nnf9
+9B56DH8KK0fDpQlsfPu05E57WLgCzHiv6hB+6v3DRbRhRxQ/DXbeOQAfd3X
3m1jXgCHF2/JvT5BIrtyRvPcqVvgkdo5nGNH4uoAb+mZ6SJo43P2POJBYmze
QSe5uDzg2+h+2CCExD9JL8MtGPlg1RacsT+ZxF81Ag5nj5ZAw3x19ZtCur8T
Us3TcgWwslNt2Z16Eo9IR22xkKyBcFcj9G4ncZ4cPfSHjfYHvYf3jf53P8Ot
a3dUwyuhZuBZCNd7EkXzSjZ0HygAtT3n9tR+IXFv18/8no1l0KJ1dMfNfyQq
md6MGtG4CQb9R5JieSksTtjvbHIoAV7PO7av30ih5U+JreceZYDd3YnthALN
+9na4S1HM0H8+HR4/h56fxyLkRAQTwVJEUPxS8YUjjs67312IRjupeosEz1F
4e5sY53z48Hg/b1zoMmewokVJekRzQGgNVX+Lt2L5isTJ1mBn4EgXS/y1jaC
wuy1vdR2tRA4XUYK7kn7388bhpROr2CA9EmTjGUlFKYlWeRyB/uB8EdcXXOH
wlBfoarlvgxYxR3fkv+YwoPHosusFwOBrY14mzFI4WjMqbqgcAYsrT77TP4D
hduHtIXkTX1g4YviV9YfFG5NCA682u0NG2tjOdqXM/Gw71f/+u++EJt28GT8
GibW841uefrbC5J25f0x2MTETVy/txkUuUBrU2DoJyUmzkkVl1nt8YCFuGK/
6b1M/KijF/ZpTwC0Z2xI6bQnUJ6pkTazLhMGXp4y2O9NYLhgW7Py+XR4V5Aa
HxpB4Kj3sRwO0Uj4zsE7qpZG4DfZNHX5uXDgXDbAnlpCoNmb9P9sFqNAIi7+
cfMdAoUeN5kqMGLg7ILWBsMnBA5Ymm5lCwsFlU3ah0ReEXjv4AGpkpwIOHrF
P1jyA+0X9R+3Da+Ogcz0qsNJPwi071abdbpUBB9ODtd1LScxZNNkieO1ZFCq
3ivstIbmEdahI9ieC/7pX08/3kSirmO+Z++LEugXzlEdVyLx33bRC0Uu+WDo
oVlkDSSWfFb8HbU7H07GyH3bakr77tTc2hvqhVD/3EJny1kSr/zLjlK8Wwoq
M9dko6+Q6KRx0IJ6WwBN6QmFjb503uEtd3VJLljLZtwxjiExzH/XR0W1Ash3
+VUkdZPmIYFzysabimD7ZEKaciWJ2hveDU6L1cL7HWKSFc0kvrjO/+4kazWk
rC3YO9NFol3pH/GQo2VgGmt7LmmYRC5JQ81NUAkrs5ytv8yQmNmE+stuFUGn
tvdvvj/0+bjDuB3Li6Cq1Ukqk4PCNmOz5R4zGbB1vln+wjrah+3Xl43Lp8Cn
U/q7HKRpX3AK8N92Oh5GMh+ODqlS2Cdja1+yWApdTqqCK/dTuMci58aPvCBo
GflgUmlG4a7Oy4xf7EFQN/ze/q81vT+mUy3diUAovzy8XsCF9mlRP6nuF8HQ
Nd5yNiGAwuQr+i43ihnAnM7Z9SqeQu7dF8KXvEOAL+j+uogc2m/elYoGnfcF
jYbNg1QVhX/TZv8YbGGAtXe4tEALhZP38lckHQ2GevGR1YU99LUdz+SFWAak
+zBeeryl8MKDWTuj6GDoXnbhZgCTwseXBvc/z/OBLed3//25QKHsWJXnbLwP
BJxZ+XX7Sib+t71EdDLQH8ZIIeLVetoXhpKPbXByB51VVx5ul2WiTshivcaS
OxR1PNxmpMHEzJczvyx0fcD0zqTTxgNMjDG6d//H00CordBaJ3qBwI4dfKsm
T6YD35brVQYeBH4tMHPLbkoDVvOl0N4QApUcy/MTryWB+CUT/xtJBFZbCupq
ssVCcB5fbH4BgQpNIzGuJ6OBkSg0xl1P4JbsH5d9o+OBf++jdYZtBPIrFj5W
DEuCWf6s3/IDBNa3Te3JPRMN39o2t157T6DeTv8jb7ViIULhiFPmF7qPP3i1
nKpLofFwh/VaFhJPT3rbStHn4znK5t6zmuaRN3dnPCRz4ZZvw83/xEgM4E7h
3FdbC5NWZRw7FEgcT9fJkTEthqq/OqfOa/3vfoRP3VI786DjEc+xPcYkPuz4
0XY1rBCW2Qar+Z0i8aaFeeLP0GJ42Zq7LMWeROK6xTFh1UrQGly2eoU3ibXv
FjhcrXNBo5CDzSiC5v88sTfuc3kQmLEnVyWdxKfqH4S9a4vh25VNm8NK6f0g
P/leuaUQfi2W3ahpJNEATrMll1VDvK4n7HhKYvP8Go3XLwvB1H4N75dBEu29
jC72rqiFM41iPxan6H7Ni+Vuty6GpQeXRc79IPG9Qpz3MvUSUPOzlstaTuHl
3bsOzylnwd3zYe+8BSgcuM6zjHBIButtFn5tkhQaZn7JcjRLgtzy/hXvd1Ao
U37qQ4LATXCbjOk9jhSWfrmrsGSYCE7z6xq5TSkc/J69wS4zBO5orLnDc5bC
Xid2h+KnQZCgdPjX+SsUxsjIWWnIBgPbhIpEii+FMzIb3rW9CQTug2eixGIo
vC6apmWQQPNVipnQZCaF5uE5r9+0+EIV+73GX+UUWm111v7r4wv3lc5nnLtH
8x7Zq6VaEQhnBW/bFTyjkMvwcpaxSRAc2qg6HD5M4YktDQNvtXzBltNm5+sZ
+nFnlvrvB32Br0LVc/E3hWfTVzs5iDHAhOPg4jUOJl6YCiUzza/DHVTO2yn0
v98nc5r9uqIH2BeEndbawkRXkU1i9dpuUNuy6WSWChOlPwsqDbq7g7TU49+s
ukyU7NyzrcOAAa8j5gXdrxDYezBORHMmHZKCtabAj0DbkZlLWwtzoeWzUoZ2
DIG7w7x5ZGi+7yzu1RjNJHDTTm4c6Q2HaKtE/6j//X8OXt/an3rGwcNI7luO
9wgMXPu7Z69TAlQ1NokbdtF+4WnQX+YYAd5K7wo5RggcjO6LvGoaAXfWjxh0
z9B9ED7k+fZ5PFSsWLkz5g+Bz1rPXrxllgD81rOsDA56ntoVfkrhyoCj3Neb
1wiRODRtyXU6uA2O3N4u2riFxMFnf84wHpfAw74kmxgVEtO/vk6XTMyFmdkd
n8/qkviJaXe4TDEfPpkfiFtzlMSL/9wWuTlywGbnjkPd1vS81z5spWKXCwl8
hw8HupCIF1guhL4tAmVLqd32ASQKTRkndf/Mhegq+UuHbpC4smrF6c38RdBh
WF2xJo9EgTV/BHRfF4HjCbZVY9Uk+gV+YtOeaYAeu/i6olb6er3nvivapZA9
3aud00ti2nJIIY5VwqG6O/Uab0m0dPctL6f5sInxuG+SSfv7y9E9Bb4lkNAa
+vLhAv35WPvOwcl8kF7mL5qxkkIhV9Tbuy8dUmO/XDPbQOfjn+uKu9zJ4BWt
8kNAjkK392pj17ISQDCmur5vF4XOVqzLhYITQGJp9GTrAQp1XfZxN20NgZXN
9TMHT1CYm9OxoT8kGKq8azfO2lF4wNpqdbhsELSVn9vz0J3CS/daD/9NDIT4
twdyYkMorHRIe5YUHwK9jImPsUkUhny+vpFsCADy6pb1igX0PojYxVknxYCH
5+K+vauj8Cp7s/OiDQPYOyrqOh5ReOdS1cJOTgaskP13p7CfQosRWCtX7A9T
w89f2L6nsLpmXKVILQCUF+w55L/QvCfYt6sozhc0N2LQ538UTpdGdIxP+0Bt
/bMPU6uZ+Ebau3FQ1As4kxaUvMWYGGzJkagS6wzCnkc3b1Jg4iLzG5OXzx3S
u84uze1m4uCZy0tqqgy4bsBK7jam9wOp35XGGwxDLMXXgq0JdLwQ9rfsMc1/
BhPyJs4EyrFueRoslQ7b7y55ywTQ8/3A3m+n9xZB4sTZ56y0PzgXi4Ve2BwL
EqT475psAm3izd+96YmAP8It9y9XERjJw2hc8I6H6kQ7AcMHBBb7q7mkmCfA
K7/DRro9BK46VKezyBYGdxxdw6dG6a/fFbSvvT4M3IuzjxdSBFo43h/+YJ0D
DI7yFpcFAnfFLnclP8SDhOS8jA43iXfDs35uCU2HOU21Q6kyNG+IiHi45xXB
THFPy0V1EuM0nO+G+uSCYVAJn7k+idV3DChW5wI4b9104dNxEk/uy15usK0Y
LGMGTPLPk/it2NTRvpjmn/Hu/vPuJL6Z/aLmcaIQHvv2TR0Ipn26j1/gUVw+
mEcLDRskkfjFiXEqSK8ICm8mDnwpoPfRjbK621IF0De//kxjHf341pcuCma1
oOfPCIhuI7Ffv0ZtIYr2hQfbSq37aX+ZkTk28LESQoZVynne0Xy2qaZQvqAA
louJ6z3+TOL9ETnbd1YlYFXJ53pziUTX7Zmht87fBIXK/QGJqyncVJLyjnRM
gIaq2iRFcQrfaQhvKEtLAuG/0rsoeQq96o/mXniSDM9cfDxva9E+cDypr78h
DnjzhZoYRvS8Zr01u4UvGHyqV7/caPG/76fadHN8CgKVqemInksUlh3Pnkjj
ZUCXbWdfxjUKz3DVs09MBEEVT2StRzjdl+T7bQE+oSB9JT7JLJXCwgnNABd5
BnTc+nGErZjul06cDpetP9QI7qpov03hjqflhzV/BMK1p6FJ+R0UgvxP1qP0
dS0pdDbnJYX6Ft5V2isZUMg3tl1nisJrdTkB3Ua+4BFYFcf2nT4/bmaVSPWD
xA1nIwdZmTh0smnmzCsf0L1yNKyEn4kfMiT0z6V5gXhOydmDEky8w/a1RzLe
GXR+j/Qvo32BUyTVa8s9d1CiLK3GtWn/NhV7IvMgAP6N2Xi8vUSg8YaHLwRU
suFdaYG1nheBHDcfs03ZpQFpuiM2LZzAhb7GpgtpkaAtMR58MJXAvoHt/RaK
ESBTljeTXkzg/hU3H3NdjQYNvrqoF7cJHCbubQzTjAEjHksRw8cEmmxC49Rl
8WB9M/mP+CCBwZMDDjPCMeDdLiOgMUXne3H/xT4yGlL9TqxP+U6gjsucjrNO
CQyve2n5lpXElFVm7t+cUuDikNPVMH4StU55o0RjHkQdkfzUKUGius7Kbelk
AQyWbyr/rkiisYdwrFZiPkim3T9i8//uZ3ATmTRUMCHR94fNpPrdAni647z/
bkuaT6o16x/wFoHoWGBO7GWaz3v2XZ0zLoG0i7NLXT60j7fFydhfzQPh8J8G
xtF0nxbtXp5ZyIcMrfCprVm0zxitOHfIogjEQz2a9StI7Gh2bA8UrINiWxa/
ynsk3snYsEr0XxUc3TTkP/+MxFtRi5YvTUrBdEWfccUQ7SPV8XJv+qpgPH80
9PtHEj93Vu59IVsEKeLqLFt+0/uwX5fLnO6PqaLC+Ux2CoMXX0lOKN6ElYNV
6x2FKHwGHaNHVJOhizeaO2ALPf+Td3/3q8+A6HG2jyMqtE9cPx77ub8U3GOe
s4rrUqhlYzX76XMcVFjXEe1HKHR8Vf/8nV8wuH29tWcZ7QsXiCNrpdsDwdby
d99WZ5qv2v8KODgHgrnVqEkig8KTH5fPFY0zwAV4V8/E0f7c+FRmfDwIRvSt
U3OyKTymx/hxd9EXXnF2xczeolDRIHl15CAD/pT4t0s/oDDjcwy1Jy8YxEf7
pgq6KTxv8+4+8zYD9IpuHbs+SmHFvnKfpxuDwWX5NGsqRaHELRZ9LTrvub/u
Zv6ep/fFfwYnigW84efTN67IzcSp36Kd3KQvJD0UWzcrzERPXVbFnQVu0O3i
tlVZhonJeJiykXYHmeXrPc+qM9Go+pMza5sXhPJnHRHWZ2LF0e8LYU8DgPk5
+LeSHYFr2t7FaY4kgvhc21NDdwJXdGQe/SlA8/mKtOB3wQT2G89kNqxOhosB
G2VKEwn87EjVnlwXC4UG764W5ROYVb81akNBFKQJahSK1xGo+s5HYvPVJPhr
MiFk+IjAmZrSQdWSGyAa+z1vRz+BPqv9WuqF40FYuPdg7DsC28xLV6taxkDI
mgX1m58JfIRfV1/LLoNK3tbVMv8IjBfr+PPuZCbo+qp2T62ieXuZso/J4Uxo
Uvug8FqURAe2t4Pn2R7Cx2/bfPbLk3j125CjanURhG58zGm3m8TSZiERy925
MHbo8S0dIxKrAnskv0IxrO2KdU2yoPu2bOhOa1UR3L9d7pl2icRJYIxJGZWB
eOGZi8JetF/0au3ti8iFWVabVMNwEn0MCyLvKeWDt+2LMY00EkV1bxv7xxXD
BP8K/awSEhVSbCTb9xbCfcWYT7V3SDw1b7LiXVo1HDKtZOx7QuIPx/iNv+Xp
fL/3nWenfcF5n/Fv8591oNwSLsxC+8IIf5h3EF8JdN+Uk3L/TuIFGT+CJbkY
hj6JO2ax0n6gyrXKYU0O3ATvHv81dD/cGYfPfU0CGM82GdpE4ZCuyXNF0WQ4
MruWb1KJQp8IkBW+mgUbWTY/uAR0Ps8pbtR+kAhnAqdMJU0o7G+p7L/dGQrX
TMfC+Swp7LE3yWwxDQXjTVdveV+m8N91Q6dqoP3B+ghfqg+FAtXphyZu0bxU
3H1WMZpC32Yrb2JLCLCcmkuey6Dwvfanr6ML/mB86qzTXBk932G/zA5NXzhq
eVrd/S6F/lrDkXwxQfC8v0KroJPeLy0pxasvhsCivrVFzBCF8s5iH0q1GcDN
PZHG/EhhG1X/H1uiL0RqNaxd+kV/HoeXP/MOB0C7s5h/FDsTrZQfVlYIXgfH
dbteGK5l4nouuPfimif84Ixt37uZiUKbB3SGX7mB6l+vwpqdTHxxN3l1xpQH
nPLzHV7QYWLNK7Lm5GUGrOnV+RlxmcCW2fyQmmdZkG8e/Bd9CbT2lK41/5AN
nVldqabRBEbv3RChUxcFAq3Z779lEGgluT/V8HA4VHLanIstJ7D065b7z8ti
YGilvCvjLoHryvSWJjkSILNzWMzwGe0P9oe6b2SGQ2mlugnPMIGFwx/9Xi2P
gtErQUPvPxLoeyH0I3k1FkrI+vnY3wTen1mT+iIjHdgliKoEdhJfhS9q6jWm
Q/TOyjVya0mUfs2m8/r4Qzhz5Wzlvc00b/w03viM5qPH1uuG8nbSPFOi5rne
IRce8jVkWe0jMdnjm3MPfy5wTrPMrDMjUXVgl7CdcDZ4pu+OmjhH4oAfwVOQ
kwve7KeeBjvTfCRy5aKYbQEIKvgn+zJIbFyrUvNZIRdwVfjiwXjaZ7ky5O3H
6bwLIimUS+KxfXU5rkpFcHr+o+L3KhJb5nta22Xr4PS35f61PSROle9+U3CV
9gNZyRyTUXp/SIzzn/Mug5gwpZ/TFIkb1C68mj1RBGdz9r19OU+iypodDbIp
+dDptNsyg5vCcPkNQi9fZ8H1S5PnzUXovE608sjapsJx8HosK/u/fx8t9eBb
dQI86fv+YECDzotYwHoB1nR4LuJ6YECfzu86q0hVjhD4o8MIPH+cwrtffiLL
lmD4v6bOPJqKB/z/hSRLUWSNpKSSFpEkPU9FUSQptKAIlWTf933f9327lmwl
SVKkImuoEJKiMjNXm0IK3/mc8zu/77f/5sy9M/ec3s/7eb0Od9jEef78cYVC
Z1+uioZdfuCR7v3rtQOFCiNO7yzd/UDcyDw6OoDCn2KNvhY8/nB28FR9TjyF
bIaBJqk0/1fvaU9Ry6OQ8KXYolb4g1HNntKxO/R88cR+3q/pA1k/8k4ONFJo
ZHhs2zp2X7D9/DuioJv+/Po1SzK4fSGW5Y/O1VEKdRMcX8Tl+sLAP8IKv1EY
pnBp+RY9L6i+3SD5Y4FC1i7b77lMb9gknmY5w8PEpUKxF9a2ucDjqyzGsWJM
vH7yteteA1vIGz4XvlGWiR+wvLKd3RHEVtRqrKT9QNfPbnETny/cLqhr33Oc
5iMv0V0DRf5w2UWg9pwZndf6kJiucl9QzdWdO2FP4PCdpZ4rfJJBzLjdm82f
wNn4s44N8/mwcKfB9U0sgbr2mnnbVaLgY6q3fGkOgUmfTXtKnIPgxVr3neq3
CRzUX2Ye9iga3thuFNBsIPDs2FwM62AMuATlTSu/JHDj0KB2j1IYWDatv/5g
hMCqa3bX3qwPA8/hEy05kwQe+H3wZw5/ESSFV5trzRO4TeDg8WLBGKh6mey2
5r/vM0wvTOq8S4OXxeraIyIkcvQqv3aSboFva3ddsd5K4ruZ1jDT2kJQMm01
tdhH4tTZye/fTHKB/6qisZYGiWY26r6c43lwICl/stGA9gPfX6oHXMogKvex
aaYFiSMduS/qjzFgFAXWHXSm982HJXkfdXLhXKPwY40guq/tJMol9+eB5ezP
85hEolLB7t69uoXwTL8joplB+7rg0h1X6vJBPfE0o7qaRDtr8WxltUpos1i7
1PIZiXwS6n/aOIpA96Vez55XND+F38sS214BQ+1Gl9g/khjhJuAjU5APlhcL
9mT+oOfxwa46VZdiEOtM/paxhO5X7UJxLZMsuDJtXBTKS+Ej8yaD3VpxMKcu
85N1PYVx8iMvR4dzoMYxa+MXOQrlDuftVqnJA4d9OmnRqv/9vtylbyM74kEh
zjPglBaFq7+tKXyXGABz3k5yQhcojP2850Pz1iBoZCkVLbhOoYGFYNqpBF+o
MI38nuJG4et3D3cJmvpDjmEpx+kwOs+pOWqxGfS+GD+SKJ1K76f1nFkCzj4Q
wnbrw0IRhe53YlUWlDzB74GmbcZ9mr8qjNKn/vlA7onUibxm2t9tP+wtSwqA
s6n1F5L6KLy1ymTEh9MXDHhGTQU/U+jb5Fd79KUH+Bjf0V36m8LI8X9T6oZe
UKr+OOA2GxM/QoTdkyeeMNCkvs11DRO/9+s+0HVygxWv02LVNzDRzNIw8Eip
Pex327r/7S4m7tYcyRj54gTNe75mTAITuUSF+RoVfCHk7Kt7d68TOH/02pnR
b2nQtIR/5xF3AtdzLLVSHUuDgen5OIcwAi825657tS4Mir+pyq9PJVDHtHiX
S3EokAYsmxKK6f2RpSHNIRAOHCtvLhbdJ5C35rF4vE002JOiYpot9P6o2KW5
6WYssDE+5wv0037CMnThOjMYZIX7fnN/JvCMyMjtG5aRkF29LCzuN+0nPl81
VuQVwPf0EfZaNhLFra0lVpQnwVzgyicGa2i+fzq+N5W7ABxGGzuebKDznWGf
bj1eCJ1BYk/adtE+zcrxoV4sF+z0amcuIYlLIq7YWRjmgeoSu9QNp0g8POmS
5a+QD9lXdJatMiHxqvgaHnNFBpz4aX039CaJ8efAL20hD/raFDULvEg8tDzw
zr/b2VDWpiqlFUXf/9EF+S0P8+FWsZmFRNZ/fb/H7mY2A1Sh0nFdOYlMpri0
0ZPbMLDCevFNO4lCR2ROPjO6BTqCfxw9B0ncVJGvrjRfAYqJ7KqTBInCESX9
jMZCmDN69PXfLO0//7qbYicLgFun+kMaB4VfbOT39E2nwWGJ1oOXhSj8XRQX
LvcpCXiLWSzPbKaQPYdRxZ8dAVsNPHr7FClcmBWrqH3IgPV62Ztm1Si0Z0Sh
//kA6NEVrknQo3neZae4bKI//HwikPLHlPZbnmNZVRX+8N3j4eUFOzqfeUqr
/naHgLJx7s1YPwr5Lqv37ZGl/SFy55VnsRSeF75sOHzbF449Xptil0Oho7vO
Ugp8IM3YW4yopDD/3Y73d1b7QMeJ2NDFx/TrQz75LPj7wtFLY0oFXRReeKT8
cDMHzeenT5+2G6H3z5OOyFTNANi4ZGKv1STt71Wu62/pesKtV/VGv/7Rn+9n
D9fGfHfgmVK2FuNmouyyIz6CCq6wRYD3YYMIE+Xmo/kMM+3hfpGF4batTNT4
rv72q6ALbAiyHFXcx8RWnxAqlvIE0fPboqU1mNhe//TXzll/cLT4pbjckkC2
luygLW7psOSUfOIxZwKFAtY1rXqcDHO3zELrgwjk7ukoN3+eCK90vPvcEglU
2ffuoIxLJJj/gbLsAprfX34b7I0NB8vVvwVn7hK4k2O69viFGNgklyOk+ZTm
/U4hI4mdEfA48YiWzCsCla9OHWXNC4e2G+47TT8SGL+/Nnk2PQYij5UUp/4g
cHzd8o3nGorhaXxrDctSEnW67X14viRC39ZX62pWkbgqaeR0vA0Dcp/583SL
k+iqxm66N572zS7peDE5Eo9dvNbw+AkDXg81lpsdIFFu996m6vhcKNmj92+v
Fombfd6swWe5MDnv+sfiAokti2qXEkcKgNmaFB5/nfYBbWu1m4XlcI698O4P
NxKbGs7+KtqWA/5qZTbHw0iUWOzljJ7NhbDu0ks700j8E2a2TjO/EJZ0HFhq
V0Jiekl92bRrKexqa1aorCUx8sW0RuypSuhVOrRE4gWJ7U2HU1Za0n4wVSj1
to+eh7Rh5cThSgi9XfXyzyd6/qiE02FYBLtGbvNp/SbxIL/n7G3OYkhYWTiR
zkb7ZaLMgVXbs+BNWMKUIz/dxy2DkxvKEyHQWaC8TIpCk5D+FJKZCN/NI/+O
7KbzufD00fIdedDWPPP+8CEKP9q5eU82JIC/3fF1UzoUDgv0fil7HwjT69XH
OEwolOJUjn+7OQAGDsofPHWTwkZly0HbX/7gcElwZ6IX/f7l2/acvuQPflOT
NVxRFHL4qewwOh0I1j3lSR0ZtL+H/7qpfNcD+Kr4F6dKKUy3mjwtvc8HpFmt
57UeUhjUF3z1R6Qf/Dr7OCa/jUJ/p2ilhzf9IXd6uUHAIP35OT+ahNn7wmP2
8c4nBL3/GnaOtr3zgETh+wNzsxS+PxTxSzvIA4YyPFzNOZi4h21n3DtTd1hi
tc1eTJCJYZ/2na72dITRA76/laTpvn/6aaOMpQPI+bTyhCgwUXWA/+uBjY7w
vYV7LacaE2t5Vh9vb/CFDLWqPSY3CSxPkvh2sCgJAm7/ajvoTfO5jSvnreu5
UHMoOUM2isCQgdW+Q2ujwCtqIfp5BoGmW7aV8R0LA+vap5khZTRPXWI/2dMd
D8UriM8GDwn8kGnzxfluLDwpTJbQbCdw2s1GVCcwBDSrQ+ZYhgh8Vn+8oM4t
EqKe7XxYQxD4pffAkemQOKhcf/l6+B8CpdX8qqh/cSBWMHX2BgeJC8F2l5aG
poL4Bw2zv2tJpCqTim4xmuDov/nwu9I0Pxx7/681vQgeqq7+5qJA4j71W+4e
6rmwsrMSjdVInPl0L1KIOx9626MVec6QaHP8eoT2dwac7JTmqzElsUHQ9PMN
rUK4JXJ0yNue5h/TZYulc3Reo1tGz/rR++KCSOE981zoO9nzRjuOxOGOrMyG
gXzo8Fl3Y2Ueif4zJWMRHAxwq15PvrhN89iWjNN7uu4Ax57yswWNJG6sFd/8
2aUQRgdTFyJekjiqySh69Z32hf3HX0iO0P6fUvxiS3oejLmeKxudpHnqVkPQ
+OEiePa+tb3sH+0Tu78f8xXMg4DYpsFUbgrXih5OV/RLhLt358O1xShcX3ji
AFdwAmQMfNuwsJXCfaLmv0ws4sFM43pJlzKFy35+mZFwjACnD+rXyzQo1BwD
qwNNASAh/0Vb0YBCIbeUmP2BgfD18qcTpAXd30dH44xd/YGj7nBQqROFPw5L
v79i4Q8sF7dVRgZRSHnYdOncCgX1zfZrPBMpbNfp6fH86gsbSr1ThQooTPi8
3ebutBds4CH3jdylfbgs8736Jh+wSaoWuNNEYSB1yewAP70/rnN8KOilcGar
dfvQaw9QvJOlbfKRwjdGL5Yd2OoDEX+o3LU/6Hl9PSu/mu7zhsim8cklTFR0
fS6zzt8dDmj8udy7ivblAq/Nwcc8QPfxLxZTcSY6HeK2D7lkC1F82o/WydF8
pKlfduuUIwhELL/7SYX2B7nW2uMhnqD+VYPjsBYTbzgG3Rh0DIDpDW0TKy8T
eGg0w4KdJRDM5IMevLQh8Gr/zy5uyVSoim53veNDYEDEz0OHiwqg9muLRFQ0
gf+W9W89fjIK5B6zW+7+7+cJDu2+nJlhEPC2K3umnEA3qye/h84kwCaxmdVt
9QTKP347NZ8cB19VPHOaOwgcdZvk+fk6EDQFX5y8OUzg3QgZN0/bcJgSslfe
RBGY935MemguBdzMi/j/zRH4hpevz2VjLNTVxL3uXEGi7Tf17sAzqfDX3zlE
UobEvMsWXWtGGNB3P0qAUKTPdw5NjBTnwEAr66NBdZpfRtJ3xlzJh5uJB4Jc
ztL5D9VPDjpYCLoh/WFSV0hcxi1x5zKT9omWOa9vDiQWHzDivuNA88V2r4oX
/iSurNrQwKObB3q2xrPt8TQvNVXvtLYrAPGby8zc80ksL8qP3rS0AHYncHEp
VZH48e8hDfVVVSC9LD1XoIlE81apsaW0z3+7cE0l6j2Juj2rfV/n5gMZ4aF5
8huJrx+a7DagfWPn+Nf4dQskbg2cC37WlAXZwg0zAivpvuze3GbEHg95HHqe
devo/C1zvW9YkwDfxTVUrWQpPHDvZL2xUQKI+7Z8VVWh98HU25S5m5Gw7PO/
AO7jFIbyMEBGKQAuPHR4lGtIYcM+e46+KzTfDzt+0r9KYY1J6wxnpA+s3tR/
TNSFQqUk91bePn+we/AkfTGYQkNlK9XohkAI0zF9PZJEYXbRrvoIhg/wGxyt
DGRQWOF3LgdSvMGttNpV6x6FdWoSoueifUFO2s97wzMKVxaGTx2mfZjDuzxb
8jWFL1IPqm+V8gL59kmjwJ8UegVbRP364gWdOi3tRixMzP2Z9qT4mztIvNUX
l+dj4q/P/OelmK7wsWfrmpcSTDQ3Fyp+JG4LAWuDZ8J3MNEzvpVcPOYI7UL7
e86rMrHvp3arxBpfWLc05LPFVQKdM8qj1/dnw0Tc0W/NLgT6neH+9v5pMlhv
XoiQDCHwToj9wSUesWAqe/TtQBKBjnlHHjPovlf0DDUULaT3hW/zfMOGCHjW
3WRteI/AyYOf6vn5o+BJwlfhtmcEimpKiXxQSAS380+0cl8TuHDvpxvnzShY
ae052DRGIJ3ROrbxCBD4sW1+7RSBPUXPfa4eLIZXTj3V5iwkXtCIa0pelQQs
N1aIruEjkQxTH668lA98lcr3NNeTqBKWd0V7eyH0T10e99xBovJsvWqAdj7w
lniWjKn+788Lll46OFOpTaLzB5Er5K086DEjM5svkhjbKjFszFMAvG+DB1fd
ILG3VVFAvrMEOHXEyvQ8aH5fbxdf9DAX7Pfmr+kIJ7GiQNdVtjoPkiR7WG+l
k+jSdW/QOJ8BKfoTJ3pvkRiuFLvc72IVrFj4sW17HYm5jqX7r7dXwJ6in9n+
rfT9lw3o/d5RBN2NgU2KAyT2f9v7UU76NmhIrxZ2/ELiL64UBckrDPCMSmSr
nCaRv6/Z/g8/PW8WXEGi7BQaGVz8qtycCZ6HZGK+ClC4ZH98qX17Ijy4KjfF
tYnCa1jwQFw6DcyWbmae30Phw+U6iwkLRdCWvtat6DCFhRVKSuPvEiC3MKXm
pC6FpPnipZr1gaA3v2az/yUKWdu0eXHED5rOBslW2VB4Nu/DRUrXD3LWUy1r
fChUMz7i9tnMFxQn1WdtoimMDzn59RlvAKhuVejfmkXh56rCN4YvPGHTXTHy
ZjmFnxrZnDikfOGZ6t/Y2/UU6p1Rult6NgBeK3e8lOqg8N8ORveh5z6Que9I
0vwQhX5uxgKT4A/qAYx7khQ9f4JP384UecDFg3+uucxRWFy/Y8zIwhV2zB++
17aCiVfd6mb/zXqAzTbJClchJi4KGGX8HXeAGMbM4N3NTHyzT3Tl7r8OsP6g
y9MEdSbeXJPT8UnTDzhXl1g8vEJglOIy69KEGJAeM9drdyCww24uO687BWKG
zPyvBhAYd/6LkZJQEkRFBnvIxxO4LYR9iY5YFFStezEqnUfgtWirR4f2hMHG
N8eCi+8QuJEwYXE1jQP7Abu1bY0EHr664V3v+xjYc0Ji5m43ga8ayfHtcVFQ
1rRBQHiUwJupE8bt3RHAGvhSVPwbgcaKhkN9PSVQaF1vdmeBQFBdnqZYlwQj
fF3ONjwkZs05J/xZTAfV+PnfBmIksghFbRxmPgdi/42al9tIPBshZD7cyQC7
nUHGn5Xp/j3lWP/7RR5YJUqee65J4hY5p9a2eAZIzK+JkzhHYkfo4JS1UCHc
vl1ZJXyVxLn0HUe9swohKjxcIM+FzufK29uiQnJAs4r3UlswiU/n1JpHtfLA
SUNooS6Zno+Yy98NPAvh3JjTgHQRiadfH5Q1YssH8Vav9N01NM8ca11xqaQS
5Pqaczqek6hHxMXf9mdAd4a8TdxrEo1+2q3sSa+CDHx8y3eMPp9AFr+zK4Rq
ntDNiz9J/Jnz9M3NpkIo3jQfIcZC4VyfXr/njXxYVTF1mGU13e/2G7N+pySA
3D5UMpWk8HhU/L5TVYmwlVdJwGwnhcq5xnn5XFngsPLmnqmDFO6Vnn/VGRQP
p5vb1lVoU/ggL8O+ZlkQGFw4Yhd3kead8/uiq8SCYXDDpRBBDwpPmLLPOb30
A73TbJq14RR27Q3q+GodAGYHOt4EpFH4bmx/fQTN9xnLqjrcSij8c6Ia9Fo8
Qfx3/7LFWgpFBfTrDxv7g+/Oos1SL2i/WLMtsCs5CHSHZ9NWDVD4/UjcwYR3
PjASlnvc+QuF+yNbjXuKPeFY4NS41zSF53gPS7g/9IX5wsBGfnYmXlJbXnei
0R2O+amY9/EzUWFPef6XGy7wYD+f8xMpJoZosZw+nOoAzmLSbcryTGRNSKn9
pegM06WGmi6HmNgffif/PtMHdn43v8J/g873h63JjdmZcOuQTFiTB4GXq+WW
6fdnwgn75KS34TSfG7j5xq8OB6V2dkWvNJpX2pR4eTaFQt2wZu+qWwSGyzEV
iug+N+tQOcv5gEANQsBkOC8W+E5dW9f2gsBlRrtPfRWNg8ZrpgVRA3T/s7Nq
O94JBxvhgWyrLwR+Ox1zsyItEjZdDBlZNUP7d9S/8OziLFji/ZlNjJ3EqisF
TtOqqSD94sjje/w037c3iw1z1MJYm7ODykaa39NWuahGFkBLqcFqWXkSTR9W
yWleyYEyScep0UMkBpZyyyscyIIk2YsJabokTv4+J8h1Mw+sl5qwsNuSmJz8
eVhwYz4E8JcfWu5D4li8AXtGWDZk1Cs0d0aTqPX66/Iv9flQ+yd0RWo2PR85
P0Tb2Gi/bjd84llB+4j+Q/vai3dAxUU8W7mTxO2nnZ1s/cuha7yff2iIxDie
hyi2oRxmOM2DLSkS0377hnmvKgT1VXkfjOZIfMN4dTxOJB9SioW9RTgpNOeu
Z3wpyYTJvgvDg8IUcsfmRjzlS4EjaaIV1TJ0Xudri6xGYyHrp8DT00o0P8v6
nLxmmw7rtzxuOH+U7tsSaY7g0AD4GmR+8scZClnOnK+YYA0AnayxIfsrdH9m
Llact/WHwfiVOsYOFJ5cebWhVNsfzMUdl/MGUHgq1J2v6JofCAWHFm6Jp7A6
YBPHmdXeICSYNdCdS+8PQRbOb9/9oMIkePmVOxSazvSN/dL3AcsQcfHLjfQ+
4ZX3N+P0g81qP5w3dlN4tY/x8jftsxNJ0bHUewpV1awz4o74Q5lniUTHVwpj
h7RfBVt7g92fhe+2CxQ+6n6e5jvhA8anWW758NB8/2PCeL2DK6S+XjYtJsZE
2SNWWYpOtmCxakS1cBsTy9eo5AcmO4KRjNnNFGUm+vakaC1l9YXjvUkqdzRp
P162rWW02B980vbJfDIlsP/VFzvVZh9QD58O6rQjsOC1mUvxZDLkKKR4RfoR
uHvAwVTmCQOkHm/uMoklsORyjVaLaBR8v2FRIJtD4NPgknr2wSDQ6w9f011J
59fxndu+gzEQc6Tr+KMuAtnI+kK2w6Hwz8px95ERAocGLUmFvaHwV1uyVHKS
wOL1X0+Jf2JADHmnvu8f7QeMBCBuR8MJs53S2VwknvE7x81jmwZnlhmvNREh
8eJvv7+KCs3ww9gue3YLiT8WiCiDD4Ww0SGs7osSiZlHexnjp7IhrzKOq/sY
ifoWctyjy/PhaKsM9wkDEgdSCkvTDt4Gv4ynWeIWJHJpDZ5uCC8EnS2H2144
kdiIm0PZbXLh3s2W4NZAEgnWOZHHF/PA7N1+96eJJDoJHe1TXywElS2q4qcY
JHr6NRnI/cyHYjm10wrV9H7JTLvwN6USbk3ulPzxlMRaxZWy9/8woDeM82hj
739/vzm9T5mrHNROJkwFf6D9IKt7KoMvn/Ztln2bf5DI0xQvx95RDEw2J951
SyiU7ZJ8E9+RCf2mb9dx81JYfshnn/KJOJjIaRuMkqDzt03+uV9wDkQlN26x
lKOwXk+h88etHGg9ms4nrErzedCm2QzNJNjWZ3rq3QkK82eOc95JDoDB8GHB
tPMU/vbRet+kEQjif/c5y12n8Ndck3zvfV+YlsqwFHaj/Tfa3uQ4uz9cZh/7
ORRKoUDkzS77MX+YbRZ8cyeFQmG2bXcfnfKBgYp/B3yKKJRw6/PpavaEEzrN
B6XvU/gz+kCMJ/iAfmnCqw3NtI+PSYW8uOYP5dtPZwr1UbhryYxHSYAPyEZl
r8379N/ztk2+PIj2ANXi75J+v+h5OMC7XNrSAz65SzfvY2MiVEbePnTeC6q3
azaxrWEik7nnmme4G3Sxi6u9kGTi8yeNcTKy9uCZ2mdiuouJjiteq/8IdQKT
y20814CJxerWP8T4fKHQZWaT6nUCF1N7nMZZ06GNvF//zI3u9y+ZE+/fpsKF
zrbY+VACX4f7/QlfEQazsmSiQDGBO7R/So3HhUNCl/fHXfcJjH/0cK+JSxQQ
dmWibc0Eeq4NGahWCQIx09V/kvsIvKGdJf05KwQan259lPyJwDnPlMvaByJh
3ebBG2t+E7iP/+DywPQCIOeGLtDDgtK7Yi7dqEmEBJEiq/HVJAaxJJ5u/JsD
cypvEw5vIDFHouE996FiePny4l+9XSS2TAdp7h/LBaMrrtofgcRS9kduV2fy
oEO9S42hQ+eZPU60uSYfSlLeSKUZk1hy/lbaJJ1fmLT/ynmTnodC8Ek/lQ/q
VWYz271IZD+7ZNMehRzgcGMyOyJJnBc/Hlnmkg+FkeVBuZkkylkoHBFVZkAN
n+Ty4jISE+9LfbR+dRu8UrY5bK0n8QNhKHOOuwJqo0MkjNtJXHMtuSRCtQS6
eysojkESBSecGsuyyiFHSKXbmqDneeemaVbTQvjYJToVNEviv7f7/OUjGTAc
HMciykFhs9FT0cJvaXAv4lDNuCCF2tl9vPy3k2BhKUNnVJrChGHih8COMGBx
y+rXV6TwSwxw77xQBI6XyQxfNXpe9v/dMsgdAC1Ji37r9Si0N+RYq3fYH7Qd
NR+H2FH4tWagrT4qGPwkbn/h86N9Va3hXK+gL8goW57UiqXw4HRDsU0W3c85
RP98Np3f3Z2dj/96Armi1+VaJc1b+1cx50V9IGmM2yD0MX09Q9E8pwk/mG8Y
kdrYRaHTxYVNvDk+cGiCiP/1jsKix5YshasDYNaniJxm0tcnv4hNnPIAS7F/
2x3/UTjLu1W6y94DjsrkVzK4mLgkzVF7/rwHsPms0T0uwsStJznf07scPAZJ
7vItTLz3ILd5DZczmDH42Z8oMTGlVMl2WtATakKWL8k/xsTq17xbiQv+EB8q
VBRrQfOIdpH7Wec04NjfL9nqRPdzgpKo/v4U8PLdFaIWRODfHOlPxQ4JMHvh
y1b2RNqHq07lvPgdCQ6dMuskCwisWjfaZlQdDr96l/31uUugmEjtSGhFNKTX
7BRqayLwj6ZBXfbJWOg7bZN3q5dA3yXXqd3m4WAk1D0z+YFAxTczYFEXDVwP
PSNEfhAo/Gu2u7KmGB79bOaOWEJiJ9votxuYBDYN11txFYkyeVf1WK7kw2bJ
jDenxEkUXjklcT37NnwQtOws3E5iWZVKrpBjITQxfdk+qZAY8GPR/gPd34ru
t4vr/vu+QLRfw4mV+TCzc1Fw6jx9/cpua///nuf7LL2Z/zqJ2gJm2ytYy6Fj
8pWJuxuJuleUNVq35MDIL0Pl9lASN8haGLWP5ELQvV8+VakkFgdobI5vLAS3
zMq4f8UkTnRKSaU/KYAE09qxHbUkKmzcF+CUUAlVjy+sL24h8ZLxtgk7cZrv
Ky6kmvWR2Fq92nXe8TZMyU9ccv9E4lH7t67DPYUgpL1qbf8v2p8HvM49lSwG
M/WAFWJsNB9wvRPz3JoFR2d5rs2uofDW6x2t1z0SwaHnfuJeKQqj7x3b84Ul
AV6EVC4x2U3zyZKxU36s2SDx5pB+J1L4fFdan+OyBHCt2UV66VDos+OIFm9w
IPTJlnWEGdM+u7k+rDvNHxSVmtKGrCm8sUtj3ZuVAVAvKV0s4EXhsF1fb9J5
2j9zNuUmRNL93OD0O6IwAHrv+vTpZ9D7YjRur6GxB5hcsDjvWEr7bmC3jpSM
F/xMJdr762j/MNl2Oj7DD27de+Au1UbPyxfHiWNh9P4Iy0phH6RwZpU44x+H
D8QF5/ucIChcjJVZ+26NJ+heni5yn6XwytxAjk26Fwj0jtd9W87Ed5yZdbeu
uMNwnxxn8Vomvk577dSf7wgFNmwldZuYKN9j1SD8xR5ssh3lVyswMdtnb+Mv
NUeos+grIK0JNF8TIUaVJ0NEWop+oxeBMZt21U0szwVlYbP0e5EEfqxsbvYt
jIT8NPNxnQzah/N77ivrhcKetj+tH+sIvPP27uAQXxzs3SEj0dZG4Plj8q8z
loXCZbvqk4GDNL+csZ+Jrw6BDTcD/ZAgMMXwF1/eVCxsj1c8yf2HQBcW28gT
xXGwlvVH2fRyEp2dwzefaE2FWsePq4LXkvhL3l0ze6AJOg3W6ilIk3h/17lZ
u0dF8Cj49BZWBRJDRJ+EvWTmwL93Ninvj5C4PrjuLuNVHpisZn6M1qP986WW
hxozHwyXlO1AUxKltp2T6jHMhyyBE2uX2tN8wj7RO36Rnhen35GjviRO3RxS
6TyaC7sWvbK7Ykm8XJGbY3KyAF5cMY+IySWxna3HfeImA34Fxrmfvk2imexs
pp/rXbjWmcW2qZFEcBL8yKdRBI0m1eJrX9L8sk+geSChDLqml6iWv6NfP/VN
7yrmg9Z8tOrlSRI5j5nu5kopgtKTMt2K/0gMD9775JBKHui15vwV5qbQLygo
Xag+CTZJOrP0iFLYqGsi+fFFAoTtjuMK3UrhX+6Ckt6pOFC5HllxUplCTgGb
ntr8SBBw7hRt0qfzGiF3NmhZIHRZH1e0sqDwfkwUeWOY5vmq3g8KThSGulxM
mlrnD5rrlDevDKLQLZ/n6whrCHC+vjW/LJHCC5OBicVvfCEoUvdtfj6FnQdz
r285SvP4fZUk47sUcpmXXxjy9wHl7TvHlZsoJK452Cas8AGdNtaOjb20/07O
a5vJeUGkmkL0xw8Ucog+Zf/wwgdM3Er1cr9TWFBdzLrjmid49C2ttl5C++fm
H/Iioh7g7HWp4PwqJp7P7mCt/O4GcltmU7+uY+IMd6bKeS9b0D3SY5O9nYnr
UuM69oc70jx1d+CmChOVdM9VxZ/wglFRadeGE0xs1Cs9GeAaAA9HfDnmLhM4
KC/u6VLgD3rGqjldtgSOxmhnSYykwK2PuzyyfQnMYo3IdepngHXfjJNzDIGf
1M0++P+JBN61e4N2ZBPo2vxXsMcnBKwMyt+OVRB4fL9Y/bXOSFDi6lvT9ohA
Vavc6Ger4uBx46bpJ50EKks6O7Mr0PlvEn9i+I7O/8THXXvWhsCMfJudFJPA
2fEinn8ieRBYXGZJ/CVwI/f0qgtFMRAQecmzhpPEbZI/RZprUmH6x681PDTf
H7BnSKdnMOBfIrflxF4S/+axh8np5MAjleNmb47SfL+Yf3bKLR/O75DXuKxP
z0+ZY9QXjhK4FtfJL2n+3/f1Rf7wHmLA7tmsjcOO9Pyw+0Wt7cyDa10bRFsD
SNxafzFgMjQPLhR1PmhJoOeBV9PUVqsQZDsk0byAxCIMXJdtmgc3LslUKt4l
0fXMlQz+5Ntg+efKJVaa71+nNDe5HqP5fqnT7v4eEhfbupex1ZaByNlFwfBR
Em/2P0lID8sHsfIG3P+dxOOxSwK+RRdDlMNu3XWLtD+832EkuS8THqp2cPKt
onBc7KtM5sU4eK63qqxAnMK9Vve9Zt0SAIbY9lzbTiG0HRt7a5gMDma7lsge
oNDu2XU2VY94EDLaSf06TmHtZk7359sDYIDSlzt8jULB2xtUYz/5QEDBAwMR
V9oX/D353Kz9gTTWbZkMoVA6S3YFGRIEjeGP9F4kU+juy3Xxt603OLHmTfsV
0nw+baf4mtsbxj0fDe+rofB83uhiVq0vPLUML9nwnL7+1okC/83+cO6sj/i6
NzSfOTxvKkzygd5ocY/74xS+/8i/7VKVB9Tuu9noP0Vh2nW9ppY7HmD4efrY
CVYmcoUczfvk7QnXWE99F13NRNa9/h94zVxh6YBcmfNOJobUHLgaNO8ISY/8
vl0+SPOPosuf/hJf+FB/kP30NQIfsMv+3aueAQOPF988dyXw+ob+1X+mU8Dc
zSx6Fc3v5gz2sr3nwkCI33lnUzKBtoMcTtK5ISD05oGzUBGBJ2zSO2oUIqDs
ZG6xWg2BIkpfH6pfjIQ3/p0ibc8JlC4ScjrdEwSa76/mZ7yh56kjiXNqYzh8
Fnp9vHycQN3uXIGMHxHwvraPQ4+V9kO4Xxz7OxE6Dg88/ctH4nUWUd2msBxY
Nr1i01FJmm/NVcZ/+zHg1aXRm1d3ksjQTZv77pcHisF//378P7/P//lVUNat
kyTaMCs8zGbz4dHCe5PbRiRa9VtlO40XgsyYpxmPNe2vPTqtDR0FIOPbeAo9
SezbXvd9i0guPB446tMRQeKNcaYFQ4juf/2DzxkZJKrF3tufociAwmq2rY9K
SUwJ0R2pSL0DR9pXdm97SOKe2hJdseOV4JT+yNi2jcTznw0TPK/R/K4h0i/x
lsR7BRqrPNjKwVGi6JftBIlXDxqlLEwXwO2Kgb9pM/T+UH4dW9DCAK8Z7SOi
yyl8o/6HT40lA1ItFPKJtRQaPVf+Z+6TCMP3CMnpTRSqaBgJW00lQvWjjx8M
FSj0EukTLNpSAuu9fcITjlC49epJqzUbg6BavENM6TSFkt28hVSTPyR8Oqrn
fZnmjzfD0641fsBhbumYaUu/f1y4jYz2A96czv7VvhT2thZtM632gYr4finj
GDp/zskD1uUB4HQlWp+f5vmkctEQw4eeEGLkvOtGBYVBrTactk4+IMfH9jvj
EYVS4WNS3VQAXPV880eqk8Ij5cct9uX7wHdeQYE/w/T1Vv4ey10IgCw/aR1u
mueLyCbrih8e8LHcrcPpL4VZX9JD/ui4w8M4+921nEzcdVmBe/MfL6g7I+Jz
WZiJDgpX0mVZHIEdftjflmEiW+3m35uCHeHLmNWpN3uZKLS3VDB6nTtQYw0f
0o8ysZN94UzUYT942WkSXGhOIOHh0rUyLQnWrpLY3+ZIYAvHDpePv1IgRK49
UD+QwNN75Uy8PBLgsOP9V2IJBBad6jY1XR0FCY6zC1L59LHuG52QhQjg1tv8
JKGKwO0NSi3dnnEQ3HJKsO0JgZXvhn9r7owHtu6WE5U9BG7dvXfpuagoCLjh
GsRK83zJgNiPBw8jYXmOtJ7YdwJVwjW+9iwvgTu3n9RmLRJIPhF4O2CTAcUT
GesNV5L4lotpyshLA/nBjitn1pF4u1V/5fu91fCphMSHsiRGfuRZ2PKVAWkr
2ao+7SfxzDffKbifA6c4ri5tPE7Px1g/8ZW1ELiSV5xZQfO8sJwQY1CkEF7U
MVQEr5FobjQpLN54C8rqdzyMciUxL6pVd3V4DlyD+Ht8NK8PprQ0Xu8sAMOk
9IO77pP49JZYll9mJdi0xZrUNZPoZjfwonO4ALo3vQhwf0PPz0h7Zfz8HWhR
Ph3kNU7zEJeWMNu9Qvi8vUOcmiJxbaXSfKxFIbDXwHExVgrrTRMDHfenwbZX
S/TnV1PY5jzM1qmRCKcC/5lrbaB52ydl2c/8BHDrmOK8vIvmDdVz+7coZUDb
jwG1UaBwe/mXhfFr8WCuuuCfdJLCP28Z0zy7gyDliEt2lBHtly7F6tGrAuG7
zOip7zcofNi7YvWFXppn8g6nrPWkcHBONl8rwg86/iQ4FkZQSH2wntAlAyDD
RfqsdTrNQ1vKnI3EvWHhNje/yy0KL3Y4ZXyQoPPfMmpJ/ff3B6x3umaL+oOA
/e1TUq0UogJ/sOMnf2DcbRfmeksh+W8oedNLL1AK3fD50gTNPxpZR5U8PaFz
ykHdc4bC1udXOl588YFQlXsHWGheNw3Pb89XdIe4MgWlBgEmzgl/ShR/6ARy
fZy8jzcyUdFnr8rrOgeYetfpJb2HiW56Z7L3bneCRp1cS+/DTNSe5Nec7fWG
36XigYs3CBSaE3HImUqHNOtRmyeeBFro7bpP8eTAkeb5lJYImscHLBXfOkfA
1yrFSIt0AocOe8+XWYdAxh7379ylNN/cNz70fSwCThwXjZl+QB9bOmdQVnGw
ETTE21oJDP/e3rWOLRRivnLNhb4lcOUxZYUOlTA49kyOT3+CwK78kw92HYuG
LS7v166cJfClMQZ0VCYC1xPKYAXN8/xOnCfsPqbC96w1FlkCJH4ixscnJJpg
gO/ouNImEn97cNkeX1kETcJ9mYJ7SKxUKXe84ZID7tkF+xNP0zNw69HSGt1k
uGFeY6V/mcQj8xkWXm7ZEMR1NoLVjkSD0/dUZoIK4PPFwd1dMSQqVl4VnOhl
QOOO2baEHBJriCvs/SUMGJdxyrKsJDHr8cWPS0LvgpcVYSTTRaJvxdb33sI0
n9+w2vJsmP488qwfGfT7N7D9vXyFSSI72wbO1muF4LLj04DmXxKXz+3XcbDN
g2mliwdEuOj/36v/vl9pS4cV/65+eyNCYbeoQ23/qiSw+Nw3nLWFPr+yvFOh
MA6+VvTUntpHoVPRicyTikngxC3Tc+wYhaxTcacyzwXC0sXUe2/PUnjohFxC
ztEAiAkSXGFjTqE1p8xf1e1+sD7/e4qmI4V5C5I8yzn9YCBTX3BVIO2/tV/j
/Sl/iNsu0iuYQCEbc0aFQ9UXdHRnDeryKGz2i2PPSfIFXu6P2perKNQrehG0
7gjNI+c2+2o/odDfciLwFbsPPAyey93YQ2HDHvUNV51pnre+zPtllMJK4cuz
gca+wO6xta7mG4V8jfpDJk89YcbCR9dmkcJH0/qlwOEF1MSuzdYrmdihus+Q
e70LjC8stCyjeV2+/wa7or0tDJf09+fJMvGL6mme8QQHGCK4NgbsZ+Ih+RN3
NCV8Ya3zyLna40w8MMOV/rLQH9TO/jjabUbgycItFUaJfqB4v+JGhz2Ba6Kz
fK+tToaUkAUfd38C+Veo/R1uyYYBhv4mzTgC5/7tfnR9ZxT0Pk9u2pJLYNhz
8eG754JB5ew1rfrbBPY9PdmX+y8KjIl4gbYGAq2nXrnpWcbA4lWXMYmvBL6o
uqj642AxpMve5302T/PSdQPp7btiQeOEXNAFUTp/Pdvlu11bYLLz29bxrfR+
r1vQ+3WsEE7ocvB82UefT+hP2Xa4AII3DFa1aZAYeKhGd244H+RNxV8qGNI8
0ZsurWZbDGmFD2TELGn+aRM+sNMjH2zOfbl5z5lE98ZbU8J8ubCEz+pXaxCJ
je7PlvgczgOrNbdUGpJIZDnwvSiPh75f0Lm/+wtJvKth7Sdckwdjfy/NyN+j
j8u08/p8K4H54e/oyDMSq+sPDb07WAS9a7LPl7wi8cupl+YL2pVge2zLy4CP
JL45e467WrEA/CbVdq75SWKhbmel1FARaCY+6BJbSuHqjF8mh/pzYSrk887l
fBTyO55bXv04DrgmA1e4rqew5KeIO6zPgOHTHhLmOyiUdTl9L1QrF8S3LZNi
P0ihWdqqGun+GDionXz/uRaFvp+HkDMhAEQceNWSLlBosENC1+NUMJhxijUK
W1G4w9i4YLjMFyzzvVyE3CmMOlcVtd3fH4bL7MXbwiicN61lV6SP5VjszqSn
UniqwIgFHOm8ntMP9CymsF8wanlOpScwJzPnN7RQuO+BjPxUcSAsWSYtxt9P
4Z71rQcNYnwhIGL9nYjPtB/0nIySE/MEW76zhzcv++/552F7QMYTFvQPJ0yu
YWJag/pD0e+ucCRXcOTZBiaWhHkcPbbUAebOeQmc3M3EuvCJn+1qzrBt+WpZ
W2TijbK/WSaavnB9T6XaFisCrWxNmh4tpoPe+l0JVBiBG7i3z9krhoH/WN9I
QiqBbyxEzNMXQ2EwQKR6dQmBoXUbyw3Ph4OHlpGYeC2BH4zLP686EQPzl8LF
2loIfMJZpFmrkgpfP9dpx/cTKNXD7Xb3dSikWPvK+X2m94H09UNHT0aC5KFd
hXzTBD6ezIyILC4Aox+OAp1rSHT8E/Vxdk8xfPMvZgMpup+vjfw8Svdj+4Gh
INhN4hAvq+BytxwIOjyT8wFJVH/f+jWHKwfuPBCYzD5FIm9hoPav9fmQuLv9
s78J3a/ryy6eq88Hg5mrLhw2JL7YEFRuQOWB+RhHpog3ibKK9ytH2bNBVzTW
sDOKvv9LsaQ3jHyoeCp6LDOLRL46/bVz8wxotj4wHldO4qENIte0Km/DnP/p
9yc6SNzRGRSlFF0G3ecPL/k5SOKWJuHYM58roJ2vp/Q6Sfuv69d8rdlC4P9m
RNr9IbH3JH/S+IECUBbqaxRZQaGp/Zju9dl06LlzsvW9EIUZt7XZNUSSQUfx
XOeZvRRGWlrXHHicB21qehXW6hSuXOnD0KH7d2ilPMFxhkKTWk+J8B5/WF1T
WeFsRqHh92P7eYUDICFAdrmDPYVCLWOTh7OC4FdW3AyvP4X684YsVvz+kDM6
67Y/jsKmYym5T9x84OPQYYMvOXReDerSp/194cQ92UaL2/T5wYjFVlkfWFIj
8NCxgcJnzOkKy+++EMcyobXxJT1ff37LL7XxhcSG+tXfR2ieCQwPr6b5Rddb
JvDDJO2vEX2FjwS9YTLMM9p+nsIzIgsfBQQ84NWjXtl4biaqJL+7W23rAtq3
uDfuEaV5u1TgyDJhO/jpMM4o2crEy2du/rF3c4YP5vV1ZfuY2DaymtFz1Rt8
tp8Uv6XBxKdOt33mpQPAQK272cOSwE3si/HLH2TArHk0xwtnOp9fLtf2xSSD
0+vkMPlgAlkVX2pwSSTD2U2G+8UZBEbMXFkwKwyH4VPje25UExhY+uHG+9EY
qGCsEm57SuDZ0hnfOPcYKO4XmmW8ovlCTOe1K1sEKD6VvjrwkcDMTJWDF3Vi
gLfv9TOhnwQeOhZUFjpYDC/2dJi4LiXRWdZ3aDAvEZSTlO228pI4XG4YtlWM
AWKW19W0JUiM9pk/4W9VCsOBnwzi5Ei8tiLlndlKBky0LZ4dP0BiU576qq6S
XBD7OnPynhaJUTYylgp0/sfbfg0OXyBRvlOEY4jO92xXrM5qK9r3SLeHvMrl
QIq7sFu6k+hwdVlR9K8ckElaKGwPI1FnpOHIasE8CJlrv/mFZnitnq2iW4Tv
QNfON8FyD0jMtmij3vFVws+qzaOJL2geCZqR0R1nQPfeH+Va/ST+2hB53PZK
JYhv9zzg8pmeP90NUe+6CkHTWpfn6W8Sj0lZMjhsCqGpr6VFdBndd1pXb7ze
lgWX14l6TvHTfhZyEBN5kiBpnf0zyY0UytnaKyvypcBatevTF+VpHrBN0tWm
ed6htsyy7hCFd/mPbqWUEiFS7oqOxSkKt2jP6UfsDYK1AqN/gkwoVL4qvKr/
YgB4HC0Ya75JoXa6+EbSlO7fXI5afm8Kl+2DU+35fvBYvabD77/n0R5hubpj
SRBwfBs8i5n0/PmXyj/a5QlNy5vy7MpovkmyW1Q28oVzVj/lnj2ksFh24lr2
Jz84ONvEkGqncH3BrRYfOT/QvGwryDJE8/hanriVe/2AGbhRdC9J4VE/65c+
DzxgoNt5hdsfChuNCupbtrpBngW/0jsOJn5IfHJI1tEdpJfKDMcIMnH0nXXl
YwNHEOFawPvSTHxbZRSmSDjApMm6iXkFJoYOVNzflOUIZ9N2MiLVmHjmAsvz
DnM/8JaKevbmJoEdMgeEDnYkg0ezjmqDN4HljeIWIe55sNuqLTM/ikBNc80p
OBoFBn5J+5UzCVxfHpAzsT8cjMaHZJeXExjjuf78Fe4kENMYYH35kOaVdQus
duvi4Lj48vVt7QSGcI4q+6YHw57pCwyfIfp+onHFNutjYU54eGobSeDdao4s
8cA42FURGcw5R+B1QYtSGZrPJdWml4xz0Lzad3e+2jwV/E7cqb0pSOIT2Sq2
GrsmeJL96emuzXReL+nqOn8qhAe/u6u/Kvz3+ivmngq5sKH+KzmiRqLQ3frG
tAP5oBYoHxZ2hsT9EwMsalsLQS0t9+dWM7qP3dyLK5sKoEbiUM6CPd3fbMJ3
+fIZMFqUKt/pR+IVDcNVWYG54JEjxf0yjp4vq4MJ+Y750J3+Wisij85z/o+7
Vi8LgGWswkD1v+f394g9E152BxhpD4ulnpB46+8mq7piBrCc8R5h7SYRjBRC
u06UQ5d3om7SCO3D3KVcbZz5MHLzesuGeRLL3xV3N/zMhSrD8QfCPBSmjOp2
X4hKAFQPEOgQozDccTjGITMByr20lO23UajJksvZ1hUPYZs1CrT2Uyihf3jy
eXA4yHxb4nfLgMKiQ+yCRycDYKW+t6mlJYWL87v2n1rrD2VPqrdKOlNYqhhr
FJ/pD3UZYnt5gin0y04+9CEyGPzc9m/5lUghl+asCcPPF+pflBlGFlD40Soq
IbjNC15fTn53oZpC6aZafaPz3lCwqHR081MKx7a52dhv9oFP3DzTG19R+Dh5
XyxfgweMinGsHPlIIVStrNNX8oZaF9lv4T8oFPh9zOz3dS9gUfMXuLGUidJc
285KHnIHNv5YSQ1eJgrGarCYnncHl9M/rveLMzG1ZTx8Qd0WXoy0rciQY+KP
BH19uXEHeG11PvL8ASaq3R1fOLnOG0obbyQ3azExYdPqc1knAmDD2SWxRpcI
XPL//o2ULBpxaDP///H/AO2AJAM=
                    "], {{{}, {
                    EdgeForm[], 
                    Directive[
                    Opacity[0.05], 
                    Hue[0.67, 0.6, 0.6]], 
                    GraphicsGroupBox[{
                    PolygonBox[CompressedData["
1:eJwl2mWgVlUCheFLXVLpBmkUpSUFBVFaQEnpku7ulO5UQJBUulsJlRCQEunu
BqVDkHk282OGs8673nX9RmSf74wZGrWr3DZqREREFP9JFe//v6aM9//rvK5T
+PWtyIiI92JHRCSMFhHxY5yIiKnR/RozImK4csO4ERG1Y0RENI8VEVHB0HW9
I3oXOTv4P+Gb8N34crw0vyD/U/7b/Oj4czkmfksezu/E789vzL+B3+E/x8/z
m+t24X6p+z72HlYIS4Nt5M7jruRO4o7GR+FT8b54Cj87kp+Y/xg/LO+Wj8o/
2avJL8GvxM+DJ/fZ07p+1/0E7v+gP0X/B/1h+g3s17LfzP5n9q/pHda7wNnO
34j/jO/Cl+Gl+AX4n/Cz8qPhz+RI/KbckduP24h7HbvNfYad43bjNtPtzK2h
mxd/Fy+Ip8Y3+Nlz+Sv4E/mj8JH4FLwPnpwfg5+I/wj/S94lH5E32vuS/zG/
Ij83nsxnT+M6m/vx3Z+n/63+PP2h+vXt17Tf1H55+1f1/tI7z9nG34D/hP+O
L8VL8vPzS/Cz8KPiT+UY+A15GL8Dvy+/If8afov/FD/L78pvqt+JX10/D54N
L4Cnwtfz5/CX8yfwR+Ij8G/x3ngyfnR+Qv5D/HfXh11vsFWDW5xbgZsLS+qz
p3b9jvtvuj+X+43+XP0h+vVsf2m7ie1ytq/oHdI7x/mNvx7fiO/El+Cf8vPx
P+Zn5kfBn8jR8evyUH57fh9+A/5V/Cb/CX6G34XfRL8jv5p+bvwdPD+eEl/H
n81fxh/PH4EPx7/Be+FJ+dH4CfgP8EPyTvkveb296vxi/M/4OfEk4Z9/12+7
/4b7c/Qn68/RH6xf134N+1/ZL2v/st6femc5v/LX4RvwHfhi/BP++/zi/Ezh
Dxj8sRwNvyYP4bfj9+bXh6/gN/iP8dP8zvyv9Dvwq+rnwt/G8+Ep8LX8Wfyl
/HH84fgwfDLeE0/Cj8qPz7+P/ynvkA/J6+xV43/EL8/PgSf2+VO6zup+PPdn
60/Sn60/SL+O/er2G9svY/+S3kG9M5xf+Gvx9fh2fBFegp+XX4yfkf9KfiRH
xa/Kg/lt+b349fiX+df5j/BT/E76jfXb86vo58Sz4u/jyfE1/Jn8Jfyx/KHY
JKwHlpgbhfsm9x52UN4u/ymvtVWV+yG3HDc7nshnT+E6i/tx3Z+lP1F/lv7X
+rX97Gr2G9kvbf+i3gG905yt/DX4OnwbvhD/mJ+H/xE/A/8/+aEcBb8iD+K3
4ffk1+Vf4l/jP8RP8jvqN9Jvx6+snwPPgufFk+Gr+d/zF/PH8IfhQ/CJeHc8
ET+C/wb/H5cH5G3yQXmNvaLcsuF8wxL67MldZ7YZx/2ZuhN0Z+oO1K1lu6rt
hrZL2b6gt1/vFGcLfzW+Fv8NX4AX5+fmf8hPz38pP5Aj8Mvy1/zW/B78Om5f
5F/lP8BP8DvoN9Rvy/9CPzueGc+DJ8VX8WfwF/FHh7/v+GB8At4NT8h/hcfj
/43vl3+zd0Beba8KvwheJpxxeAKfP5nrTO7Hdv97/fH63+sPCOej/Sr2G9gv
af+83j69k5zN/FX4GvxXfD5ejJ+LX5Sfjv9Cvi+/ki/JA/mt+N35tfkX+Ff4
9/nH+e31G+i30f9c/z08E54bT4Kv5E/nL+SP4g/BB+Hj8a54Av5/eFz+XXyf
/Ku9/fIqe5X5H+ClwzmHx/f5k7rO6H4s92foj9Ofod8/nJH2K9uvb/9T++f0
9uqd4Gzir8RX47/gP+If8XPyi/Df4v8r35P/ky/KA/gt+d34tfjn+Zf59/jH
+O306+u31q+k/y6eEc+FJ8ZX8L/jL+CP5H+NjcO6YPG5L7E43DvYXvkXW/vk
lba+4BbGS4VzDn/TZ0/iOoP7Md2frj9Wf7p+v3BG+tlf2K9n/xP7Z/X+0DvO
+Zm/Al+Fb8V/wD/k5+B/wE/Lfy7/I7+UL8j9+S34Xfk1+ef4l/j/8I/y2+rX
02+lX1E/G54Bz4knwpfzp/Hn80fwB+MD8bF4Z/xN/gs8Nv82/oe81d5eeYW9
z/mF8JLhnMPf8PkTu07vfqT73+mP0f9Ov284I+1/br+u/RL2z+jt0TvG+Ym/
HF+Jb8Hn4UX52fmF+Wn4z+S/5Rfyebkfvzm/C/9L/ln+Rf7f/CP8Nvp19Vvq
V9B/B0+P58AT4sv4U8PzOH84fxA+AB+Dd8Lf4P+Lx+LfwvfIW+z9IS+3V4lf
EP80nHN4PJ8/ket07sdwf5r+aP1p+n3CGWm/kv069j+2f1pvt95Rzkb+MnwF
vhmfixfhv8cvxE/Nfyrflf+Vz8l9+c34nfk1+Gf4F/h3+Yf5rfXr6LfQ/0z/
bTwdnh1PgC/lTwnP5Pxh4fc+3h8fjXfE4/Gf4zH5N/Hd8mZ7e+Rl9iryC+Cf
hLMuPJL4/Aldv+V+dPen6o/Sn6rfO5yT9ivar22/uP1Terv0jnA28Jfiy/FN
+Bz8A/67/IL8VPwn8h35uXxW7sNvyu/Er84/zT/Pv8P/i99Kv7Z+c/3y+lnx
t/D38Pj4Ev634bmcP5Q/EO+Hj8I74HH5z/BI/g18l7zJ3m55qb0K/Px4iXDe
4XF8/gSu07ofzf0p+iP1p+j3CmeF/Qr2a9kvZv+k3u96hznr+UvwZfjP+Gy8
MD8bvwA/Jf+xfFt+Jp+Re/Ob8Dvyq/FP8c/xb/MP8Vvq19Jvpl9OPwueFn8X
fxP/JjyXc4dwB2B9sZFYeywO9ykeg3s9POvLP9vaJS+x9ZmfnQ//OJx1eGyf
Pb7rNO5Hdf9b/RH63+r3DOeE/c/s17T/kf0Tejv1/uKs4y/Gl+I/4bPwd7j5
uSm4j2zdkp/Kp+Ve3K+4HbhVuSe5Z7m3uH9yW+jX1G+qX1Y/M54Gz4a/gS/m
Tw7P5PzB/P54H3wE3g6PzX+CR+dfC9+/bf3uerGt8tz3seLhjAuPIT73m65T
ux/F/W+4w/W/0e8Rzgjb5W1/aftD28f1dugd4qzlL8KX4BvxmXgh/tv8fPzk
/IfyTfmJfEruyW/Mb8+vwj/BP8O/yT8Yvtvrf6nfRL+MfiY8Nf4OHg9fxJ8U
nsf5g/j98N74cDy8xIjFf4xH41/Fd8ob7e2UF9krx8+LFwvnXPgz36+p3Itw
b5jeZL3u4WywW85uDbtF7R7T2a7zp/4a9YX4YnwD/j1e0M/Jyn+fn4z/QL4h
P5ZPyj34jfjt+JX5x/mn+Tf4B/jN9Gvof6VfWj8jngp/G4+LL+RPDM/i/K/5
ffFe+DC8DR4zfJ/Ao/Kv4DvkDfZ2yAvtleXnwT8K5xse09/3eK5Tuv+KP1l/
qP4k/W7hbLBf1n51+0Xwo3rb+Ac5q/kL8EX4enwGXoCfhZ+Xn5R/X74uP5JP
yN35Dflt+V/wj/FP8a/z9/Ob6lfXb6xfSj8DnhLPisfBF/AnhOdx/kB+H7wn
PhRvjUeG7xR4FP5lfLu83t52eYG9Mvzc+IfhfMMjff64rlO4/x9/kv4Q/Yn6
XcPZYL+M/Wr2P8CP6P3GP8BZFf7+Y+uw6Vh+bmZuHm4S7j35mvxQPi534zbg
tuF+zj1q+yT/Gn8fv4l+Nf1G+iX10+Mp8Cx4bHw+f3x4FucP4PfGe+BD8FZ4
jPCdIlr4m+r5yS/b5HX2tsnz7ZXm58KLhrMNj+Gzx3Gd3P2X/In6g/Un6HcJ
54L90var2i+MH9b7lb+fs5I/H1+Ar8W/w/PxM/Fz8xPz/5Gvyg/kY3JXfn1+
a34l/hH+Cf5V/l7+V/pV9Rvqf6qfDk+OZ8Zj4T/yx4VncX5/fi+8Oz4Yb4lH
D98p8Ff4Rfw3ea293+z9aK8UPydeJJxt4augzx/bdTL3X/An6A/SH6/fOZwN
9kvZr2K/EP6X3i/8fZwV/B/x+fgafBr+Pj8jPxc/Ef9v+Yp8Xz4qd+HX47fi
VwzvHPnH+Vf4f/Ab61fRb6D/if5beDI8Ex4T/4E/NjyP8/vxe+Ld8EF4Czxa
+E6B/4dfwH+V19j71d4P9kryc+AfhPMt/FHn88dyndT9f/nj9b/WH6ffKZwR
9kvar2y/IH5Ibyt/L2c5/wf8R3w1PhXPy8/Az8lPyL8rX5bvyUfkzvy6/Jb8
CuG9I/8Y/zJ/D7+RfmX9+vol9NPiSfGMeCQ+jz8mPI/z+/J74F3xr/HmeNTw
vQJ/iZ/Hf5FX2/vF3jx7n/Kz44XDORf+MfFrEveec8fpDtQdq9sxnA+2P7X9
he0C+J96W7h/cJZx5+E/4KvwKXgefnp+Dn4C/h35kvyPfFjuxK/Db8H/LLx3
4x/lX+Lv5jfU/0K/nv7H+mnwJHgGPAY+lz86PIvz+/C7413wgXgzPEr4ToG/
wM/hW+VV9rbam2vvE/57eKFwzuFR/b2PdJ3Y/Wf8sfoD9MfodwjnhP1P7H9u
Pz9+UG8zfw9nKX8uPg9fiX+L5+an42fnx+ffli/Kf8t/hffZ/Nr85vzy4b0b
/wj/In8Xv4H+5/p19Yvrp8YT4+nx6Pgc/qjwLM7vze+Gd8YH4E2jhodWv9/w
f/Gz4hZ5pb0t9uaE78tYwXDOYVF89hiuE9l8yh2j2193tG77cEbYLmG7ku18
+AG9TfzdnCX8OfhcfAX+DZ6L/xb/Pf6b/FvyBfmufEjuwK/Fb8YvF9678Q/z
L/B/59fXr6RfR7+Yfio8EZ4Oj4bP5o8Mz+H8XvyueCe8P94Ef4XfwZ/jZ/DN
9lbY22xvtr0SeDa8QDjnIsIXPP+buk7o/hP+aP1++qP02+m/797P+rt0FqtP
lnPqpNV5V+cNnZvyefmO/Kfc3lZNTlNO2fBuzV/jX/4az/tr3Mmvp19Rv7b+
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
p8P/B5qGQNk=
                    "]]}]}, {}, {}}, {{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    LineBox[CompressedData["
1:eJwl2wW0V2XChfGL0i0N0t0lIY1KC9LdHdItjQXSKY10d3d3l9Id0qVg6/d7
51tr1nD2efazL/+Dc3nvWU66Fl1qdI4UERGRLHZERPg1TdSIiATvRkTkjBER
McKNxdEiIqZH9mvMiIhD+F38J/wR/tk7ERHto0dENIoSEdEiVkREK3wo3hMf
gT/lR8f/4kfBs8pl7X0oV7C3hn8M38nfjn/Ar8b/hN+Av13/ov4x/R/1f8MT
ydHk5PJg/nT+aP4Y/mR8HX8hfxs/FV4Ez4kXwOvb681vz+/Lv43/hT/HH+Ni
RFp+Qn4u/kj9Jfoz9JfoH8bv4Rfxx3hVQgd+Y35Lfmv8S7wXPhJ/xo+B/82P
imeTy9krIle0t5Z/HN/F34EX4Ffnl+E35O/Qv6R/XP8n/d/xxHJ0OYU8hD+D
P4b/Pbaeu4i7nZsaK4rlwgrabmCrD7cD9wvuHfxv/AX+BKdFpOMncpGbP0p/
qf5M/aX6R/D7+CX8CV6N/zm/Cb8Vvw3+Fd4bH4U/58fE/+FHw7PL5e0VlSvZ
W8c/ge/m78QL8mvwy/Ib8XfqX9Y/oX9R/w88iRxDfl8eyp/JH8sfy5+Cb+Av
5u/gp8GL4bnxQnhDe335n/P78e/i/+Av8ae42xHp+Yn5efij9ZfpzwKW6R/F
H+CX8ad4dX5HflN+a35b/Gu8Dz4af8GPhf/Lj47nkCvYKyZ/am89/yS+J/z+
uDW55biNubt0r+ie1L2k+yeeVI4pf8mbxRvHG2d3KraRu4S7k5sWL47nwQvj
jWx9we3I7W/rHv4v/gp/hvslIgM/CT8vf4z+cv3Z+sv1j+E/41fwZ3gNfid+
M2Ibfjv8G7wvPgZ/yY+N/8ePgeeUK9orLle2t4F/Ct/L34UX5tfil+c34e/W
v6p/Sv+y/l/he5McS04pf8WfzR/PH8+fhm/iL+Xv4qfDS+B58Q/xxvb68Tvx
72P/Ya+x5xgtIqP/SsrNxx2ru0L3B90VvtZx/CF+FX+O1+R35jfnt+W3x7/F
v8DH4q/4cfDwUGPiueRK9krYq2JvI/80vg/fjX+oWptfgd+Uv0f/mv5p/Sv6
f+PJ5dhyKvlr/g/8CfwJ/On4Zv4y/m5+erwkng8vgjex15/fmT+A/yB8g9P7
BX+BQxGZ+Mn4+d0fp7/SzTn6K/VP4I/wa3gtbhfbLbjtuB2wYVg/bBz3NTcu
HgmPheeWP7VV0tZntjbxz+D78T14EX4dfkV+M/5e/ev6Z/Sv6v+Dp5DjyKnl
b/hz+BP5E/kz8C385fw9/Ax4KTw/XhRvam8Avwt/IP9nPJLer/hLPPwxZeYn
53/g/nj9Vfpz9Vfpn8Qf49fxF3htfldSS/7n2HCsPzY+PE9uPOwdLLbtPHJl
W6VsVbW1mXsWP4DvxYvy6/Ir8Zvz9+nf0D+rf03/X/x9Oa6cRv6WP5c/iT+J
PxPfyl/B38vPiJfGP8CL4c3sDeR35Q/iP8Tf0XuDv4r1v38EIrLwU/ALCBP0
V+vP01+tfwp/gt/AX+J1+N3st+J3xL7DBmATwvPkxsfexeLYzitXsVXaVjVb
W7jn8IP4PrwYvx7/U34L/n79m/rn9K/r/4enlOPJaeVh/Hn8yfzJ/Fn4Nv5K
/j5+JvwjvABeHG9ubxC/G38w/xH+rt5b/DXuVkRW/vv8gu5P1F+jP19/DXga
f4rfxF/hdfnd7bfmt+d3wkfgA/GJ4Zny38Mj43HxfPJn9j6yV93eVv55/BC+
Hy/Or8+vzG/JP6B/S/98+AvIdSrX8V2n4w7nzud+H/5+585W2c5dxd3PzYx/
jBfES+At+IP53flD+I/xyHq/4b/g/hORjZ+SX8j9Sfpr9Rfor9U/gz/Db+Gv
8Xr8Hvbb8DuQO+Mj8UH4pPBM+QnwKHg8PL9c1d7H9mrY28a/gB/GD+Al+A34
Vfit+Af1b+tf0L+hH0lOLb8np5e/4y/gT+H/wN3BXc09wM2CfYIVwkrabskd
wu3BHcp9gkfR+x3/FXe8jcjOT8Uv7P5k/XX6C/XX6Z/Fn+O38V/w+vye9tvy
u2CjsMHY5PA8uQmxqFj8cG6Vq9n6xFZNW9u5P+JH8IN4SX5D/mf81vxD+nf0
f9S/qf+OnEZOIGeQR/AX8qfyp/Dn8Hfy1/AP8rPiZfDCeKlw7uYP5fcM5wP+
Uzyq3h/4GzwOPwc/Nf973XPyC/mO/KteA/1e9tqF7236XfHR+JDQD8+QkwiP
hr8XzqlydV+vjK9Xy9fbwf8JP4ofwkvxG/Gr8tvwD+vf1f9J/5b+u3JaOaGc
UR7JX8Sfxp/Kn8vfxV/LP8TPhpfFP8RLh3M2/0t+L/5X/Gd4NL0/8bd4XH5O
fhr+h+5P0V+vv0h/vf55/CV+F3+DN+T3tt8+fH/jd8PH4EPxKeE58hPj0fEE
4awq17BX1l5tezv5F/Fj+GG8NL8xvxq/Lf+I/j39i/q39SPL6eREciZ5FH8x
fzp/Gn8efzd/Hf8wPzteDi+CfxTO2vyv+L35X/Of49H1/sJ/w+Pxc/HT8ou4
P1V/g/5i/Q36F/BX+D38Ld6I38d+B34nfnd8LP4lPjU8V34SPAaeEC8k17RX
zl4de7v4l/Dj+BH8I34TfnV+O/5R/fv6l/Tv6EeR08uJ5czyaP4S/gz+dP58
/h7+ev4Rfg68PF40nLu4X3P7cL/hvsBi6PyN/c6Nz83NTcct6v40/Y36S/Q3
6v+Iv8bv47/hjfl9bX/O78zvgY/Dv8KnhWfKT4rHxBOF86pcy155e3Xt7eZf
xk/gR/GP+U35Nfjt+cf0H+hf1r+rH1XOICeRs8hj+Ev5M/kz+Av4e/kb+Ef5
OfEKeDH843De5n/D78v/lv8Sj6n3D/4H/h4/Dz89v5j70/U36S/V36T/E/4L
/gD/HW/C/8J+x/B9jt8TH49/jU8Pz5WfDI+FJw5nVrm2vQr26tnbw7+Cn8SP
4Z/wm/Fr8jvwj+v/rH9F/55+NDmjnFTOKo/lL+PP4s/kL+Tv428MP4NjFbHi
2CfhvM39lvsFdxj3FR7L1/gX/xNPwM3LzcAt7v4M/c36y/Q361/Ef8V/xv/A
m/L72e/E78rvhU/Av8FnhGfKT47HxpOEM6tcx15Fe/Xt7eVfxU/hx/Ey/Ob8
WvzP+Sf0H+pfDT976EeXM8nJ5GzyOP5y/mz+LP4i/n7+Jv4xfm68El4CLxPO
3Pxh/H784fzXeGy9//C/8IT8fPyM/BLuz9Tfor9cf4v+JfwN/hD/E2/G72+/
M78bvzc+Ef8WnxmeKz8FHgdPGs6tcl17lew1sLePfw0/jZ/Ay/Jb8GvzO/JP
6j/Sv6b/QD+GnFlOLmeXx/NX8H/gz+Yv5h/gb+Yf5+fBP8VLhr+XuMO5/bnf
cX/B4oSDrP7f3EQu87vOxC3p/iz9rfor9LfqX8bf4o/wv/Dm/AG2u9juzu+D
T8KH4bPCM+W/j8cNZ2rX9Wx9aquhrf3c69gZ7CS3HLcltw63E/eU/mP96/o/
68eUs8gp5BzyBP5K/pxwruEv4R/kb+Gf4OfFK+Ol8LJ4R/53/AH8Efxf8bh6
kTj/4In5H7jOzC/l/mz9bfor9bfpX8F/wx/jf+Mt+APtd7Xfg98Xn4wPx2eH
Z4qnxOOFM7Wt+rYq22pk6wB2AzuLlVdtxavL68w7rftE94buQ91Yclb5fTmn
PJG7ijuXO8fXXco/xN/KP8nPh1fBS+PlwlmbP4I/kD+S/waPp/cO5188Cb+A
6yz80u7/oL9df5X+dv2r+O/4E/wfvCV/kP1u9nvyv8C/x7/DfwjPE0+Fx8eT
hfOqvQb2qthrbO8gfhM/h5/CK/Bb8+vxu/DP6D/Vv6n/SD+2nE1OKeeSJ/FX
8+fx5/KX8Q/zt/FP8fPjn+EfhWcbztv8kfxB/FH8t3h8vXc5/+FJ+QVdZ+V/
5P4c/R36q/V36F/D/8Cf4v/irfiD7Xe334vfD5+Cj8DnhOeKp8bfw5OHc6u9
hvY+s9ckvP/Fb+Hn8dN4RX4bfn1+V/5Z/Wf6t/Qf68eRs8up5Nzy5PD9jnOE
sz383B3eKeiM0hmsMzq843XvPVuRw8sZh/ZkfinkOpv+x+7P1d+pv0Z/p/51
/E/8Gf4f3po/xO+xh99jb7/H/vhUfCQ+Nzw7PA2eAE8Rzqr2Gtmraq9peMeL
38Yv4GfwSvy2/Ab8bvxz+s/1b+s/0Y8r55BTy3nk7/lr+PP58/gr+Ef5O/in
+QXwqvjHeIVw1uaP5g/hjwnvePEEelE4kXz+5PzCrrPz5+nu0l2ru0v3BvYX
9jy8vJXbcIfa7mm7j+0Bbk/DRwU3PFM8LZ4Qfz+cU+01tlfNXrPwjhe/g/+I
n8U/5bfjN+R355/Xf6F/R/+pfjw5p5xGzitP4a/lL+DP56/kH+Pv5J/hF8Sr
4Z/gFcM5mz+GP5Q/NrzjxRPqReW847On4H/oOgf/E/fn6+/WX6e/W/8m/jf+
Ao8kt+V/ab+X/b72B+LT8dH4/PBM8XR4IjxlOKfaa2Kvur3m4R0vfhf/CT+H
V+a35zfi9+Bf0H+pf1f/mX58OZecVs4nT+Wv4y/kL+Cv4h/n7+Kf5RfCq+Nl
8ErhnM0fy/+SPy6858UT6UUL7ye4Rfyak1vGvQW6e3TX6+7RvYX/g7/E35Hb
cb+y3dv2F7YH4TPwMfiC8Ezx9HhiPFU4p9praq+GvRbhPS9+D7+In8er8Dvw
G/N78n/Uf6V/T/+5/ntybjmdnF+exl/PX8RfyF/NP8HfzT/HL4zXwMvin4Zz
Nn8c/yv++PCeF0+sF53zrj/7lPyirnPxy7q/UH+v/gb9vfq38X/xV/i7cnv+
1/b72O9nfzA+Ex+LLwzPFM+AJ8FTh3OqvWb2atprGd714vfxS/gF/DP+5/wm
/F78n/Rf69/Xf6GfQM4jp5c/kKfzN/AX8xfx1/BP8vfwz/M/xGvi5fDK4ZzN
H8//mj8hvOvFk+jF4ET2+VPxi7nOzS/n/iL9ffob9ffp38H/w1/jkeUO/G/s
97Xf3/4QfBY+Dl8UniueEU+KpwlnVXvN7dWy1yq868Uf4JfxH/Gq/I78pvze
/Iv6v+g/0H+pn1DOK2eQC8gz+Bv5S/iL+Wv5p/h7+Rf4RfBaeHm8Sjhr8yfw
v+FPDO978aR6MTlRfP7U/OKu8/DLu79Yf7/+Jv39+nfx8AL7FzyK/Dn/W/tf
2B9gfyg8mz8eXxyeK54JT4anDWdVey34te21Du978Z/xK/hPeDV+J34zfh/+
Jf1f9X/Wf6WfSM4nZ5QLyjP5m/hL+eu4p7n7uD9yi2K1sQrYZ+GczZ3I/ZY7
KbzvxZPpxeJE9dnT8Eu4zsuv4P4S/QP6m/UP6N8LrwrlX/Gockf+MPv97A+0
/yX+A38CviQ8UzwznhxPF86r9lry69hrE9734g/xq/hFvDq/M785vy//sv4b
/Yf6r/UTy/nlTHIheRZ/M38Zfwl/Pf8Mfz//J34xvA5eEa8aztr8Sfxh/Mnh
nS+eXC82J5rPn5Zf0nU+fkX3l+of1N+if1D/fjiiym/waHIn/nD7/e0Psv8V
Poc/EV8aniueBU+Bp8fL22vFr2uvbXjniz/Cr+GX8Br8LvwW/C/4V/Tf6j/S
/0U/ifyBnFkuLM/mb+Ev5y/lb+Cf5R/gX+QXx+vilfBq4bzNn8wfHt756qTQ
iRPeWYil/JrfvUruLdM7pLdV75Cv8yDU5bd4dLmz3e/sDrA72O7X+Fz+JHxZ
eJ54Vvx9PEM4r9prza9nr11434s/xq/jl/Ga/K78lvx+/Kv6v+k/1v9VP6lc
QM4ifyj/wN/KX8Ffxt/IP8c/yL/EL4HXwz/Fq4fzNv97/nf878P7Xr339eJy
ovtzT88v7foD9z91f7n+Yf1t4ecoLLLr37AY3C62R9geaHuI7W/wedzJ+PLw
PPFseEo8Yzir2mrDr2+rfXjfiz/Bb+BX8Fr8bvxW/P78a/q/6z/Rf6OfTC4o
Z5XncLdxV3KXczdxz3MPcS9zS+L18cp4jXDO5k7hjuBOCe979VLqxePE8Lkz
8D9yXcD9yu6v0D+iv13/sP5DPIr8Ox5T7mp/pP1B9ofa/xafz/8ej4tlx1Jh
mcL51VZbbgNbHbjn8Kf4TfwqXpvbnduaO8DXvq7/h/5T/bf6yeVCcja5iDyX
v52/ir+Cv5l/gX+Yf4VfCm+AV8FrhvM3fyp/JH9qePerl0ovPiemz56R/7Hr
gu5XcX+l/lH9HfpH9B+FH/HlP/BYcjf7o+wPtv+l/WH4Av4UfEV4pngOPDWe
OZxh7bXjN7T3eXj3iz/Db+HX8Dr8Hvw2/IH8G/p/6j/T/00/hVxYzi4Xlefx
d/BX81fyt/B/5B/hX+WXxhvin+G1whmcP40/ij8tvPvVS633HieWz5+J/4nr
Qu5/5v4q/WP6O/WP6j8Of83Jf+Kx5e72R9sfYv8r+8Pxhfyp+MrwXPGceBo8
SzjD2mvPb2SvY3j3iz/Hb+PX8br8nvy2/EH8m/p/6T/X/13/fflDOYdcTJ7P
38lfw1/F38r/iX+Uf43/Ed4Ir4rXDmdw/nT+aP708O5XL41eAk5snz8zv4zr
wu5XdX+1/nH9XfrH9J/g0eW/8DhyD/tj7A+1/7X97/BF/Gn4qvBc8Vx4Wjxr
OMfa68BvbK9TeP+Lv8Dv4Dfwevxe/Hb8wfxb+n/rv9D/Qz+lXETOKReXF/B3
8dfyV/O38S/yj/Gv8z/GG+PV8DrhHM6fwR/DnxHe/+ql1UvIiePzZ+GXdf2h
+9XcX6N/Qn+3/nH9p3gM+e/wv225p/2x9r+0/439Efhi/nR8dXiueG48HZ4t
nGPtfc5vYq9zeP+Lv8Tv4jfx+vze/Pb8Ifzb+v/ov9T/Uz+VXFTOJZeQF/J3
89fx1/C38y/xj/Nv8D/Bm+DV8brhHM6fyR/Lnxne/+ql00vEievzZ+WXc13E
/erur9U/qb9H/4T+s/CjrfwPHk/uZX+c/a/sj8SWcGdga8IzxfJg6bHs4Qxr
qyO3qa0u4f0v/gq/h9/CG/D78Dvwh/Lv6P+r/0r/L/3UcjE5t1xSXsTfw1/P
X8vfwb/MP8G/yS+DN8Vr4PXCGZw/iz+OP4sfXS+9XmJOPJ89G7+866Lu13B/
nf4p/b36J/Wf47Hkf/H4cm/74+1/bf9b+6PwpfyZ+NrwTPG8eAY8RzjD2uvE
b2avK/8S/hq/j9/GG/L78j/nf8m/q/+f/mv9v/XTyMXlPHIpeTF/L39DOOPy
d/Kv8E/yb/HL4s3wmnj9cAbnz+aP58/mx9DLoJeEE9/nz86v4LqY+zXdX69/
Wn+f/in9F+EVkPwf/p7cx/4E+9/YH2Z/NL6MPwtfF54rng/PiOcM51h7nfnN
7XXjX8Z/wR/gd/BG/C/4Hflf8e9Fivjfvxjyi/4/+mnlEvy8cml5CX8fvpG/
nr9L/Sr/FP82vxzeHK+FNwjncP4P/An8H/gx9TLqJeW85/Pn4Fd0Xdz9Dbpn
dPfrntZ9icWJFvG/fzEtgdzX9kTb39oebnsMtJw7m7s+PFM8P54JzxXOsPa6
8Fvwu/Ov4L/iP+N38cb8fvxO/K/59/Uj4b/q/6ufTi7Jzyd/JC/l78c38Tfw
d/Ov8U/z7/DL4y3w2njDcAbnz+FPDOclfiy9THrJOAl89pz8Sq5LuF/L/Y36
Z/UP6J/Rf4XHlSPJCeUv7E+yP8z+WGwF94fw3MLzxD7AMmO5wznWVlduS24P
7lX8Df4Qv4c34ffnd+Z/w3+g/w7+Rv8//fRyKX5++WN5Gf8Avpm/kb+Hf51/
hn+XXwFvidfBG4VzOH8ufxJ/Lj+2Xma95JyEPnsu/qeuS7pf2/1N+uf0D+qf
1X+Nx5PfkRPJ/exPtj/c/nf2x+Er+XP4G8MzxQvgWfA84Sxrrxu/Fb8n/xr+
Fn+E38eb8gfwu/C/5f+s/y7+Nvw8gmeQS/M/kD/hL+cfxLfwN+F71W7wz/Lv
8SvirfC6eONwFufP40/mz+PH0cuil4KTyOfPza/supT7ddzfrH9e/5D+Of1f
8Pjyu3Jiub/97+1/Z3+E/fH4Kv5c/qbwXPGCeFY8bzjT2uvOb83vxb+O/4Y/
xh/gzfgD+V35w/gP9SPjv+lHwjPKH/ELyGX4K/iH8K38zfg+/k3+Of59fiW8
NV4PbxLO4/z5/O/58/lx9bLqvc9J7PPn4VdxXdr9uu5v0b+gfzj8nIW95zqy
6yTcAban2B4R/r6zPQFfzZ3H3RyeKV4Iz4bnC+dZWz34bfi9+Tfw3/En+M94
c/4gfjf+cP4j/Sj47/rv4Jnkj/kF5bL8lfzD+Db+Fnw//xb/PP8B/1O8DV4f
bxrO4/wF/Cn8Bfx4etn0UnKS+Ox5+Z+5/sj9eu5v1f9R/4j+ef03eAI5ipxU
Hmh/qv2R9kfZn4iv4c/nbwnPFC+MZ8fzh/OsvZ78tvw+/Jv4H/hT/CHegj+Y
353/WDcq9ofuu1hm+RNuIbkcdxX3CL6duxU/wL3NvcD92deujLfFG+DNwlmc
v5A/lb+QH18vu14qTlKfPR+/quuP3a/v/jb9n/SP6l/Qf4snlKPKyeRB9qfZ
H2V/tP1J+Fr+Av7W8EzxD/Ec+AfhLGuvF78d/xb2J/YMe4S15A7h9uB+x32i
Gw3/UzcynkUuwy0sl/e1V/OP4jv42/CD/Dv8H/kP+VXwdnhDvHk4h/MX8afx
F4X3w3o59FJH/f//b0F+/v8BOqJAig==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$4040484#1"]& ]}}], {}, {}}, {
                   GridLines -> Dynamic[
                    Join[{{{3.4081344*^9, 
                    GrayLevel[0.9]}, {3.4712928*^9, 
                    GrayLevel[0.9]}, {3.5343648*^9, 
                    GrayLevel[0.9]}, {3.5975232*^9, 
                    GrayLevel[0.9]}, {3.6605952*^9, 
                    GrayLevel[0.9]}, {3.7237536*^9, 
                    GrayLevel[0.9]}, {3.7868256*^9, 
                    GrayLevel[0.9]}}, {0, 2000, 4000, 6000, 8000, 10000, 
                    12000, 14000}}, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x$, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y$, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x$, 
                    GrayLevel[0.7]}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y$, 
                    GrayLevel[0.7]}}}}], 2]], FrameTicks -> {{{{0., 
                    FormBox[
                    TagBox["0", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {2000., 
                    FormBox[
                    TagBox["2000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {4000., 
                    FormBox[
                    TagBox["4000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {6000., 
                    FormBox[
                    TagBox["6000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {8000., 
                    FormBox[
                    TagBox["8000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10000., 
                    FormBox[
                    TagBox["10000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {12000., 
                    FormBox[
                    TagBox["12000", #& ], TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {3000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {3500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {4500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {5000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {5500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {6500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {7000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {7500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {8500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {10500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {12500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}, {{0., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {2000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {4000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {6000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {8000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {10000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {12000., 
                    FormBox["\"\"", TraditionalForm], {0.00625, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.25]}}, {500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {1500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {2500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {3000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {3500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {4500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {5000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {5500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {6500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {7000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {7500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {8500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {9500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {10500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {11500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {12500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13000., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}, {13500., 
                    FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
                    GrayLevel[0.], 
                    AbsoluteThickness[0.125]}}}}, {{{3.4081344*^9, 
                    FormBox["\"2008\"", TraditionalForm]}, {3.4712928*^9, 
                    FormBox["\"2010\"", TraditionalForm]}, {3.5343648*^9, 
                    FormBox["\"2012\"", TraditionalForm]}, {3.5975232*^9, 
                    FormBox["\"2014\"", TraditionalForm]}, {3.6605952*^9, 
                    FormBox["\"2016\"", TraditionalForm]}, {3.7237536*^9, 
                    FormBox["\"2018\"", TraditionalForm]}, {3.7868256*^9, 
                    FormBox["\"2020\"", TraditionalForm]}}, {{3.4081344*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.4712928*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.5343648*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.5975232*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.6605952*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.7237536*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm]}, {
                    3.7868256*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], 
                    TraditionalForm]}}}}, ImagePadding -> All, 
                    GridLines -> {{{3.4081344*^9, 
                    GrayLevel[0.9]}, {3.4712928*^9, 
                    GrayLevel[0.9]}, {3.5343648*^9, 
                    GrayLevel[0.9]}, {3.5975232*^9, 
                    GrayLevel[0.9]}, {3.6605952*^9, 
                    GrayLevel[0.9]}, {3.7237536*^9, 
                    GrayLevel[0.9]}, {3.7868256*^9, 
                    GrayLevel[0.9]}}, Automatic}, PlotRangePadding -> None, 
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, 
                    AxesOrigin -> {3.4064928*^9, 0}, 
                    FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {5000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {7500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {10000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {12500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {4500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {5500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {6500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {7000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {8000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {8500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {9000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {9500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {10500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {11000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {11500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {12000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {13000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {13500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {14000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {14500., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {15000., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{3.45*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.5*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.55*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.6*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.65*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.7*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.75*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.4*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.41*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.42*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.43*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.44*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.46*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.47*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.48*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.49*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.51*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.52*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.53*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.54*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.56*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.57*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.58*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.59*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.61*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.62*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.63*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.64*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.66*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.67*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.68*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.69*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.71*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.72*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.73*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.74*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.76*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.77*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.78*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.79*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {3.8*^9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {{{3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, DisplayFunction -> 
                    Identity, 
                    PlotRangePadding -> {{None, None}, {None, None}}, 
                    PlotRangeClipping -> True, ImagePadding -> All, 
                    DisplayFunction -> Identity, AspectRatio -> 0.2, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {3.4064928*^9, 0}, AxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BaseStyle -> AbsoluteThickness[1], 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {{{3.4081344*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.4712928*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5343648*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.5975232*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.6605952*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7237536*^9, 
                    Directive[
                    GrayLevel[0.9]]}, {3.7868256*^9, 
                    Directive[
                    GrayLevel[0.9]]}}, Automatic}, GridLinesStyle -> 
                    GrayLevel[0.9], ImageSize -> Full, 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    PointSize[Medium], "PointSizeFunction" -> 
                    "SmallPointSize", "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}, "AxesInFront" -> True}, 
                    PlotRange -> {{3.4064928*^9, 3.799008*^9}, {
                    0, 13837.90851044939}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{None, None}, {None, None}}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "DatePlot", "Frame"]& ]}, 
                    Ticks -> {Automatic, Automatic}}], 
                  TagBox[
                   GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{"\"in \"", "\"hits per day\""}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]}, "Labeled", DisplayFunction -> (FormBox[
                   GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"]}, {
                    
                    ItemBox[#2, Alignment -> {Left, Inherited}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], TraditionalForm]& ), 
                 InterpretationFunction -> (RowBox[{
                    StyleBox[
                    "Labeled", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], "[", 
                    RowBox[{#, ",", 
                    RowBox[{"{", #2, "}"}], ",", 
                    RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Left", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                    "]"}]& )]}, {
                PaneBox[
                 TagBox[
                  StyleBox[
                   RowBox[{"\"(\"", "\[NoBreak]", 
                    
                    TemplateBox[{
                    "\"based on weekly averages of daily hits to English\
\[Hyphen]language \"", 
                    TagBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"\\\"\"", "\"Latin small letter F\"", "\"\\\"\""}, 
                    "RowDefault"], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Annotation[#, {
                    "URL" -> "http://en.wikipedia.org/wiki?curid=10831", 
                    "Popup" -> "link to Wikipedia", "OneClick" -> False}, 
                    "ExternalLink"]& ], "\" page\""}, "RowDefault"], 
                    "\[NoBreak]", "\")\""}], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"computabledata,formatteddata,timeseriesdata"}]}], 
     
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "TimeSeriesPlot"}, {}], 
       "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Log scale", "input" -> 
         "PopularityPod:WikipediaStatsData__Log scale"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "f", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "3"}, {
        XMLElement[
        "value", {
         "name" -> "Character", "desc" -> "a character", "input" -> 
          "*C.f-_*Character-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MusicNote", "desc" -> "a musical note", "input" -> 
          "*C.f-_*MusicNote-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Unit", "desc" -> "a unit", "input" -> 
          "*C.f-_*Unit-"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> "f", 
        "score" -> "0.010416666666666666", "level" -> "low"}, {}]}], 
    XMLElement["sources", {"count" -> "1"}, {
      XMLElement[
      "source", {
       "url" -> 
        "https://www5b.wolframalpha.com/sources/\
CharacterDataSourceInformationNotes.html", "text" -> 
        "Character data"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "15", "datatypes" -> 
    "Character", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "8.431000000000001", "parsetiming" -> "0.198", "parsetimedout" -> "false",
     "recalculate" -> "", "id" -> 
    "MSP872218f4hhe7h3hd1d2200004d3hi28hhfh05e39", "host" -> 
    "https://www5b.wolframalpha.com", "server" -> "37", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 13, 17, 3, 13.144478`7.871318329482111}, "Line" -> 43,
     "SessionID" -> 16179469689345703595}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "\!\(TraditionalForm\`\[ScriptCapitalL](r', r, f, f') == \n\
\*FractionBox[\(1\), \(2\)]\\ \(m(r'^2 + r^2*f')\) - m*\(sin(f)\)\) Euler \
lagrange"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1776., {951., 957.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803641393204979*^9},ExpressionUUID->"a252e408-2515-48b5-9f8f-\
c771540af0cc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Derivative", "[", 
  RowBox[{
   RowBox[{"q", "*", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1", "/", "a"}], "-", 
      RowBox[{"(", 
       RowBox[{"1", "/", "r"}], ")"}]}], ")"}]}], ",", "r"}], "]"}]], "Input",\

 CellChangeTimes->{{3.803734226357506*^9, 3.803734260078967*^9}, {
  3.803734299861891*^9, 3.803734387062813*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"1447ab0b-151b-4178-aced-e6924b899bee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Derivative", "[", 
  RowBox[{
   RowBox[{"q", " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "a"], "-", 
      FractionBox["1", "r"]}], ")"}]}], ",", "r"}], "]"}]], "Input",
 CellChangeTimes->{3.80373439360926*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"f53f2c6e-4dc8-49b9-9965-fd6e256d980d"],

Cell[BoxData[
 RowBox[{"Derivative", "[", 
  RowBox[{
   RowBox[{"q", " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "a"], "-", 
      FractionBox["1", "r"]}], ")"}]}], ",", "r"}], "]"}]], "Output",
 CellChangeTimes->{3.803734393673024*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"19e90185-c8a9-4b6e-b510-742d9aaea8e6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "r_", "]"}], ":=", 
  RowBox[{"q", "*", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"1", "/", "a"}], "-", 
     RowBox[{"(", 
      RowBox[{"1", "/", "r"}], ")"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.8037344371284943`*^9, 3.8037344910482397`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"1f9e4c6c-6cdc-42e6-87ec-bebb35da1896"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Derivative", "[", 
  RowBox[{
   RowBox[{"f", "[", "r", "]"}], ",", "r"}], "]"}]], "Input",
 CellChangeTimes->{{3.803734495689909*^9, 3.803734511649448*^9}, 
   3.8037346836675386`*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"db826d1c-830c-461b-80bc-59535a11051a"],

Cell[BoxData[
 RowBox[{"Derivative", "[", 
  RowBox[{
   RowBox[{"q", " ", 
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "a"], "-", 
      FractionBox["1", "r"]}], ")"}]}], ",", "r"}], "]"}]], "Output",
 CellChangeTimes->{3.803734512566*^9, 3.803734684421732*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"d01c758a-e8d2-412c-b5ea-07ff9625f1cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"d", "/", "dr"}], 
  RowBox[{"(", 
   RowBox[{"f", "[", "r", "]"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.803734515345883*^9, 3.803734535303068*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"f39bb922-67df-45e6-b265-e0bec43abdae"],

Cell[BoxData[
 FractionBox[
  RowBox[{"d", " ", "q", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "a"], "-", 
     FractionBox["1", "r"]}], ")"}]}], "dr"]], "Output",
 CellChangeTimes->{3.803734536179922*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"0df0066b-d453-4e99-8717-a5e8c94f2450"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "'"}], "[", "r", "]"}]], "Input",
 CellChangeTimes->{{3.803734640334312*^9, 3.803734646193267*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"462ae0e7-ebaf-4f94-8537-0a896df39451"],

Cell[BoxData[
 FractionBox["q", 
  SuperscriptBox["r", "2"]]], "Output",
 CellChangeTimes->{3.803734647263377*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"22d7584c-31db-404b-8360-7b470982136f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", " ", 
  RowBox[{"DSolveValue", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"m", "*", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"m", "*", 
       RowBox[{
        RowBox[{"Sin", "[", "a", "]"}], "^", "2"}], "*", 
       RowBox[{"y", "[", "t", "]"}], "*", 
       RowBox[{"w", "^", "2"}]}], " ", "+", 
      RowBox[{"m", "*", "g", "*", 
       RowBox[{"Cos", "[", "a", "]"}]}]}]}], ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803875217344471*^9, 3.803875352603591*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"2af04629-b024-4cb3-9f0a-722ccbb7db87"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"t", " ", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["w", "2"], "-", 
        RowBox[{
         SuperscriptBox["w", "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
     SqrtBox["2"]]], " ", 
   TemplateBox[{"1"},
    "C"]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"t", " ", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["w", "2"], "-", 
         RowBox[{
          SuperscriptBox["w", "2"], " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
      SqrtBox["2"]]}]], " ", 
   TemplateBox[{"2"},
    "C"]}], "+", 
  FractionBox[
   RowBox[{"2", " ", "g", " ", 
    RowBox[{"Cos", "[", "a", "]"}]}], 
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["w", "2"]}], "+", 
    RowBox[{
     SuperscriptBox["w", "2"], " ", 
     RowBox[{"Cos", "[", 
      RowBox[{"2", " ", "a"}], "]"}]}]}]]}]], "Output",
 CellChangeTimes->{3.803875364197068*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"a3c0dad0-42a4-4c29-aff3-de0b3730de16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", " ", 
  RowBox[{"DSolveValue", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"m", "*", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}]}], "\[Equal]", 
     RowBox[{"m", "*", 
      RowBox[{
       RowBox[{"Sin", "[", "a", "]"}], "^", "2"}], "*", 
      RowBox[{"y", "[", "t", "]"}], "*", 
      RowBox[{"w", "^", "2"}]}]}], " ", ",", 
    RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803875389047419*^9, 3.80387539134348*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"1f379da6-67dc-4b41-ba5c-4fab688c9ecc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"t", " ", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["w", "2"], "-", 
        RowBox[{
         SuperscriptBox["w", "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
     SqrtBox["2"]]], " ", 
   TemplateBox[{"1"},
    "C"]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"t", " ", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["w", "2"], "-", 
         RowBox[{
          SuperscriptBox["w", "2"], " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
      SqrtBox["2"]]}]], " ", 
   TemplateBox[{"2"},
    "C"]}]}]], "Output",
 CellChangeTimes->{3.8038753957872057`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"0d3ed44b-7935-41ba-b212-700d30285410"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"t", " ", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["w", "2"], "-", 
        RowBox[{
         SuperscriptBox["w", "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
     SqrtBox["2"]]], " ", 
   RowBox[{"r", "/", "2"}]}], "+", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"t", " ", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["w", "2"], "-", 
         RowBox[{
          SuperscriptBox["w", "2"], " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
      SqrtBox["2"]]}]], " ", 
   RowBox[{"r", "/", "2"}]}]}]], "Input",
 CellChangeTimes->{{3.803875433397163*^9, 3.803875453813443*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"fe5cad53-bcf3-4cfe-b0b2-3185637865d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"t", " ", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["w", "2"], "-", 
         RowBox[{
          SuperscriptBox["w", "2"], " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
      SqrtBox["2"]]}]], " ", "r"}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"t", " ", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["w", "2"], "-", 
        RowBox[{
         SuperscriptBox["w", "2"], " ", 
         RowBox[{"Cos", "[", 
          RowBox[{"2", " ", "a"}], "]"}]}]}]]}], 
     SqrtBox["2"]]], " ", "r"}]}]], "Output",
 CellChangeTimes->{3.803875456036057*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"6db234ca-cf06-4fc9-abc1-da5573566262"]
}, Open  ]],

Cell[CellGroupData[{

Cell["[m*y''[t]=m*Sin[a]^2*y[t]*w^2 +m*g*Cos[a]", "WolframAlphaLong",
 CellChangeTimes->{{3.803875829704176*^9, 3.8038758440576143`*^9}, {
  3.803875909300473*^9, 3.803875929746057*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"689d29b5-ead7-4fbb-8305-353a9bd4b07d"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "[m*y''[t]=m*Sin[a]^2*y[t]*w^2 +m*g*Cos[a]",
    Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"m y''[t] == m Sin[a]^2 y[t] w^2 + m g Cos[a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"m", " ", 
                 RowBox[{
                   SuperscriptBox[
                   "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                   "t", ")"}]}], "\[LongEqual]", 
               TagBox[
                RowBox[{
                  RowBox[{"m", " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}], " ", 
                    SuperscriptBox["w", "2"]}], "+", 
                  RowBox[{"m", " ", "g", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}]}], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Autonomous equation", "scanner" -> "ODE", "id" -> 
     "AutonomousEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{"m", " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{"g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], "+", 
                   RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], Identity]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Autonomous.html", "text" -> 
           "Autonomous equation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[m y''[t] == g m Cos[a] + m w^2 Sin[a]^2 y[t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"m", " ", 
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"m", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"g", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigFactor[m y''[t] == g m Cos[a] + m w^2 Sin[a]^2 y[t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"m", " ", 
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", 
                   FractionBox["1", "2"]}], " ", "m", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"2", " ", "g", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}]}], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "a"}], ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigReduce[m y''[t] == g m Cos[a] + m w^2 Sin[a]^2 y[t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"m", " ", 
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 FractionBox["1", "2"], " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"2", " ", "g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "a"}], ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}], "+", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "AlternateForm__More"}, {}]}]}],
    Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> 
     "Alternate form assuming a, g, m, t, and w are positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[m y''[t] == g m Cos[a] + m w^2 Sin[a]^2 y[t], a > 0 && \
g > 0 && m > 0 && t > 0 && w > 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"g", " ", 
                  RowBox[{"cos", "(", "a", ")"}]}], "+", 
                RowBox[{
                  SuperscriptBox["w", "2"], " ", 
                  RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                  RowBox[{"y", "(", "t", ")"}]}]}], "\[LongEqual]", 
              RowBox[{
                SuperscriptBox[
                "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", "t",
                 ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "DSolve[{m y''[t] == g m Cos[a] + m w^2 Sin[a]^2 y[t]}, y[t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox["w", "2"], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "a"}], ")"}]}]}]]}], ")"}], "/", 
                    SqrtBox["2"]}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox["w", "2"], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "a"}], ")"}]}]}]]}], ")"}], "/", 
                    SqrtBox["2"]}]}]]}], "-", 
                RowBox[{
                  FractionBox[
                   RowBox[{"g", " ", 
                    RowBox[{"cot", "(", "a", ")"}], " ", 
                    RowBox[{"csc", "(", "a", ")"}]}], 
                   SuperscriptBox["w", "2"]]}]}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], "+", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                   "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"complementary \"", "\"solution \"", "\"and \"", 
                    "\"particular \"", "\"solution.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\"Find the complementary solution by solving \"", 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "0", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox[
                    "\":\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "t", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm]}], 
                    "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}]}]}], 
                    HoldForm], ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], "\[NotEqual]", "0"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"for \"", "\"any \"", 
                    "\"finite \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], "\",\"", "\" \""},
                     "RowDefault"], "\"the \"", "\"zeros \"", "\"must \"", 
                    "\"come \"", "\"from \"", "\"the \"", "\"polynomial:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}]}]}], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    "0"}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"m", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "-", 
                    RowBox[{"w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}]}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "+", 
                    RowBox[{"w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}]}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", "w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", "w"}], " ", 
                    RowBox[{"sin", "(", "a", ")"}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "t"}], " ", "w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"t", " ", "w", " ", 
                    RowBox[{"sin", "(", "a", ")"}]}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "w", " ", 
                    RowBox[{"sin", "(", "a", ")"}], " ", "t"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"w", " ", 
                    RowBox[{"sin", "(", "a", ")"}], " ", "t"}]]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    RowBox[{"g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"by \"", "\"the \"", "\"method \"", 
                    "\"of \"", "\"undetermined \"", "\"coefficients:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"particular \"", "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"is \"", "\"of \"", "\"the \"",
                     "\"form:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\[LongEqual]", 
                    SubscriptBox["b", "1"]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Solve \"", "\"for \"", "\"the \"", "\"unknown \"", 
                    "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["b", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SubscriptBox["b", "1"], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Substitute \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}], " ", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", "0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}]}], ")"}], " ", 
                    SubscriptBox["b", "1"]}]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"g", " ", "m", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Solve \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    SubscriptBox["b", "1"], "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"cot", "(", "a", ")"}], " ", 
                    RowBox[{"csc", "(", "a", ")"}]}], 
                    SuperscriptBox["w", "2"]]}]}]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 3, RowAlignments -> Baseline, 
                    ColumnAlignments -> Left], 
                    Function[BoxForm`e$, 
                    TableForm[BoxForm`e$, TableSpacing == {1, 3}]]]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["b", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"into \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["b", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"cot", "(", "a", ")"}], " ", 
                    RowBox[{"csc", "(", "a", ")"}]}], 
                    SuperscriptBox["w", "2"]]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "\"c\""], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"cot", "(", "a", ")"}], " ", 
                    RowBox[{"csc", "(", "a", ")"}]}], 
                    SuperscriptBox["w", "2"]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "w", " ", 
                    RowBox[{"sin", "(", "a", ")"}], " ", "t"}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"w", " ", 
                    RowBox[{"sin", "(", "a", ")"}], " ", "t"}]]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "2"}, {
         XMLElement["info", {"text" -> "cot(x) is the cotangent function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Cot.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ElementaryFunctions/Cot", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Cotangent.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "csc(x) is the cosecant function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Csc.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ElementaryFunctions/Csc", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Cosecant.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Solve with undetermined coefficients", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve with undetermined coefficients", "input" -> 
           "Solution__Solve with undetermined coefficients"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with variation of parameters", "input" -> 
           "Solution__Solve with variation of parameters"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with Laplace transform", "input" -> 
           "Solution__Solve with Laplace transform"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as an autonomous equation", "input" -> 
           "Solution__Solve as an autonomous equation"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "g", " ", "y", " ", 
                    RowBox[{"cos", "(", "a", ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["y", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", "a", ")"}]}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "5.578", 
    "parsetiming" -> "2.6510000000000002", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> "MSP2761i36g380921b03ee00000i6g568f7414021h",
     "host" -> "https://www4c.wolframalpha.com", "server" -> "10", "related" -> 
    "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2771i36g380921b03ee00000cabhegdf2d159806624114026840709468", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 16, 10, 12, 17.366195`7.992279657804795}, "Line" -> 7,
     "SessionID" -> 16181112696560740433}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "[m*y''[t]=m*Sin[a]^2*y[t]*w^2 +m*g*Cos[a]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1776., {1153., 1159.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803875937383062*^9},ExpressionUUID->"e0941559-6b6b-4807-b023-\
26bd59d1ab6f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"a", "*", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      RowBox[{"x", "^", "2"}], "+", 
      RowBox[{"y", "^", "2"}]}], "]"}]}], ")"}], "^", "2"}]], "Input",
 CellChangeTimes->{{3.803888096709198*^9, 3.803888129071966*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d884efea-5035-4d4e-b912-02802b2e548b"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["a", "2"], " ", 
  RowBox[{"(", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.80388811239618*^9, 3.8038881301020613`*^9}},
 CellLabel->"Out[10]=",ExpressionUUID->"c11fd212-5bc9-4b57-84e4-9d438687b113"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{
     RowBox[{"m", "*", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}]}], "+", 
     RowBox[{"m", "*", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "t", "]"}], "*", 
      RowBox[{"a", "^", "2"}]}], "-", 
     RowBox[{"m", "*", 
      RowBox[{"y", "[", "t", "]"}], "*", 
      RowBox[{"w", "^", "2"}]}], "+", 
     RowBox[{"g", "*", "a", "*", "m"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "46eb18a2-327c-4c26-a268-35102d2024d0"],
 "=0"
}], "WolframAlphaLong",
 CellChangeTimes->{
  3.803895693174411*^9, 3.803895738356501*^9, {3.803895777079837*^9, 
   3.803895938675911*^9}, {3.803896224067382*^9, 3.8038962379767113`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"4aae425c-c4f9-4d69-ade0-38e85a8b247e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "[m*y''[t] + m*y''[t]*a^2 - m*y[t]*w^2 + g*a*m=0", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"m y''[t] + m y''[t] a^2 - m y[t] w^2 + g a m == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{"m", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                 RowBox[{"m", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}], " ", 
                   SuperscriptBox["a", "2"]}], "-", 
                 RowBox[{"m", " ", 
                   RowBox[{"y", "(", "t", ")"}], " ", 
                   SuperscriptBox["w", "2"]}], "+", 
                 RowBox[{"g", " ", "a", " ", "m"}]}], "\[LongEqual]", "0"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Autonomous equation", "scanner" -> "ODE", "id" -> 
     "AutonomousEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"m", "+", 
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", "m"}]}], ")"}], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{
                    RowBox[{"-", "a"}], " ", "g", " ", "m"}], "+", 
                   RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], Identity]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Autonomous.html", "text" -> 
           "Autonomous equation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[a g m - m w^2 y[t] + m y''[t] + a^2 m y''[t] == 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"m", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}], " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                    RowBox[{"a", " ", "g"}], "+", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"-", 
                    RowBox[{"y", "(", "t", ")"}]}], ")"}]}]}], ")"}]}], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[a g m - m w^2 y[t] + m y''[t] + a^2 m y''[t] == 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"m", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                    RowBox[{"a", " ", "g"}], "-", 
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}], "+", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], ")"}]}], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> 
     "Alternate form assuming a, g, m, t, and w are positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[a g m - m w^2 y[t] + m y''[t] + a^2 m y''[t] == 0, a > \
0 && g > 0 && m > 0 && t > 0 && w > 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                RowBox[{"a", " ", "g"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 SuperscriptBox["w", "2"], " ", 
                 RowBox[{"y", "(", "t", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "DSolve[{a g m - m w^2 y[t] + m y''[t] + a^2 m y''[t] == 0}, y[t], \
t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", "w"}], ")"}], "/", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}]]}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", "w"}], ")"}], "/", 
                    SqrtBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}]]}]}]]}], "+", 
                FractionBox[
                 RowBox[{"a", " ", "g"}], 
                 SuperscriptBox["w", "2"]]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"a", " ", "g", " ", "m"}], "+", 
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "+", 
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", "m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", "0"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"complementary \"", "\"solution \"", "\"and \"", 
                    "\"particular \"", "\"solution.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\"Find the complementary solution by solving \"", 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm], ")"}], 
                    " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "0", FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], 
                    StyleBox[
                    "\":\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "t", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm], ")"}], 
                    " ", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm]}], 
                    "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", 
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", "m"}]}], HoldForm], ")"}], 
                    " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "m", " ", 
                    SuperscriptBox["w", "2"]}], "+", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", "m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}]}], HoldForm], ")"}], 
                    " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], "\[NotEqual]", "0"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"for \"", "\"any \"", 
                    "\"finite \"", 
                    TemplateBox[{
                    StyleBox["\[Lambda]", FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"], 
                    "\",\"", "\" \""}, "RowDefault"], "\"the \"", 
                    "\"zeros \"", "\"must \"", "\"come \"", "\"from \"", 
                    "\"the \"", "\"polynomial:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "m", " ", 
                    SuperscriptBox["w", "2"]}], "+", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "+", 
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", "m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "m", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["w", "2"], "-", 
                    SuperscriptBox["\[Lambda]", "2"], "-", 
                    RowBox[{
                    SuperscriptBox["a", "2"], " ", 
                    SuperscriptBox["\[Lambda]", "2"]}]}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    FractionBox["w", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox["w", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]]}]}]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox["w", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]]}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", "w"}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]}]]}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"as \"", 
                    "\"a \"", "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    FractionBox["w", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", "w"}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]]}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" \""}, "RowDefault"], "\"as \"", 
                    "\"a \"", "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"w", " ", "t"}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]}]]}], 
                    "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"w", " ", "t"}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm], ")"}]}], 
                    "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], 
                    "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "g", " ", "m"}]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"by \"", "\"the \"", "\"method \"", 
                    "\"of \"", "\"undetermined \"", "\"coefficients:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"particular \"", "\"solution \"", "\"to \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm], ")"}]}], 
                    "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{"y", "(", "t", ")"}]}]}], HoldForm], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "g", " ", "m"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"is \"", "\"of \"", "\"the \"",
                     "\"form:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\[LongEqual]", 
                    SubscriptBox["b", "1"]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Solve \"", "\"for \"", "\"the \"", "\"unknown \"", 
                    "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["b", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\":\""}, "RowDefault"]}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SubscriptBox["b", "1"], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Substitute \"", "\"the \"", "\"particular \"", 
                    "\"solution \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"m", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm], ")"}], 
                    " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], "-", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"], " ", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"-", "a", " ", "g", " ", "m"}], HoldForm]}, 
                    "RowDefault"], HoldForm]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm], ")"}]}], 
                    ")"}], " ", "0"}], "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"m", " ", 
                    SuperscriptBox["w", "2"]}], ")"}], " ", 
                    SubscriptBox["b", "1"]}]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"-", "a", " ", "g", " ", "m"}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"Solve \"", "\"the \"", "\"equation:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    SubscriptBox["b", "1"], "\[LongEqual]", 
                    FractionBox[
                    RowBox[{"a", " ", "g"}], 
                    SuperscriptBox["w", "2"]]}]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 3, RowAlignments -> Baseline, 
                    ColumnAlignments -> Left], 
                    Function[BoxForm`e$, 
                    TableForm[BoxForm`e$, TableSpacing == {1, 3}]]]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["b", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"into \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SubscriptBox["b", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", 
                    FractionBox[
                    RowBox[{"a", " ", "g"}], 
                    SuperscriptBox["w", "2"]]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "\"c\""], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"a", " ", "g"}], 
                    SuperscriptBox["w", "2"]], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"w", " ", "t"}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]}]]}], 
                    "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"w", " ", "t"}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]]}]}], 
                    HoldForm]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Solve with undetermined coefficients", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve with undetermined coefficients", "input" -> 
           "Solution__Solve with undetermined coefficients"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with variation of parameters", "input" -> 
           "Solution__Solve with variation of parameters"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with Laplace transform", "input" -> 
           "Solution__Solve with Laplace transform"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as an autonomous equation", "input" -> 
           "Solution__Solve as an autonomous equation"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"2", " ", "a", " ", "g", " ", "y"}], 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}]]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["w", "2"], " ", 
                    SuperscriptBox["y", "2"]}], 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}]], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.29", 
    "parsetiming" -> "3.087", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP74122392599d235c5b940000548a39i22d71072g", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "54", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa74132392599d235c5b9400005bb3e1a86e1ebad85802790122383609046", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 16, 15, 50, 45.267997`8.408366255320082}, "Line" -> 
    13, "SessionID" -> 16181112696560740433}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "[m*y''[t] + m*y''[t]*a^2 - m*y[t]*w^2 + g*a*m=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1776., {1184., 1190.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.803896245285144*^9},ExpressionUUID->"c7cae382-7830-4505-afa8-\
4c68927183ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  TagBox[
   TemplateBox[{TemplateBox[{
       RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"],
     "\"\[LongEqual] \"",TemplateBox[{
       TagBox[
        RowBox[{
          RowBox[{
            SubscriptBox["y", "\"c\""], "(", "t", ")"}], "+", 
          RowBox[{
            SubscriptBox["y", "p"], "(", "t", ")"}]}], HoldForm], "\" \""}, 
      "RowDefault"],"\"\[LongEqual] \"",TagBox[
      RowBox[{
        FractionBox[
         RowBox[{"a", " ", "g"}], 
         SuperscriptBox["w", "2"]], "+", 
        RowBox[{
          RowBox[{"l", "/", "2"}], 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"w", " ", "t"}], ")"}], "/", 
               SqrtBox[
                TagBox[
                 RowBox[{
                   SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]}]]}], 
        "+", 
        RowBox[{
          RowBox[{"l", "/", "2"}], 
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{
             RowBox[{"(", 
               RowBox[{"w", " ", "t"}], ")"}], "/", 
             SqrtBox[
              TagBox[
               RowBox[{
                 SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]}]]}]}], 
      HoldForm]},
    "RowDefault"],
   HoldForm], TraditionalForm]], "Input",
 CellChangeTimes->{{3.803897222174479*^9, 3.803897234942615*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"0408bd5e-00a9-4a0f-996d-c0d1bcf1a53e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{TemplateBox[{
      RowBox[{"y", "[", "t", "]"}], "\" \""}, "RowDefault"],
    "\"\[LongEqual] \"",TemplateBox[{
      TagBox[
       RowBox[{
         RowBox[{"SphericalBesselY", "[", 
           RowBox[{"\"c\"", ",", "t"}], "]"}], "+", 
         RowBox[{"SphericalBesselY", "[", 
           RowBox[{"p", ",", "t"}], "]"}]}], HoldForm], "\" \""}, 
     "RowDefault"],"\"\[LongEqual] \"",TagBox[
     RowBox[{
       FractionBox[
        RowBox[{"a", " ", "g"}], 
        SuperscriptBox["w", "2"]], "+", 
       RowBox[{
         FractionBox["1", "2"], " ", "l", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
            FractionBox[
             RowBox[{"w", " ", "t"}], 
             SqrtBox[
              TagBox[
               RowBox[{
                 SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]]}]]}], "+", 
       
       RowBox[{
         FractionBox["1", "2"], " ", "l", " ", 
         SuperscriptBox["\[ExponentialE]", 
          FractionBox[
           RowBox[{"w", " ", "t"}], 
           SqrtBox[
            TagBox[
             RowBox[{
               SuperscriptBox["a", "2"], "+", "1"}], HoldForm]]]]}]}], 
     HoldForm]},
   "RowDefault"],
  HoldForm]], "Output",
 CellChangeTimes->{3.803897241087846*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"ade24adb-f538-4b73-938a-681361ebf2b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"a", " ", "*", "g"}], 
   SuperscriptBox["w", "2"]], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", "l", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"w", " ", "*", "0"}], 
      SqrtBox[
       TagBox[
        RowBox[{
         SuperscriptBox["a", "2"], "+", "1"}],
        HoldForm]]]}]]}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", "l", " ", 
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"w", " ", "*", "0"}], 
     SqrtBox[
      TagBox[
       RowBox[{
        SuperscriptBox["a", "2"], "+", "1"}],
       HoldForm]]]]}]}]], "Input",
 CellChangeTimes->{{3.8038972827759323`*^9, 3.803897316559698*^9}, 
   3.8038975044960403`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"fe6564b9-206f-4dd9-ba4b-8064bafb2296"],

Cell[BoxData[
 RowBox[{"l", "+", 
  FractionBox[
   RowBox[{"a", " ", "g"}], 
   SuperscriptBox["w", "2"]]}]], "Output",
 CellChangeTimes->{3.803897505916889*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2d41779f-fa66-443c-a7dc-39c49e7bfaf6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"l", "+", 
     FractionBox[
      RowBox[{"a", " ", "*", "g"}], 
      SuperscriptBox["w", "2"]]}], "==", "l"}], ",", "w"}], "]"}]], "Input",
 CellChangeTimes->{{3.803897375978141*^9, 3.8038974236248207`*^9}, {
  3.8038975118216476`*^9, 3.8038975260903463`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"fc21405e-29e2-4845-bd07-e96a31a5f769"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.803897390619082*^9, 3.80389742512164*^9}, {
  3.8038975126869926`*^9, 3.803897535109213*^9}},
 CellLabel->"Out[24]=",ExpressionUUID->"72a2f79d-eb9c-4216-8ac2-1007bf57109c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", "y", "]"}], "^", "2"}], " ", "*", 
    RowBox[{
     RowBox[{"Cos", "[", "x", "]"}], "^", "2"}]}], " ", "+", 
   RowBox[{
    RowBox[{"Cos", "[", "y", "]"}], "^", "2"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8039003348526506`*^9, 3.8039003887726793`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"e2957db8-4205-46b7-a27c-6efee182839c"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"Cos", "[", "y", "]"}], "2"], "+", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Cos", "[", "x", "]"}], "2"], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "y", "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{3.803900390374579*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"7006c5b9-7055-4779-a118-6925f042008f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["y''[t]+m/(M+m)*y''[t]+g/l*y[t]=0", "WolframAlphaLong",
 CellChangeTimes->{{3.80405352607609*^9, 3.804053604562847*^9}, {
   3.804053852196574*^9, 3.804053883248913*^9}, {3.804053933879529*^9, 
   3.804053941821385*^9}, {3.8040540398174763`*^9, 3.804054055519558*^9}, {
   3.804054096316613*^9, 3.80405409749907*^9}, {3.8040541585291862`*^9, 
   3.804054176218248*^9}, {3.804054212671689*^9, 3.804054270765286*^9}, {
   3.804054333698379*^9, 3.8040543632603073`*^9}, 3.804054407143635*^9, {
   3.804054453769043*^9, 3.804054455450861*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"d78d1031-ae1a-48d8-b820-e61126fd17b0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "y''[t]+m/(M+m)*y''[t]+g/l*y[t]=0", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Solution__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"y''[t] + (m/(M + m)) y''[t] + (g/l) y[t] == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{
                   SuperscriptBox[
                   "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                   "t", ")"}], "+", 
                 RowBox[{
                   TagBox[
                    FractionBox["m", 
                    RowBox[{"M", "+", "m"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                 RowBox[{
                   TagBox[
                    FractionBox["g", "l"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                   RowBox[{"y", "(", "t", ")"}]}]}], "\[LongEqual]", "0"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Autonomous equation", "scanner" -> "ODE", "id" -> 
     "AutonomousEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"1", "+", 
                    FractionBox["m", 
                    RowBox[{"m", "+", "M"}]]}], ")"}], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "\[LongEqual]", 
                TagBox[
                 RowBox[{"-", 
                   FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"y", "(", "t", ")"}]}], "l"]}], Identity]}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Autonomous.html", "text" -> 
           "Autonomous equation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"l", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}], " ", 
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"g", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"m"}]}], "-", "M"}], ")"}], " ", 
                 RowBox[{"y", "(", "t", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[(g y[t])/l + y''[t] + (m y''[t])/(m + M) == 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{"g", " ", "m", " ", 
                   RowBox[{"y", "(", "t", ")"}]}], "+", 
                 RowBox[{"g", " ", "M", " ", 
                   RowBox[{"y", "(", "t", ")"}]}], "+", 
                 RowBox[{"2", " ", "l", " ", "m", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                 RowBox[{"l", " ", "M", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}]}], 
               RowBox[{"l", " ", 
                 RowBox[{"(", 
                   RowBox[{"m", "+", "M"}], ")"}]}]], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> 
     "Alternate form assuming g, l, m, M, and t are positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[(g y[t])/l + y''[t] + (m y''[t])/(m + M) == 0, g > 0 && \
l > 0 && m > 0 && M > 0 && t > 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"g", " ", 
                  RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}], " ", 
                  RowBox[{"y", "(", "t", ")"}]}], "+", 
                RowBox[{"l", " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}]}], "\[LongEqual]", "0"}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "DSolve[{(g y[t])/l + y''[t] + (m y''[t])/(m + M) == 0}, y[t], t]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}]}]]}], ")"}], "/", 
                    SqrtBox[
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}]}]]}], ")"}], "/", 
                    SqrtBox[
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}]}]]}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    FractionBox[
                    RowBox[{"m", " ", 
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "t", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    HoldForm]}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]], "+", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"y", "(", "t", ")"}]}], "l"]}], HoldForm], 
                    "\[LongEqual]", "0"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                  GrayLevel[0.3], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume \"", "\"a \"", "\"solution \"", "\"will \"", 
                    "\"be \"", "\"proportional \"", "\"to \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\" \""}, 
                    "RowDefault"], "\"for \"", "\"some \"", "\"constant \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"y", "(", "t", ")"}], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"into \"", "\"the \"", 
                    "\"differential \"", "\"equation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], HoldForm], ")"}], 
                    " ", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm]}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]], "+", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "l"]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["t", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], ")"}]}], HoldForm], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "m"}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]], "+", 
                    FractionBox["M", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]]}], HoldForm], ")"}], 
                    " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"g", " ", "m"}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]], "+", 
                    FractionBox[
                    RowBox[{"g", " ", "M"}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]]}], HoldForm],
                     ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}]}], HoldForm], "\" \""},
                     "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor \"", "\"out \"", 
                    TemplateBox[{
                    StyleBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"g", " ", "m"}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]], "+", 
                    FractionBox[
                    RowBox[{"g", " ", "M"}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]], "+", 
                    FractionBox[
                    RowBox[{"2", " ", "m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]], "+", 
                    FractionBox[
                    RowBox[{"M", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]]}], HoldForm], ")"}], 
                    " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]]}], "\" \""}, 
                    "RowDefault"], "\"\[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "t"}]], "\[NotEqual]", "0"}], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    "\" \""}, "RowDefault"], "\"for \"", "\"any \"", 
                    "\"finite \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], "\",\"", "\" \""},
                     "RowDefault"], "\"the \"", "\"zeros \"", "\"must \"", 
                    "\"come \"", "\"from \"", "\"the \"", "\"polynomial:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"g", " ", "m"}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]], "+", 
                    FractionBox[
                    RowBox[{"g", " ", "M"}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]], "+", 
                    FractionBox[
                    RowBox[{"2", " ", "m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]], "+", 
                    FractionBox[
                    RowBox[{"M", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm]]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", "0"}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"g", " ", "m"}], "+", 
                    RowBox[{"g", " ", "M"}], "+", 
                    RowBox[{"2", " ", "l", " ", "m", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}], "+", 
                    RowBox[{"l", " ", "M", " ", 
                    SuperscriptBox["\[Lambda]", "2"]}]}], HoldForm], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"m", "+", "M"}], HoldForm], ")"}]}]], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve \"", "\"for \"", 
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    FractionBox[
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]], 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]], 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]]}]}]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]], 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]]}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]}]}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "1"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"root \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    "\[Lambda]", FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    FractionBox[
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]], 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"gives \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    "\" \[LongEqual] \"", FontColor -> GrayLevel[0], 
                    StripOnInput -> False], 
                    StyleBox[
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]]}], ")"}], "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]}]]}], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"as \"", "\"a \"", 
                    "\"solution, \"", "\"where \"", 
                    TemplateBox[{
                    StyleBox[
                    SubscriptBox["c", "2"], FontColor -> GrayLevel[0], 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"an \"", "\"arbitrary \"", "\"constant.\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"general \"", "\"solution \"", "\"is \"", 
                    "\"the \"", "\"sum \"", "\"of \"", "\"the \"", 
                    "\"above \"", "\"solutions:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"y", "(", "t", ")"}], "\" \""}, "RowDefault"], 
                    "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "t", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "t", ")"}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]], " ", "t"}], ")"}], 
                    "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]}]}]]}], "+", 
                    RowBox[{
                    SubscriptBox["c", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "g", " ", "m"}], "-", 
                    RowBox[{"g", " ", "M"}]}], HoldForm]], " ", "t"}], ")"}], 
                    "/", 
                    SqrtBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "l", " ", "m"}], "+", 
                    RowBox[{"l", " ", "M"}]}], HoldForm]]}]]}]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Solve as a homogeneous linear equation", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve as a homogeneous linear equation", "input" -> 
           "Solution__Solve as a homogeneous linear equation"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve with Laplace transform", "input" -> 
           "Solution__Solve with Laplace transform"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as an autonomous equation", "input" -> 
           "Solution__Solve as an autonomous equation"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Solution__Hide steps"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], "2"], 
                    "-", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    SuperscriptBox["y", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}]}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}], 
                  ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "M", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "*C.M-_*Variable-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RomanNumeral", "desc" -> "a roman numeral", "input" -> 
          "*C.M-_*RomanNumeral-"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.744", 
    "parsetiming" -> "1.26", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSP712123ehgd06dhbh098c000060eibeead4g099dc", "host" -> 
    "https://www4c.wolframalpha.com", "server" -> "35", "related" -> 
    "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa712223ehgd06dhbh098c00001324e51445di4he24523241320702490697", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 18, 11, 47, 39.557981`8.349809096055031}, "Line" -> 
    14, "SessionID" -> 16182279394659952130}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "y''[t]+m/(M+m)*y''[t]+g/l*y[t]=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1769., {826., 832.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.804054459572372*^9},ExpressionUUID->"51a8177f-4bd8-4aa9-84c7-\
45d4cff79252"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["^"], "Input",ExpressionUUID->"12f2b861-a236-4907-8eff-d4a00f18a2f5"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "y''[t]+m/(M+m)*y''[t]+g/l*y[t]=0", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"y''[t] + (m/(M + m)) y''[t] + (g/l) y[t] == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{
                   SuperscriptBox[
                   "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                   "t", ")"}], "+", 
                 RowBox[{
                   TagBox[
                    FractionBox["m", 
                    RowBox[{"M", "+", "m"}]], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                 RowBox[{
                   TagBox[
                    FractionBox["g", "l"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                   RowBox[{"y", "(", "t", ")"}]}]}], "\[LongEqual]", "0"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Autonomous equation", "scanner" -> "ODE", "id" -> 
     "AutonomousEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"1", "+", 
                    FractionBox["m", 
                    RowBox[{"m", "+", "M"}]]}], ")"}], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "\[LongEqual]", 
                TagBox[
                 RowBox[{"-", 
                   FractionBox[
                    RowBox[{"g", " ", 
                    RowBox[{"y", "(", "t", ")"}]}], "l"]}], Identity]}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Autonomous.html", "text" -> 
           "Autonomous equation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"l", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}], " ", 
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "t", ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{"g", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{"m"}]}], "-", "M"}], ")"}], " ", 
                 RowBox[{"y", "(", "t", ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[(g y[t])/l + y''[t] + (m y''[t])/(m + M) == 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox[
               RowBox[{
                 RowBox[{"g", " ", "m", " ", 
                   RowBox[{"y", "(", "t", ")"}]}], "+", 
                 RowBox[{"g", " ", "M", " ", 
                   RowBox[{"y", "(", "t", ")"}]}], "+", 
                 RowBox[{"2", " ", "l", " ", "m", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}], "+", 
                 RowBox[{"l", " ", "M", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}]}], 
               RowBox[{"l", " ", 
                 RowBox[{"(", 
                   RowBox[{"m", "+", "M"}], ")"}]}]], "\[LongEqual]", "0"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> 
     "Alternate form assuming g, l, m, M, and t are positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[(g y[t])/l + y''[t] + (m y''[t])/(m + M) == 0, g > 0 && \
l > 0 && m > 0 && M > 0 && t > 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"g", " ", 
                  RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}], " ", 
                  RowBox[{"y", "(", "t", ")"}]}], "+", 
                RowBox[{"l", " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}], " ", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "t", ")"}]}]}], "\[LongEqual]", "0"}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "DSolve[{(g y[t])/l + y''[t] + (m y''[t])/(m + M) == 0}, y[t], t]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}]}]]}], ")"}], "/", 
                    SqrtBox[
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}]]}], "+", 
                RowBox[{
                  SubscriptBox["c", "2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"t", " ", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"-", "g"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}]}]]}], ")"}], "/", 
                    SqrtBox[
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}]}]]}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Solution__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Solution__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], ")"}], "2"], 
                    "-", 
                    FractionBox[
                    RowBox[{"g", " ", 
                    SuperscriptBox["y", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"m", "+", "M"}], ")"}]}], 
                    RowBox[{"l", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}], 
                  ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "M", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "*C.M-_*Variable-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RomanNumeral", "desc" -> "a roman numeral", "input" -> 
          "*C.M-_*RomanNumeral-"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.815", 
    "parsetiming" -> "1.305", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP952025357e633ecfd20000208bhda5f0e93g53", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "18", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa962025357e633ecfd200006aef970fa9ei498h2812829786434294891", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 7, 18, 11, 33, 29.706653`8.225428704561208}, "Line" -> 2,
     "SessionID" -> 16182279394659952130}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "y''[t]+m/(M+m)*y''[t]+g/l*y[t]=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1776., {302., 308.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.804053609721487*^9, 
  3.804053631254265*^9}},ExpressionUUID->"54cc1c7e-90c7-4ff0-9502-\
8a40ebeb4f8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"c", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"t", " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"-", "g"}], " ", 
          RowBox[{"(", 
           RowBox[{"m", "+", "M"}], ")"}]}]]}], ")"}], "/", 
      SqrtBox[
       RowBox[{"l", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}]]}], "+", 
   RowBox[{"c", " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"t", " ", 
         SqrtBox[
          RowBox[{
           RowBox[{"-", "g"}], " ", 
           RowBox[{"(", 
            RowBox[{"m", "+", "M"}], ")"}]}]]}], ")"}], "/", 
       SqrtBox[
        RowBox[{"l", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]}]}]]}]}], 
  TraditionalForm]], "Input",
 CellChangeTimes->{{3.8040536470144243`*^9, 3.804053654525779*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"e180017f-da38-41fa-835b-1c9a7eeea377"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{
       SqrtBox[
        RowBox[{
         RowBox[{"-", "g"}], " ", 
         RowBox[{"(", 
          RowBox[{"m", "+", "M"}], ")"}]}]], " ", "t"}], 
      SqrtBox[
       RowBox[{"l", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]]}]]}], "+", 
  RowBox[{"c", " ", 
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{
      SqrtBox[
       RowBox[{
        RowBox[{"-", "g"}], " ", 
        RowBox[{"(", 
         RowBox[{"m", "+", "M"}], ")"}]}]], " ", "t"}], 
     SqrtBox[
      RowBox[{"l", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "m"}], "+", "M"}], ")"}]}]]]]}]}]], "Output",
 CellChangeTimes->{3.804053659296579*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"a0b7a60d-015a-4c87-bd45-2bb114dd6acd"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.804092015912589*^9, 3.804092030946138*^9}, {
   3.8040920646648407`*^9, 3.80409209585606*^9}, 
   3.804092523174221*^9},ExpressionUUID->"79a3312c-23d9-403c-9476-\
289bdea50104"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8040921127384243`*^9, 3.804092181505916*^9}, 
   3.80409252589993*^9},ExpressionUUID->"32796e7d-4788-4454-b3b7-\
fca51aace757"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"1", "/", "2"}], "*", "m", "*", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"r", "[", "t", "]"}], "^", "2"}], "+", 
     RowBox[{
      RowBox[{"l", "^", "2"}], "*", 
      RowBox[{
       RowBox[{"o", "[", "t", "]"}], "^", "2"}]}], "+", 
     RowBox[{"d", "*", 
      RowBox[{
       RowBox[{"r", "[", "t", "]"}], "/", 
       RowBox[{"l", "^", "2"}]}]}]}], ")"}]}], "-", 
  RowBox[{"m", "*", "g", "*", "d", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"1", "/", "a"}], "-", 
     RowBox[{"1", "/", 
      RowBox[{"r", "[", "t", "]"}]}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.8040921907883263`*^9, 3.804092315601617*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c6157c1b-138e-4918-b80c-cede6bc5c4a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "d"}], " ", "g", " ", "m", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "a"], "-", 
     FractionBox["1", 
      RowBox[{
       FractionBox["pr", "m"], "-", 
       FractionBox["d", 
        RowBox[{"m", " ", 
         SuperscriptBox["r", "2"]}]]}]]}], ")"}]}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", "m", " ", 
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      SuperscriptBox["po", "2"], 
      RowBox[{
       SuperscriptBox["l", "2"], " ", 
       SuperscriptBox["m", "2"]}]], "+", 
     FractionBox[
      RowBox[{"d", " ", 
       RowBox[{"(", 
        RowBox[{
         FractionBox["pr", "m"], "-", 
         FractionBox["d", 
          RowBox[{"m", " ", 
           SuperscriptBox["r", "2"]}]]}], ")"}]}], 
      SuperscriptBox["l", "2"]], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        FractionBox["pr", "m"], "-", 
        FractionBox["d", 
         RowBox[{"m", " ", 
          SuperscriptBox["r", "2"]}]]}], ")"}], "2"]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.804092317219689*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"f831781c-328f-4f54-98ac-c8cebcb0adc1"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.804092171791663*^9, 3.804092173182824*^9}, {
  3.804092476432598*^9, 
  3.804092517530048*^9}},ExpressionUUID->"e5795986-f541-46eb-aea5-\
768880d72b83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"r", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8040925281595507`*^9, 3.804092532010315*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"0b46137e-89f5-438e-b33a-96b47e417537"],

Cell[BoxData["r"], "Output",
 CellChangeTimes->{3.804092533770919*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"5e131d0d-f31a-4883-9648-693b46cb63e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["r"], "Input",
 CellChangeTimes->{3.804092535654491*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"9f7d8bcd-6109-49c8-94cc-5c3f4c15d28e"],

Cell[BoxData["r"], "Output",
 CellChangeTimes->{3.80409253703652*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"93a94188-3999-409c-a34e-7d7260cd0e78"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "r", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[25]:=",ExpressionUUID->"20e39aa9-a650-4aef-8af6-8a11954f5a56"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "o", "]"}], "\[IndentingNewLine]", 
 RowBox[{"p", ":=", 
  RowBox[{
   RowBox[{"m", "*", "v"}], "+", 
   RowBox[{"d", "/", 
    RowBox[{"r", "^", "2"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.804092544534813*^9, 3.804092607027364*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"6e86b103-f040-4ffc-b5bf-45e0c19c75e3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "*", "p"}], "\[Equal]", " ", 
    RowBox[{
     RowBox[{"m", "/", "2"}], "*", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"v", "^", "2"}], "+", 
       RowBox[{"d", "*", 
        RowBox[{"v", "/", 
         RowBox[{"r", "^", "2"}]}]}]}], ")"}]}]}], ",", "x"}], "]"}]], "Input",\

 CellChangeTimes->{{3.804092618105328*^9, 3.804092706211549*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"e819bb40-3e2f-43d6-9c97-4a219e06dd3b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    FractionBox[
     RowBox[{"m", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"d", " ", "v"}], "+", 
        RowBox[{
         SuperscriptBox["r", "2"], " ", 
         SuperscriptBox["v", "2"]}]}], ")"}]}], 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{"d", "+", 
        RowBox[{"m", " ", 
         SuperscriptBox["r", "2"], " ", "v"}]}], ")"}]}]]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.804092707957635*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"75192313-4c4c-49c2-9fd3-896d805fb29a"]
}, Open  ]]
},
WindowSize->{1848, 1016},
WindowMargins->{{0, Automatic}, {0, Automatic}},
TaggingRules->{"TryRealOnly" -> False},
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 154, 3, 31, "Input",ExpressionUUID->"d64a66e7-9ae1-499f-9a6b-8f3b64beae89"],
Cell[CellGroupData[{
Cell[737, 27, 276, 5, 49, "Input",ExpressionUUID->"3025526a-d9d6-4675-8459-fa2b397114a6"],
Cell[1016, 34, 251, 6, 35, "Output",ExpressionUUID->"0c08e939-e610-413a-90fd-44e946b7a303"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1304, 45, 347, 8, 74, "Input",ExpressionUUID->"696a7ee5-0c83-41a9-8274-bd18266816c5"],
Cell[1654, 55, 385, 10, 35, "Output",ExpressionUUID->"c8adee1c-5e16-4d78-897f-4a35fa445cec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2076, 70, 227, 4, 49, "Input",ExpressionUUID->"d8fbd6e8-28a4-4651-9f95-4025d4b8ce8f"],
Cell[2306, 76, 193, 4, 35, "Output",ExpressionUUID->"44979026-f6cd-448c-95dd-f0f08c8883b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2536, 85, 289, 7, 31, "Input",ExpressionUUID->"770f7b71-5a58-4137-87ff-38c3720c1852"],
Cell[2828, 94, 193, 4, 35, "Output",ExpressionUUID->"69c3613d-98e0-46c2-873b-4a2c697a6c69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3058, 103, 376, 9, 49, "Input",ExpressionUUID->"1f6aa856-fda5-440a-91c2-2fab9c74b870"],
Cell[3437, 114, 353, 9, 35, "Output",ExpressionUUID->"fd7eb6c2-bf03-4534-9091-851d2c49ced4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3827, 128, 403, 10, 49, "Input",ExpressionUUID->"aeb8d8c4-d83d-4088-8305-47254b8515d5"],
Cell[4233, 140, 486, 14, 40, "Output",ExpressionUUID->"f7ad93d9-91ee-492c-a0ea-9abd0ee32960"]
}, Open  ]],
Cell[4734, 157, 225, 4, 31, "Input",ExpressionUUID->"9177232e-084a-443e-83ca-d57adbee1558"],
Cell[CellGroupData[{
Cell[4984, 165, 429, 11, 49, "Input",ExpressionUUID->"277642a3-e62a-48c3-a364-3d3fb4fed57f"],
Cell[5416, 178, 444, 11, 35, "Output",ExpressionUUID->"ec7bb4a3-ca6d-4c17-801a-1b15a6eb433a"]
}, Open  ]],
Cell[5875, 192, 154, 3, 31, "Input",ExpressionUUID->"fcb07d99-8335-4505-a656-61e8e730b7b8"],
Cell[6032, 197, 409, 10, 49, "Input",ExpressionUUID->"bd346f3f-eb52-450f-ab33-9ced30afb7b8"],
Cell[CellGroupData[{
Cell[6466, 211, 207, 3, 55, "Input",ExpressionUUID->"26115405-e992-4cb1-b378-f379fde8bace"],
Cell[6676, 216, 542, 12, 23, "Message",ExpressionUUID->"85433d1b-3fd8-4d11-9acf-0fb84f922f3e"],
Cell[7221, 230, 389, 10, 35, "Output",ExpressionUUID->"4ba55423-a5a1-401b-9ed6-7d573229dacc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7647, 245, 194, 3, 31, "Input",ExpressionUUID->"35ea378b-cff4-4495-b533-c0af17594134"],
Cell[7844, 250, 542, 12, 23, "Message",ExpressionUUID->"db1088d1-4411-4d8f-885a-0235cf68aba0"],
Cell[8389, 264, 202, 4, 35, "Output",ExpressionUUID->"8b2c2515-d045-4f1a-a077-3e7568dfe788"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8628, 273, 224, 4, 49, "Input",ExpressionUUID->"4188b3c5-d2ab-4033-bb3e-1e4dfb787bc5"],
Cell[8855, 279, 542, 12, 23, "Message",ExpressionUUID->"0e09ef3c-aab7-4fef-86a9-9aeec2645203"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9434, 296, 152, 3, 31, "Input",ExpressionUUID->"5cca6626-e0e4-49ca-b55f-058bf1181a2e"],
Cell[9589, 301, 204, 4, 35, "Output",ExpressionUUID->"787bb65a-d892-450d-ab8c-573ca60b1f7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9830, 310, 219, 5, 49, "Input",ExpressionUUID->"fa2f88ee-5c62-4ac0-a145-9a368966115f"],
Cell[10052, 317, 542, 12, 23, "Message",ExpressionUUID->"cc7ca34a-6484-480a-ab45-aef41cea9940"],
Cell[10597, 331, 201, 4, 35, "Output",ExpressionUUID->"864ff497-e36e-4f73-a2eb-bfc6b8029f80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10835, 340, 150, 2, 31, "Input",ExpressionUUID->"60674c69-8ffe-40ab-9e23-2d8cb9573cb7"],
Cell[10988, 344, 542, 12, 23, "Message",ExpressionUUID->"c50d4acb-8e7a-450a-a883-46c99eff15ef"],
Cell[11533, 358, 391, 10, 35, "Output",ExpressionUUID->"3a60b9a0-daf0-40e9-aab2-46e375322af9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11961, 373, 662, 18, 49, "Input",ExpressionUUID->"582135ae-6299-430a-8b52-75ae6eec5fdc"],
Cell[12626, 393, 544, 12, 23, "Message",ExpressionUUID->"f6aff396-46ae-4563-b63f-74544f810c0b"],
Cell[13173, 407, 638, 19, 35, "Output",ExpressionUUID->"d1ddfd6d-a71a-4c2d-8f7e-d32fef71a832"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13848, 431, 721, 21, 49, "Input",ExpressionUUID->"c35a0c99-cb29-4dfe-add2-41bdbdedaff8"],
Cell[14572, 454, 542, 12, 23, "Message",ExpressionUUID->"81b913f6-66a3-49ee-a313-440d9f1fedb6"],
Cell[15117, 468, 738, 21, 35, "Output",ExpressionUUID->"14e862a3-1730-4694-96e6-ac55c6126326"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15892, 494, 322, 8, 49, "Input",ExpressionUUID->"06d92e16-c897-4bf0-a1d5-ef4e5f6fe981"],
Cell[16217, 504, 149, 2, 35, "Output",ExpressionUUID->"577b15ed-85dd-4593-be63-446e45d4dcff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16403, 511, 677, 15, 49, "Input",ExpressionUUID->"3cbd9cbe-cc95-442d-beb3-6e56d969d1c5"],
Cell[17083, 528, 667, 21, 45, "Output",ExpressionUUID->"28eee360-31ac-4a39-aae5-05beac2fd805"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17787, 554, 574, 7, 43, "WolframAlphaLong",ExpressionUUID->"fcd7c2ee-fe6c-4e49-80fa-b70eb044beb7"],
Cell[18364, 563, 64538, 1339, 2184, "Print",ExpressionUUID->"e0022f0a-955e-4326-9968-0fbf801170c1"],
Cell[82905, 1904, 465, 9, 23, "Message",ExpressionUUID->"03f51bc2-a325-4eed-8305-e108693ee36b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83407, 1918, 200, 2, 43, "WolframAlphaLong",ExpressionUUID->"f026fbbf-ac6f-4a0f-b982-052a6b957005"],
Cell[83610, 1922, 65828, 1365, 2310, "Print",ExpressionUUID->"7f557c47-a4b3-4bb3-8ca9-0dcba38c8abf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149475, 3292, 185, 2, 43, "WolframAlphaLong",ExpressionUUID->"491b7ff5-d9ef-4c98-b1f0-e1dca3bb45c5"],
Cell[149663, 3296, 139272, 2573, 1186, "Print",ExpressionUUID->"9435f02f-88a3-484c-84ae-91ddf323c32c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288972, 5874, 182, 2, 43, "WolframAlphaLong",ExpressionUUID->"c735b536-3eda-40e7-8d4a-6d537acd301f"],
Cell[289157, 5878, 10880, 213, 218, "Print",ExpressionUUID->"639af80b-ab0c-4c8a-86f5-256773984190"]
}, Open  ]],
Cell[CellGroupData[{
Cell[300074, 6096, 192, 2, 43, "WolframAlphaLong",ExpressionUUID->"8788cd87-0200-4c22-a45f-f0fe312c3730"],
Cell[300269, 6100, 248625, 4486, 1710, "Print",ExpressionUUID->"924b3f09-d18a-4e12-b3f0-e3f24ccf5bc2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[548931, 10591, 1692, 46, 52, "Input",ExpressionUUID->"8c090ae1-b43c-47d9-abac-eb95660372fa"],
Cell[550626, 10639, 1611, 26, 23, "Message",ExpressionUUID->"372eaa59-29c5-4d1d-b652-151daae624c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552274, 10670, 1856, 49, 54, "WolframAlphaLong",ExpressionUUID->"6b8e03a4-c745-4b5b-8067-585f9265ee8a"],
Cell[554133, 10721, 272455, 5388, 1918, "Print",ExpressionUUID->"a252e408-2515-48b5-9f8f-c771540af0cc"]
}, Open  ]],
Cell[826603, 16112, 438, 12, 49, "Input",ExpressionUUID->"1447ab0b-151b-4178-aced-e6924b899bee"],
Cell[CellGroupData[{
Cell[827066, 16128, 330, 9, 66, "Input",ExpressionUUID->"f53f2c6e-4dc8-49b9-9965-fd6e256d980d"],
Cell[827399, 16139, 332, 9, 53, "Output",ExpressionUUID->"19e90185-c8a9-4b6e-b510-742d9aaea8e6"]
}, Open  ]],
Cell[827746, 16151, 378, 10, 31, "Input",ExpressionUUID->"1f9e4c6c-6cdc-42e6-87ec-bebb35da1896"],
Cell[CellGroupData[{
Cell[828149, 16165, 287, 6, 49, "Input",ExpressionUUID->"db826d1c-830c-461b-80bc-59535a11051a"],
Cell[828439, 16173, 351, 9, 53, "Output",ExpressionUUID->"d01c758a-e8d2-412c-b5ea-07ff9625f1cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[828827, 16187, 264, 6, 31, "Input",ExpressionUUID->"f39bb922-67df-45e6-b265-e0bec43abdae"],
Cell[829094, 16195, 299, 8, 64, "Output",ExpressionUUID->"0df0066b-d453-4e99-8717-a5e8c94f2450"]
}, Open  ]],
Cell[CellGroupData[{
Cell[829430, 16208, 216, 4, 31, "Input",ExpressionUUID->"462ae0e7-ebaf-4f94-8537-0a896df39451"],
Cell[829649, 16214, 192, 4, 52, "Output",ExpressionUUID->"22d7584c-31db-404b-8360-7b470982136f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[829878, 16223, 691, 18, 49, "Input",ExpressionUUID->"2af04629-b024-4cb3-9f0a-722ccbb7db87"],
Cell[830572, 16243, 1192, 42, 72, "Output",ExpressionUUID->"a3c0dad0-42a4-4c29-aff3-de0b3730de16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[831801, 16290, 587, 15, 49, "Input",ExpressionUUID->"1f379da6-67dc-4b41-ba5c-4fab688c9ecc"],
Cell[832391, 16307, 914, 32, 58, "Output",ExpressionUUID->"0d3ed44b-7935-41ba-b212-700d30285410"]
}, Open  ]],
Cell[CellGroupData[{
Cell[833342, 16344, 927, 30, 54, "Input",ExpressionUUID->"fe5cad53-bcf3-4cfe-b0b2-3185637865d9"],
Cell[834272, 16376, 920, 30, 68, "Output",ExpressionUUID->"6db234ca-cf06-4fc9-abc1-da5573566262"]
}, Open  ]],
Cell[CellGroupData[{
Cell[835229, 16411, 264, 3, 43, "WolframAlphaLong",ExpressionUUID->"689d29b5-ead7-4fbb-8305-353a9bd4b07d"],
Cell[835496, 16416, 75560, 1577, 2322, "Print",ExpressionUUID->"e0941559-6b6b-4807-b023-26bd59d1ab6f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[911093, 17998, 354, 9, 49, "Input",ExpressionUUID->"d884efea-5035-4d4e-b912-02802b2e548b"],
Cell[911450, 18009, 319, 8, 40, "Output",ExpressionUUID->"c11fd212-5bc9-4b57-84e4-9d438687b113"]
}, Open  ]],
Cell[CellGroupData[{
Cell[911806, 18022, 826, 23, 43, "WolframAlphaLong",ExpressionUUID->"4aae425c-c4f9-4d69-ade0-38e85a8b247e"],
Cell[912635, 18047, 73340, 1550, 2384, "Print",ExpressionUUID->"c7cae382-7830-4505-afa8-4c68927183ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[986012, 19602, 1494, 43, 60, "Input",ExpressionUUID->"0408bd5e-00a9-4a0f-996d-c0d1bcf1a53e"],
Cell[987509, 19647, 1375, 40, 65, "Output",ExpressionUUID->"ade24adb-f538-4b73-938a-681361ebf2b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[988921, 19692, 842, 28, 62, "Input",ExpressionUUID->"fe6564b9-206f-4dd9-ba4b-8064bafb2296"],
Cell[989766, 19722, 241, 6, 52, "Output",ExpressionUUID->"2d41779f-fa66-443c-a7dc-39c49e7bfaf6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[990044, 19733, 415, 10, 65, "Input",ExpressionUUID->"fc21405e-29e2-4845-bd07-e96a31a5f769"],
Cell[990462, 19745, 240, 4, 35, "Output",ExpressionUUID->"72a2f79d-eb9c-4216-8ac2-1007bf57109c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[990739, 19754, 443, 12, 74, "Input",ExpressionUUID->"e2957db8-4205-46b7-a27c-6efee182839c"],
Cell[991185, 19768, 363, 10, 37, "Output",ExpressionUUID->"7006c5b9-7055-4779-a118-6925f042008f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[991585, 19783, 623, 8, 43, "WolframAlphaLong",ExpressionUUID->"d78d1031-ae1a-48d8-b820-e61126fd17b0"],
Cell[992211, 19793, 56744, 1210, 1668, "Print",ExpressionUUID->"51a8177f-4bd8-4aa9-84c7-45d4cff79252"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1048992, 21008, 82, 0, 31, "Input",ExpressionUUID->"12f2b861-a236-4907-8eff-d4a00f18a2f5"],
Cell[1049077, 21010, 25016, 527, 620, "Print",ExpressionUUID->"54cc1c7e-90c7-4ff0-9502-8a40ebeb4f8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1074130, 21542, 1093, 36, 41, "Input",ExpressionUUID->"e180017f-da38-41fa-835b-1c9a7eeea377"],
Cell[1075226, 21580, 936, 32, 54, "Output",ExpressionUUID->"a0b7a60d-015a-4c87-bd45-2bb114dd6acd"]
}, Open  ]],
Cell[1076177, 21615, 226, 4, 31, "Input",ExpressionUUID->"79a3312c-23d9-403c-9476-289bdea50104"],
Cell[1076406, 21621, 176, 3, 31, "Input",ExpressionUUID->"32796e7d-4788-4454-b3b7-fca51aace757"],
Cell[CellGroupData[{
Cell[1076607, 21628, 768, 23, 31, "Input",ExpressionUUID->"c6157c1b-138e-4918-b80c-cede6bc5c4a7"],
Cell[1077378, 21653, 1178, 39, 78, "Output",ExpressionUUID->"f831781c-328f-4f54-98ac-c8cebcb0adc1"]
}, Open  ]],
Cell[1078571, 21695, 201, 4, 31, "Input",ExpressionUUID->"e5795986-f541-46eb-aea5-768880d72b83"],
Cell[CellGroupData[{
Cell[1078797, 21703, 209, 3, 55, "Input",ExpressionUUID->"0b46137e-89f5-438e-b33a-96b47e417537"],
Cell[1079009, 21708, 149, 2, 35, "Output",ExpressionUUID->"5e131d0d-f31a-4883-9648-693b46cb63e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1079195, 21715, 148, 2, 31, "Input",ExpressionUUID->"9f7d8bcd-6109-49c8-94cc-5c3f4c15d28e"],
Cell[1079346, 21719, 148, 2, 35, "Output",ExpressionUUID->"93a94188-3999-409c-a34e-7d7260cd0e78"]
}, Open  ]],
Cell[1079509, 21724, 161, 3, 49, "Input",ExpressionUUID->"20e39aa9-a650-4aef-8af6-8a11954f5a56"],
Cell[1079673, 21729, 355, 8, 74, "Input",ExpressionUUID->"6e86b103-f040-4ffc-b5bf-45e0c19c75e3"],
Cell[CellGroupData[{
Cell[1080053, 21741, 508, 15, 49, "Input",ExpressionUUID->"e819bb40-3e2f-43d6-9c97-4a219e06dd3b"],
Cell[1080564, 21758, 602, 19, 123, "Output",ExpressionUUID->"75192313-4c4c-49c2-9fd3-896d805fb29a"]
}, Open  ]]
}
]
*)

