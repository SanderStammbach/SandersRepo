(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    637420,      12147]
NotebookOptionsPosition[    627582,      11976]
NotebookOutlinePosition[    628024,      11993]
CellTagsIndexPosition[    627981,      11990]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Integrate[E^(-a*x)*Cos[x - Pi/4], x]", "WolframAlphaLong",
 CellChangeTimes->{{3.846217996261436*^9, 3.846218034999895*^9}, {
  3.8462187777748117`*^9, 3.846218796382412*^9}, {3.846218829104364*^9, 
  3.846218829160226*^9}, {3.8462191732786093`*^9, 3.846219188126048*^9}, {
  3.84621922420363*^9, 3.846219228990456*^9}, {3.846219270469536*^9, 
  3.84621928466991*^9}, {3.846219462272142*^9, 3.846219468026578*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"0ec07151-dc7b-47bc-98cd-495f3bc76b55"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Integrate[E^(-a*x)*Cos[x - Pi/4], x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"IndefiniteIntegral__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integrals", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[x - Pi/4]/E^(a x), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox[
                    RowBox[{"cos", "(", 
                    RowBox[{"x", "-", 
                    FractionBox["\[Pi]", "4"]}], ")"}], 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"a", " ", "x"}]]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "-", "1"}], ")"}], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "+", "1"}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Take the integral:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], "\",\"", 
                    "\" \""}, "RowDefault"], "\"integrate \"", "\"by \"", 
                    "\"parts, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}]}]}], "\",\"", 
                    "\" \""}, "RowDefault"], "\"where \"", "\"\\n \"", 
                    TemplateBox[{
                    RowBox[{"f", "\[LongEqual]", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], "\",\"", 
                    "\" \"", "\" \"", "\" \"", "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "g"}], "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    RowBox[{"\[DifferentialD]", "x"}], "\",\"", "\"\\n\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "f"}], "\[LongEqual]", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\",\"", "\" \"", "\" \"", "\" \"", "\" \"", "\" \""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"g", "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], "a"]}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "a"], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    "a"]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"For \"", "\"the \"", "\"integrand \"", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], "\",\"", 
                    "\" \""}, "RowDefault"], "\"integrate \"", "\"by \"", 
                    "\"parts, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{"f", 
                    RowBox[{"\[DifferentialD]", "g"}]}]}], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"f", " ", "g"}], "-", 
                    RowBox[{"\[Integral]", 
                    RowBox[{"g", 
                    RowBox[{"\[DifferentialD]", "f"}]}]}]}]}], "\",\"", 
                    "\" \""}, "RowDefault"], "\"where \"", "\"\\n \"", 
                    TemplateBox[{
                    RowBox[{"f", "\[LongEqual]", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], "\",\"", 
                    "\" \"", "\" \"", "\" \"", "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "g"}], "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]]}], "\"\[ThinSpace]\""}, 
                    "RowDefault"], 
                    RowBox[{"\[DifferentialD]", "x"}], "\",\"", "\"\\n\"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[DifferentialD]", "f"}], "\[LongEqual]", 
                    RowBox[{"-", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}]}], 
                    "\"\[ThinSpace]\""}, "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"\[DifferentialD]", "x"}]}, "RowDefault"], 
                    "\",\"", "\" \"", "\" \"", "\" \"", "\" \"", "\" \""}, 
                    "RowDefault"], 
                    TemplateBox[{
                    RowBox[{"g", "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], "a"]}]}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    SuperscriptBox["a", "2"]]}], "-", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["a", "2"]], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    "a"]}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Add \"", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["a", "2"]], 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "\" \""}, 
                    "RowDefault"], "\"to \"", "\"both \"", "\"sides\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["a", "2"]], "+", "1"}], ")", 
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "\[LongEqual]", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    SuperscriptBox["a", "2"]]}], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], "a"]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Divide \"", "\"both \"", "\"sides \"", "\"by \"", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["a", "2"]], "+", "1"}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    RowBox[{
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], "\[LongEqual]", 
                    TagBox[
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], 
                    SuperscriptBox["a", "2"]]}], "-", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    FractionBox["\[Pi]", "4"], "-", "x"}], ")"}]}], "a"]}]}], 
                    
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["a", "2"]], "+", "1"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Which \"", "\"is \"", "\"equal \"", "\"to:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "-", "1"}], ")"}], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "+", "1"}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "IndefiniteIntegral__Hide steps"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[-(((1 + a) Cos[x] + (-1 + a) Sin[x])/(Sqrt[2] (1 + a^2) E^(a \
x))), {a, -1.99451, 2.96474}, {x, -3.26502, 1.69423}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1: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
riuoiWmo+iM0nez2689QLv+MfN3jHZI3V+S1EI8pTIvO1/77OZZAQWjR3n6V
fz2PgTzhw+r29g3JXD/BeeuoB1dLboRy/4vx3PTbldvBilw7PXR2DVlnyr2n
z+/nZW/l9Xv3aPsrL3q57+HuJ75ycVw7zO7ci4VdNRYEHr/g/oLz/1YwOUZt
oITGy9ETFl3R4zj2EZ55l3N3mnLX1TTdaq6uS9lfebAZg3ulvpL4J44H5wT8
WcXZf4wYnzX9ffVf67G6Pncn39wloSG/OHlyTX/uf00HujZvd/slWKxaHbnO
qIM41sMFqzXvh4tzvMVmutuyb100jNr2rj44g+ufURvXbE1VbxQoZV4+sGai
6F/rus1lJ0WMJbhxb+8v17XBvf9e7x1edvqFbmS9IFf1dMjZGI5XGykqvG9r
EMT+7Dg/sT/HKyLLt6XMaRFEfzwRlpXB3e+djSed3Red6dxZXDrTv7P+2dl9
11m8OrsfO+vnnY2T/6uencWlszh2FvfOxufO4tXZuP2/9s/OxtvOxv/Oxrf/
dRzobNzu7H7pbN7pbFztbPzvbPzpbH7pbHz+X8erzsbPzsaZ/3U+7Wxe62ye
7Wyc//9r3jEJHbhg5rA2et9nQOme9D0XNwhL/vzoUbOxlasztiimsLxxlHAT
r86Yk/q/dcZgDz8NHz2uKnsZkz24HKuXlWjx2G1DXB358Usufpo0+KAAHPab
DNvPLl5jLXTa1jVkqFQF2Qc5Dxq3KP6iABz2kzOjpqz6bSa04tXdSmB1t77d
ynpbmZ5CfJnG7c2jE98IJHh1tx6wulv+bmWNjidTabx97qu/MWOzlAY47IUW
Orffv++iUZEirDJYVkj2Tw8dfS6iMVijfct/63RNZ3W6JC38jDWn1f81noPz
x9vrMxPuX2pr/MteoZP6aQqd1Pt6FDKkj/LFtr/swfn2A7Xue08bLfLXcyZb
OqnDtqWTumEPukXlnq4T+8senG9fVr6hbURy17/swfn26M+YLz5UGvqI+plR
fwY/0sWvw0nGhvonuDSrM4Z+CH5pie/OPZNvUz8E/7261cYv0pv6G7g8qz+G
/ga+b1eT/AQtb6EEr/6YCqs/hn4F7pS5LzkuulGA/gP+itUfQz/hz48KndQf
Q3z5HPHl8y2d1CVDvPgcceFzxIXqhlnNzytcYU9xAbfQm6Un8vA6xQV8BatL
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
5hHwNZGbve9oFtA+Czz5laf9/p2NND5jfdtlY+uZUy4R5B/8iLz9bdc/8dRP
6D2+u38cX7dx60bwQv/1pu6ruHkZ68Ph7HtA8IP3wn7W6BtfTG4gP+DqW4yy
Go/X0boR/KDFFdFJ0dw6EFx2y6eMs6p1tL6i7+/s2yV+xvs5XRd9ZydA2syr
ldt/gTcH+zycP76S2gkuIzynnGXErZ/Btz27MXhQdhX9L94Dej5pq7ZQ8xmN
D+DW6ZrjXMS59STeQzluvse8LjSN5jV8x0SBfe8G9x14rHLv3x4hZdRO+q5N
pYjy9sllpA+9N5Ql9c9AHE5xwfdQpNh3bdAf8F0byeL8IH+5H9R+8PDMDy1e
UlweBs9vtymWmuQH2VD70Z83se/UYPxBv7rIvlMDjn7ymH2nBv0ZPNKpu2iB
B9ffwHe4B/+OXMPtN8E72Pdr4AfruthDMSajQzk/4L6vTJPnRHJ+wMXYd22w
jgIfKHJZe/Qhbl8D3ijzdMqwHO55Hv73buj5QMZPLBy2PexzFcUL3OpsW9HQ
aVx+GPF9bXbsedOgWFpvgPsbTzVL3vOZ1ifgN9n3cRBf8Hlvt5+tCwmk+IKv
v2H+YU+OOf0v+snyRR7PemiU0v+Cv9RX/rLBvJjmO3xPJ2WWk+GIUhfqJ+C3
djn2n/j1OcX9E76nwOsPWSyOPrz+gOfQVlQW9HD+wT1/pS+banKva6VQcsvr
+8r/7BcQxwzmR1zn3/6A+z1vp63ZpyrxYL/l7SFrSj9Sv13Kxufe7HlpcA+W
99vDy/sd6/UoSqe/aHB9dkZxeT33PHAhyweGs3oI4FPZfbGC3Rfoh1N1r5oO
WlIvVD+gnz7y6f9Zz7PrGmP49csGAy4fkrXkxYy180qFrpJH16wL4fbjkmw8
1GbP0dF7GaxfneH1wxzm5+fbPbr+pTV0znjZvWFWppdk8LFxdif6bA2n673A
+J79N1YfM8zl3o9g86y7qVFQN6s8mk9VFva7siNeItiixCm3/fJTsh/G+Gk7
M7EDJxPJ/uOPWUWVv8SCG0/7Tl+0+xXFK4jx7n6DJeLy73PrGTbvJLDnMOm9
XRZ3b17/ecDyZser955f2F5C3HLCCEfh+B9CERPRfKvkcuKzWVw0tkm2KFhx
7/l+ZP1WadO/eS3wNaw9R9jzn+A1rD1NbFxCHL1Ye3ZK9QgqV4gkfpS1Z1/B
imnmz9OIz2XtubRkmdmuLK79aSyOaiuanxwex/X/HrznLem5fXyPlTe++bL7
a/yMncafC7h26rF+2NXMPE/jKWeP+VdQVqO6tBf3PGcavv/O8kLob/7M/yDn
Wd67pnPnaLrM/9iUG3fnv6shDv919rJB9gdqubwBy1fPmW0xdXNYNo2f/DoS
uO+w/hnOvjsDP1SfwX6JmKs2N8/CfmLDiDOyGfncuhrrroBN3eTCkul/4We9
Z+LMPReH0DoZ890PVzvZksAa8gO+zz3moH9IFd13mDc/XJT6I3+Q208Ns7ox
645t+1/n72hP87jputbduPN08HORp4/UfCugeYqvDzjab1QhfXi6GJfn1E/J
KnyaxtXvQvthb+c3/46caDFdl/iPxVGSTc3Cl03hCpeSSum6UNc9sdf5U3Ne
htH9jvdx1J8FFzct+Eh8wdutCtNDuwUnTKk2i/B8R+PGIsabFm/LV0ri3ovE
+Z07ez8IXIydN61h502IC86hVr98ZH55WBvNU+BRjfPyDrRI0/VivrDrP/vB
2cRudG7IrxOI+5Ffxw/jOZ/DHuMkOPzDXpp9hwX2/P+F/844dOOfP/LbA/6S
t38BF+/Env+/iCPeG+oZUirb/NmE+kM203O/e5Ou1wJXmh87Uv71v5B3Pojv
sAzttvOg01RuX4Y6un1GVf103GpD8cU53b7Sq9X16yspvuAZPSTXr3PoIHvM
O11frxZ5FFZP8wvsJdn3WcCxTvBn70mBY53Qh9njeum9nuJgye1PuHpKh9n6
wURDQhj7LJJ0uMn8TGLrDXB8n6Ur+24LdADX1LjW4HQlmMYB/XubZ1modAnW
ifr1zb7bN+KoV6yy+sWIyEkJtN7Afb1z/E2pLYrxpA/mQfW5sbIPo7k6IV5s
PJe6MaSk+Q6XL13FxnM1v70fxr/n8qvbGJ8s/XnfuDCOqzH/1xc+3zr4bD3N
L/Qd9sNmR3MuVdE4tpP5afz9YYzq2hriU5ifFxIOE55KF9F8tJrNy23s/Qvw
OubflzdPzWN+xPcMVzY/yZ0ToT05y9I2TXpYQeMz2jNoWsUQ/5O1xNGeB9fX
KygkJdP1WrP5PXSNoMNGi9uPnGH8h/H7jTt+FpOeqWx+31g0Mi/r/+gZw3iX
rF+ey8O5ffRnxkscNdfHbOX20ZGMX0lc7DnvILePBg99+7Hwy5ta+t9u7D2F
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
+0ljDe9Goc8chz2gKb+F75/oJ7dn/h9FnNoi
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1:eJwtnAn8DdUbxu+dO3dm7p3bKiKlzdKijVRCWpBKmyVpoUiopEQlypKSSEUS
SqgkRAuVqKR9ISUtikqSkkr7v4X/8/XM52Oc575z5syZmXPe877P+57fvl37
tL0yyOVye0W5XEHlbnEut4vKOmEu93g5lxtQzOWqprncIuFxwlWEFwrfIbyL
8DLhN4XnC1+nhv7I53ITdTypxm5WO1N1bn+1fZ9kzVU+IfkwyadIPkvXXqty
N137j8p3JH9H5T6qd6/qN1E5T/WHSn6/5HOFhwhPEn5ceLDwvcKzhW8UvlP4
UvXhf7p2vo5FwqcFvvetkfu1SXXe0n0X0y/dd4vKkbr2NpV9dH6ejgf0e4He
w2P0R3V3KuVyzwnXTnK5T3Svh4WfV/0tqrtKxwQdFdV5RPJ9VWexrnlI569S
+7NUf5Dkt+v3TOEbhIcJPyY8UHiE8DOqf4vKnVX/KcmHSz5dv69Qu3Pzbref
nuN14WuED9C93hCup3KQvlNfyR7Rdanwu8LLdG0r9f9I4UbqTzfVe0b1L5bs
fZXP6uimczVK/hZVVWeq8POSD1Kdujyv8O4qp+lYJHyj5HfouF3156v+dMkX
S36TZDVL7nM1yR8SfkHywZI/LPyi8BDhWsL3qc4eqjMq9jt/Qc/9rs4v1NFd
vz/I+76XCO+j+pNU1lT9y/Tt3pR8i57vQMlrS369yhv1u5/wDD37VaGfaYJw
HZ17TfVrq7xb174lXEPlqWrrb9XZrPIQnasj3C3x/ekH58aob6NULlHfjtS5
b4WHqu49kt8p/BpjVm29rfq/6Z6HB27/G507PnA7PMtRges0FC7r+inMMbU3
Tu2M4dmFX1Jbj+pbXa3vfpHqFHTNRTp/hnAv1dlZdYqSRYxp/T6zZIx8iHAs
3FL1b1B/QuF79exnSX6i6uZUZ5hkpcC/yypTHScJt1GdriorqnM77ek4l2tU
7qqjreAvKjup/Fbl/epnVfXzIua47tFC8m169jvVzs96xmNVfqjyJx39c563
zN9jVfbQ9auF9S/3pNq5Se1cqXZ6qmyIUHU6Bf72fHfGJmP0CB11da6oso7K
y1TnS+GqqjNO7fyk+x+vdmqrnYLkq1W2Vb3PhfcTHqzyM+6rY3TBz1dF8p6B
5YK5XoHr67LcWpVrMrwt5z5v5Zvp2W5VubveVUH3/YZ3pPJWlRUd5+Ssa9A5
A3VcW/A7/i/0+/4v79/36/pTGDMqT9JNzpZsq+pcn+mrr/T7Kd1rm/DJKrur
3u7CV6h8o+C5MxddUfAcfET4l6LH6l0qn5N8tPBjwm8KTxR+QvhF9XWGyup6
V8foXivy1gu3Fvydu+jc8brf+ehnlX/mrcOv17lj6a+O/4SvDYwZl/eqzZKu
u1BtztSz7KhzZ6icJPkukneRfJza+l31m6n8SOWvOq7LeY34PWu/ebYuHKey
Y+Dvzhym7i9Zfd4f7/EH4UfV52vRsap/U2iMrJl+/yt8S+TxuCXTyXvr90r6
TF9LHtvH8x107dF8f137bcnPy7Mnqn9y3mN0v8h6LFY5W7/b573WnKTrd1L5
iZ5xjspz8l6PTpA8VVmzIr0o/LTw7sJFXX+S6tyg32XhC/JeG34Sflz9+Ujl
j+gTnlHleyqX65in4+nE37mW2tlB57rkrS+OiayTQ5VNVSeQ7EDVOUHPtQ96
Qs91ss79kvN3mh15jtSh3wx84X1UHhB6zW+k/+qG26d/7gjhJjq3Luc51kLH
fsJtmUNqJ9G1B6GzhBvqgj58O/XhUMmOUh9OUv19Vf9s5oFk69ElknVUvaqM
B8n2EN5TuCVrXORx3lw4ED6e7y58r/DVav8elZt03C35t5JfL3ys5Nep7Bp6
Ht1S8BgpZ+Okpb7lJsa/yv7qW3vh9tKTc/X7b7VzAuumjj2Ee+p8bx0bs7US
xYB+u15trtR4vlN11kveVfV/k/xE4f2Fx0j+tfBw3fNHyU/WcUnoe92ma1uX
3Jc1aqNtNnda6zhD+HQdrYRv1jO0QG/oni0T66fVGleXqfwj57lUP7JO3Mqz
q/3Oko9V+zPQ6zqa6dyVOvdXzjq6v+pcgC2kOpcU3ecdVG4rWqdeiq2mPl0u
eW+9k2eFewtfI/xp0foS/dkg8rqYV/mo+jZWsk3qWyvdc5PkJ+q4T7LjVPZD
v+j63dXOdyp/1LN/qesu1nj4nTVIddapvFTtnKC6jSWPdd//JNtFZRNdc5iu
3U/4JOEGwg2oK3yEcDs9Uw/9Pkp4oNpeoTauydvufEltvBh4LZyuew5WOVXl
EYnX5zq61zXCZ6ruDsJNEuu9Fmrn2MQ6uL7kjYXPws7iPol19m6qM1d9mE/f
JJuvutOFP9K7fVJ4qvBK4ffU79dYM7Cdde++6tsbut/7qvO85L+pzvLQNuQW
4XeEnxH+Ufhz4aWsvSo/1bEEnSf5R8IvCv8t/FhoW+ht4f9hV6r9V7CHQ9sV
KyTvq/6dwbtSH/5ijVWdJSpfkfxeyadJvpP61i3vdeQN9Xm85A9Kfrne2dd5
z4cL1ebpkg8ueL1rzXqo9/CWrp2qem8yZiOPbWyAEyPPNda704S/F/5H+BS1
21L4XOGbEq8zH2n8TIs81/6S/GvJDtY9z1P5n+QHCnfELgjtgzQs+NszBroJ
dyh6rhVUvq769VS/vfBXOuoIn63yFMk3qM7voX2aBZL/W/Qz8Cwh3xnbn7mo
8mz9rqvySI2B94Q/wObBBhPemTkVW6fRh67qw+GJx2cjyTup/bLaOYw1NPQY
7sK3zlvXoSvbqX41yV/U/b9gXZGsjcrOqn+c5FepflS2/tjKmqlzPVRngco9
M1+M99FUv7/O2QY+BB2Eflb9CcItVf9nlXPLXmd6p/6m6/K2lYfqXGf9flD1
z9NzjlcbZ6nuBcL3okOFN5W9HmzUPTcLNxD+Ufgi1flCz7lZ1/4keSPJf4q9
hrOW41Nh27CGfpvZLdgYh5VsY/MuDlVZT+1czbpbth2+TPL6ku9bse1+lOT3
x55fe+t8m8S+21psVdUZyVqkOp/q98PYVSqbJbbDnhe+N7EuvQs/I7F+HYvd
LTyA96y21+m9DOG98771e4iufVZ1zlX7fSRvJHlH4c56hzOE2wsv1bOvUJ2T
hc9RnbqSP8Jz6toZKk+S/HrVnyN5C+FBwvOEWwoPFn5KeJXqdVEfLtQ9bxU+
TteOUHmbjubCt6scrX6eJzwZP0z4NuxllYt0z4WsoRonc4TnCH9V8DzujZ2j
368m9hXRUTPzPof8haJ91T9VjtO1Y4Vf1rX3CI8TXio8uWif+ieVd4X2cRZL
Pk1tnJu37z1W8rtVviT5g0X7jD+rfIi5m7ef/5J+369ymerMK9pe/VXl4/AI
wuskb6h30k7v8xI941nqa03WBHwrHe2Fx/MddZyDz65yIt9GeJLKBrq2rPYm
6H2eKNwfH1r4Kvw41bma7x5bJ9dS2zvo9+V5++PPqA9PS75JffhSY+B2/W6p
a+fo/GXYY9iRks1U+ZnqTBF+UPh94ftD8wHLhcclXvfGMJfVzgidO0ntfC48
ULiZ8B/Ck4TbCf8lPEP4QuG/U7fVQfh/qe/XWfgrtTlaba5Um/+mvvc5kod6
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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtnHncVdMXxs8dzr3nnPc1RQmF0mDMlLGQBrMolZlGyRQZU5okUlRIoSIV
qZRMKUKhqCQVGQpJhaTI9DP+nm/P/mN/7l5n7b3PtM8anrXWrdWxe+vr8lEU
NYujqKjfbeUoqq/f8wtRVFEZRY10fNdcFB2sQV1LUXSr2vHqH6kxp4j3cxJF
o8XfT8evqxCt+fXEa6f5meZ/KPo90cu0+ETxl4teJHq56EmiK9V20zq/69jd
WutmrXOs1m/I+hqzTOPfVf8D9Sdo7KMa207ne1xtus6xPI2iMRp/kfhtdb67
RZ8o+mfNOVv9UWrtRP8i+hut31nzD9PcDWqH6Fx3iz5b/cfUntF6g3S++zT2
fq3XXee7RfQdogeI3ii6Sab7FD1eY68Sfa/mn6O5Y9Sm6NgtWvM4na+m6L3U
HyD+meo/qjZZ/Lt17Fzxr9Qa14vXS2u8peNvq/VW/1TxC+L3URuj/g46trvG
/U/j79X1f6Lr+VD9z3U9U8RbKHqe6IWix4reKrqO6DZab7Ho70TvLvoE0WU9
n2Faq5WuZazaVB2bpjF5zS2oPav+5xr/kcZ/GeiPRX8g+hPRk7lf0Q+Kfkj0
NtEP6vm21rWepvVOVH+V+MvE/0z8Z8QfqWNtxe/IHPU/En+p+qvEf1r8laLf
F/2R6KdEP6zra6O1xqk9q+tLxP9P80eqzdbzqK4xT2nMZeInWq+x3sflrK2x
XcQ7XvSlokeI7iT6Rs05KuzXLjp2rPgX837V7yD+IaI3i85pzXmiDxO9hf0v
er7ox3iGGvu92hj1K9Tai3eIzv+Jzl9F9LSC9wh7ZYPaV+r/qPt5VbxuOn8D
nX8d70DzZuvYzuLtojZH/Z80vq54bbXG+6J35ZlqXGut/z+97wPUL6uvYVFj
jflAx3qJXqHjr2nsB2IsFO99rfcka6vdJd5ZGvObxj6va+yt8z+q63hTvIka
/4zGT9b4fqIj8Sdq7Eta+3rRU8WfqcMviD+I9695z2r+dLWf1B+sY59p7Odq
9/Lt6hz9In+Lu2h/FXXu00Rv0fidtNYb4l+p9V/W8Zs5n+im+rlZ4yPRkzVm
urozdL47RU8R/Zzo50XfJTrR+PNFD9H4Blq/vvjVRa9jfb2rJ7XuRVp/gtrz
GvOIjrUVv6eutZHGT9L4KaKnaL3+Wu85je/Ct672rsa/pvWvYK6O38je0vip
Gj9V4weILia+n94ae4bWGyf+BNETxb8jfB9viv5U9PF8yxp/tdZ7Vev1FV1F
/G261rzaKbqmop73U+LP0no3iD9H464SPY39pGMF0Xdp7P6i26o/TfOf1/ov
af27Nf4JHbtQvCfVZmr8dNGdkC1qC0WPE32B+uPVnhPdVe0oze+vNSfo/Ffo
/HupvxsyWdd6ueht6mead0Sl75P75Rqe4tsRf63W2qrzz9X5X019be2Qaxo/
R3R90T+yv7XeRM35U/Qm0X9rzpXi19Ra7XR8iea3LPl93qNjk9V/VPwL1e+s
Y4+ovyzI87fEa6P1l+r+F4i3RGuN1/yzdDwVf0De6x+kcy4Xf1f1G/G9av5F
4l2vYxvE66H5vdTvJ/7X4u+idp+u/Vxd4x/iLxH/HfEXif+EeM3F21O8dWrb
dOwvte/FPzns2Z+CvjtT5ziLvs53vvqdxH9Y/XpB3h6idRZqvRdFzxI9W+sM
EV1Xv4dpnZ11rKXm76Fj77Fvecein9H4Geo/p3EDxdusYw/rfO+rnaF+B52j
qs7XhusRnVNrrv6tWuMQPa82ej57il9Vx47Xsdai92D/aX4d9cfous5X/wm1
GeIfnPn+zhTvDWSd1ntIvMs0p7/6T+l8XdSfq/an6P66vsHoIl3fVxo/XPRj
oh8V/ZvoBzLL/ypB/l0geoToN3WuW0Wfp/EtRV+Ovq7w/hnE/uAetH718nYR
ER2k61zA+pn1xU4a/4roGrrOxTnr1yu05hrxfxC/eZBvh2v+vrwvjf9DvGGZ
9csOol8Wf0RmfYYMRhbvXrbds4/O947ovfT7t+jjtP5ArdlQzHN1nnPUfkRX
qLVUfx/mlP099dXYnNq5uvD7xV8iXqXmvaT1Nok+WuOr6Fi1st8J7+Yrja+v
9beK31rHauvY+sw2FbpqUbAfamvOruhj9dvr/R6g870rXnXRdUQfmHq/sm/r
it5fa5yg8d21Zhudfw+Ne0/8ajnrmPpcj/jd1G+F/il6PWy8xthzfCc5r4lN
2EJtfeQ19tRas3W+gXpfp+pYKbM84Fvmm76NvarrfVz9cVrnb63/Y3gfPDOe
3X9Fv68s7z27pex7b0Vf/H+Klh3IkFt07Ggde5vr07lr6f5aafzZ4l9a9P2d
L/5w0W9ge4k+veh74x676nqm6Pq661zDtcbR6n8bnifvhHezm2js33p851yf
6Caie4j/r+iTkIsacLjaNbqG21P3r8XO4/mX/GwP07Gr1f9X808Mz/9vzV8r
+nPRG7V+SeMP1fwaGr+7WpfEdjL2Mue4TvNHq/VUfyPyU+e+OrE9jF18fKV1
JnIIeXSkeFfpHE+hf3TsHvGe1fleEP2yzvdPhe11vpVGWuM2bMsKy1ZkLLZz
XvTtmttCc07H9s1sryea/7x4ObXbCpYxX4rXVW089lrB9sH1JfsLR2q9G9Tv
jo2m8zUM9Ai1a/K+Z/ZPbd3TavX7qX0a+33yvC7T+WKuX9fUA3tPY0/R/abI
FJ3rMo2ZlNmuxb5ljx7AnlD7SP2f1J4Oe4i9VEtjamnthmF/Ndf6/xPvDNHH
iJ4f9MthOt8rOTaz3oPoaaL7o/80/gvsjwrbktiUvfW882qnRH5m+XD/3Os9
OftMvHPePd/giTpXqcK2JjbnBaLbaP3KvGUe+jKv8V9hW+HDiDdZ7Vr178en
Ur+22lvqV9F59kW+a/xQ9InW7IG/IP5/4rcQ/4BK71n27kka00Tn2yuzrOL7
a6HxX+jYJ9hPur+Z6EPNn6n5megXRX8t/mrxvw3ya43oVTxv0c+J/lL0p8gq
0S9ga5Z9PfeJ/lb0OtFrRH8vehbfo9bnA7ubZ4i9iE+l936SzvmX7v+isp/t
1Rp/YfDvsCc7YhOpf4fGHKz+xepfLH41tTuQSzr2ldaupftrgD7Bbqmw/YFt
gI3ZpOQ9zF5Ow/X20twzxD9d7U5sER3rp7n91S5Qv7r4m7T2KeL3Fb+qjvXU
sZN17B9dy+mZbX1sfvzDGmrv4xvo2Fvi7Sl6kehHRc8TvVr39zHyXuefzvlT
y6bTRC8VfXfZ8muE6C2iZ6jFyIrwvAeL/4D4D4r+SfQ9ZevTB0RvFT0rtW2H
jXdq2TIIWYTMxn75Rse+UH9T0J9tw/7Dnr5c9HrxvxR/c/BHOgb7YjDfHPpQ
bUnBOh5dP1BtiPpDNX59hXUqunXH8L6Ri8hHZFoTPbc7Nf5e9YeIvw79LP53
Ocvk0Vo3J/rInI8dof4xembfIk+RK+xnrXGo6PVgECXrh2Za7x/RTUvWJ8gm
vgFsgGv1jvbO2dY9V+ebm1o3n8d5tN5rou/VuS/QnJ6J7W1s14HB3m2m9Trq
ug5Dpunaswr7lviYH2nuEZn1D3uGvXOS5mzT+h8HDOSacP5lQb63KdtW61y0
f3lp2WtdK/oj5J3m3K9zl9DPJcswZNlWtT4ac5XW2Ctn3/Uc7Ccd66R+Z7Wz
sVfL1gVtdLyl6MrEvvbD4h+o+z1c13uW6L6i24k/CL2m9Xphs2rOFbr/jTnL
wP9i7/8/Nf4o0UeVzD9c/WFqh4q+UXRj9Yuafzv3q/N3Rx4W7X8/VrK/eV7k
b74re1L9m4r2tw8q+V0i40aJf3XZeEpP8TuLf4z4m8W/mfcBxiL+tdiGRfvz
1TPbztjQJ4iuLfpQ0e1Fny66TuZ3xzs8S/TremfVRB+o+WfpeVwsemetfZ/4
7bGPMttm2AMniW6k82/R+Veq7at+N53/GvFvYV9gLyIv9AxOZ09qrb1FL8Pv
0pgFWmsifp36l+gc92p+R72P3dgbOnZI4j3F9TXVeqcEe5Xrb1K0fC4ktq16
FYxnfaZzdMCeEP8C0etS++J3YXNjn+MDi16MLBN/ZWx8oLfaR+ofpfWP0NgW
mn+q1m+g9pvWflXHXi1bR6ArWol/pnhH6vdI8RuqnVhhjAVfeVts7GU/tddi
+7g7iLdC7fG8fe61ie3HbyLfM/r5KHx+HZuPDalzNdXcPcQbnDOeg32FLXR3
zvbP52ovar0Hcn5+h2n+/3Qtc7HxNH+jzvd83s9/jM5XV/ML6sfY0+rvqxbx
7aitiu3Tbdb8lyP7epyTc3+UN7a0t8b8K94dfMOxbXSgif2Ltg+fCud/PTJW
BZ/9Ul/8xuKt1PWci72gMZdUGIPZqv4rkbEZMM9toudExkKPEP236DfQF9gn
ov8rBAwPWc3zztsHwb/sFOwP7B++hZqiPxA9VvTr4n8OnoAtoesfkvobRF61
j/xtnqt7mCL+D7rvi7Q/vkv9fHnOl4muVWFbDpvuUbA4HZ+YN77VAZ8is8xB
1iBfkEG/it4QWTYt0fgJGt9I42+IrVN20e9vkXXNVvx+7B3Rq9T/XcdGIp+0
xiWV1jE7xMZn0T176fie7KGibYzVJfueJyKDSv5G+Vax4fGN+Mb51g8XfXLZ
+vjF2JhOW117E9Fb8GnEb63r3Uf08oJ9FHyVH3TON7R+Wa1fahsljY0fY7sg
Y5A1u4iuAfaqa5gM3qm2R2wd8we2T2Tdg0ypquN/RJY1HYL9d0lkWbh/2I8v
iX5e9Ap86pzx2ZPFOzjsl9nizyr7movBV+Re+M753luJ36xkzAPsA0wYbPjA
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
sfE4bHNyIMiFeBkdLXp+aluOHKtDE8cT+0f2uZ5NbGNja+MjjSeWWukcqk0a
czz5KomxVXyMMaljyMSSyYlsLF5DYhABY28lenjivcse/h58VGNPLHm/kRu1
d6V9A3yEFxLrAHQBPt900SelxqJ+V2uifqzxi2LbxCvKzpF4P3YODbkT+DwP
xM7nwhfaX/zGJdtzyG/ii+R34UNMTOxT4VvhQzwjenLieyOHaVLqeOqdkX3O
GXx/Wu+r2DbEjaK3pMG/iByvIYY2tuRvjm9vZ7VukW3ac1LHKIlVYiMNSBxv
wlYnZ/O8xDEn9BL66U2w5tR9Yn7z1D+90rgL+MtLosdprSfV+oX9QQwIvwsb
HqykNjKrZB2D/YmNha3FN8O3Q7wT34EcP/KRyNGLY+fokKuzj+idS86BfDW8
r0mxY7T3la0jbwg6eUhimxjbmHwofEViqPglnGNukFdgna/mLC/IIcQG2zXv
3MJ9sHdzxr/AnpFPYJNzc5ZH+IT4hvi8TyX26b4qWUYgKw4X/88Qf5kn+kTx
94xt76zR/ONT+y7E9IexHysdt8enxrdujLyO7fOvTu3z4ztg4xEvwZ5pLbqK
6EtT+x/EPvH58f3ROd8F/ApdxH7fbkflbbs3STyXHAfiBYeicwu2UeaW/bxn
xtZJtYL8XSx6ceTcDnR0PuBx6G58xu2+Y+RcL+TpL0Xng5HrhbztFhtfI3dl
vc7/a+SYOflN6BNy2/H/+iXWfzVj25P4Jo/pWCv1f805X/uE1LqRHG5yufne
62l8DdFdkXW6vl9C/Gq2rq+bju0t3j5qV6nfVOtVyztngPhN+7L1ITZ4e2Rf
2fls1AwQXzlK66+JnR/A/A5lx8dZo5Po/qlzlcjxa5g4f5/YMzmW5Frik66P
nVOOr4pMQDZcnLf8Qp7RJ8ZFrKtesLfAK7Ft1iXOdyWnjPwafPoNsXNQ8fXr
Bv8ffBBfixxiYiInYD8jH8EkQjzxOeJByJe8cy67hO8T3Aj8qK7oOqn7YO4b
NbZ+auyKGMIm0dWR2ZExxg0BX0K3vhzk65E63z8h3vFO2Xgksc+ZYTzy9OKc
Y6LERn8r2s7D3iO2hbxmLTApsKlvU2Or5Mhiz2LDkifTNLJty/WwNms+p/51
mfOnwbzvD/gTWNXk8P3hg+CLEJPekNnGXx58wi9TYyx8b/jI41LHs/F9qNEY
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
yOPRRcfa/w8YHehR
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwl0MsqhVEYxvHXaWPPHC7AHsoNMHADEnIByp7bCkUZSBhIEpKRnJLUTpHz
Ro5hRsqAAS6AsaHf1x7861n/91nrW+vLZPu7c6URUYcU1iojVvGYjihURJzj
SX6ujrhR+MObDSVlES9cTrcPhzoTulM4kruwVB5xp3eLV/s+9dv5ef6Su8CK
fr4qogFb/Kn1Q7p4h+QubfIcX9A9w7L5jm4Pv81/cO/Y4wt8Pd/It3DNyPCd
fBPfy09yE+jkB/kR3xjGWXIvbjE5R64xG9Mftz5IF9+YvHUB87jh9pMZbuUh
bhAn8gw3i1O51jnjzpm2Pk4XO0k3K+f5b3f5wrX5vW4rP8pvchsY4Gf4H//u
M1V8U/K2L/mX69Bf1L/mrrCuv6v/D6X3RjM=
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1718542#1"]& ]]}, {}, {
                  EdgeForm[], 
                  Opacity[0.25], 
                  GraphicsGroup3DBox[{
                    Polygon3DBox[CompressedData["
1:eJwtlllsVlUQx+/X+333fsulpSZC2KTVqKVldWspKLIo0lLWFwoFWQQVobiT
kOCDuESeRIlxeXBJjPEJFVTighpFAZe6JIBiRJ+0ionsS2v098//PJzM3Dlz
ZubMmfnPrV+5YUF3VRRFR1kxa00SRQNyUXR1IYoaECxG1gg9Du1H3g5dX2IP
eiqNogqyOgwgihYV/X0Q+jp2apA/xNm58LXwRWxu5nsWuq8hu59Do+BPY2cU
ayj8Ms6+WI6iCehOq0TRfHTakN+DfG4Gn4+ikezvQp7DZhu0i71q/P4IrYE2
Iudo1FlyDFugS8PeT9Cj0B5WTWR6OPD7OXQtfpegsw9+LL4G4evhkmM+inxa
yTlIiz4rWxexHgs2axUH6xBrJ2su96rXHue+Yj1HPF9D+5Btgu/F1o6Sednc
g9/z+G2Gvxf5EPb/xEaZvGWcqUBXkrsr0b+GWD+Bfx5+PfJ96H/A9wLytB/+
GeR1xN+Rt9+P2duA3Wfhv2T/FfZeqHJsB1gjsd9dtHwWthcSSyOyJ6r8BufR
OYWNNZlzoZwUoLuQPYrezbFz2RPyMYe4W9G5O9SD7CQF50Y5+oG9vdhshJ5B
9w90vlBOoC8TQwu60yt+8xZ01mK/hrUdnYGxa2Az/M6SbZ5jbWTtq7KOarSP
vSfhP4W+l9jXEs5+CD8xcr762duGTiMx1LH3D/J66NuJbfWGvCk/ytO62Pfa
g3x23rxk58K7615l4i8i6+TcMdUzesew/w3n63LOiWpaeU2gD5Zctxuhn7He
wHZH5jw8hfxzZDMLjlmx/1b2XfaG2m4KZxXz0/C7lUu+34XOw84sYhke2e5p
1rDIb9kZuwffgX8Jm9fh43io+cmhd2anzv/ukmvyCuT3ldzv9fDrQg+Ogn+g
ZDsNASfUy5ch74afnzlfqknlelu411X4RBRNI5Zfy75jR+peVP3/XHAvCh9m
oNPA3qXB5hH8DswZNyaiV43ObHSWF92Lf6O7Av6SyPz4vPOgfChnqtuhoQeF
b9Ohi4vGwMPQvHAJ3Q7yc4HY2jnfh+x27lKG/l52XSo//6FzNjEW9kMvRr4F
H4OgqzP7Hox+X+IaW0S8dyKvxU4v8k1F91sXBtYiH6CeQH6o6N5XLZ3m+wbs
nGPvFPz18GfhT8BPzruPhB+TsN+N3z7kc/j+NzU+CBP2B1xUDOrhu0rGcL3j
hcQxvwodzvnH4UfE7v1v4S9AC2XPA/WdsP1y9hPspwXX81RkMyqOcyi6MXtN
soG8KXX+JVcNv4nsZNl5V/4Plo3jwnPhcAfnRqDfWvDb661u40wbq6h48DEu
dt/38n1j7Foaj/6YvOfRcnRb885hF/zOxJgg38rNaM0dzk0pekZNyKwnfc2h
cXwvyRvrVsFPyntmtReM34qhmNmfsPomYTXyZvZvgR8Af1J4k/pd+lO/u+og
p7vHnleaucNS31dY0cqaHPntNDuEMy2qYcWXN26MTR2/6kH9ujVnfFG8wqtf
sNmC/urEvdmlukf/fd0P+UeJZ0Fz6r5Tbcu2bLRxthTmjubPHZnzqLnfUnRs
81LPYdVDe6hp1ZVwXn2kGdXMuZ6K8UvzZUred9Tbjgx4K9xVjA3YWgUdnTpO
1bbwQf24AvmtReOV/h3OlG3rPDpz8LEjMc4vjZ0TzbumzLWiujqR+F1mxu5t
2dR8bwz/OUeqjNN6r7YwZx/JGX9UQ6ol1ZX8fI/umYCl3wVe/Scsegt+XN7/
G6qB8cQ3RnWSun/UR8KBjO/a2Bi9TH2H/tRQh8qn+mxIaqz+KzWeC9v1/1Md
5qDmoTBJOVkccE+9cqDiOBSP5ujCzP8Bqr2liftLWK9aFq+c94R/GeGm6mJr
qB9hsvBgQcWzSb2juVrBVobPRbHrQb2g/xZhyGBk1alrSLWk/wnhg+7VqbrK
nCPd63+dyjIM
                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1:eJw1lllsllUQhk/7/f//LW3ZNBgKyGakFArFBcpiEEGFlrImBGhBQEAFLO4k
JHghotErt7hx4ZIY4xUmuBA1qHGrKGK8wLgk6pWomMhSsKVG34f3eHHynflm
5pyZOTPvzJiNO5Z3VYcQPtEqad1cG8LqJITP9LMnD+FsJYRvtB8uXo/2i9MQ
Hq0K4X3tayVbqglhQTmEUfq3UvLL9e898WZIfrpkP9K/x6R/AF3x+nRJJnqM
5NukV1WEMFb3DZbsbeLflIUwSLzZkjsl3uc6f610x0qnQTIztCbp7MXinxd/
We7zWiUzUfrDdVad6Ie1RmifSWZYYhuxtUn6I6U/R/pnC9uM7R2ip0j/LZ3z
ZLX9Jw6TtA6I/61Wk/ZbJHOm4ngM01mNqffEqF9nbRb/tPh1+lefWv6U6K/F
7xX/OtmwTvQ40S8UjlGjZN+pOHbd4m/RvlH8+4in6FdE7xF9UPQyybyLr9Jp
ke4K8T8UvU/8l3XeLsVvXOKYEttF+j4k2wdrzVAM5kn+Dck/IfmXxG+vOF7E
raTzvpf+QMlOUTxy3TVN/yborjbRfZJfrTMaxW/Vv1T7funLrDBaZ3Ro35mb
j9xU6VekfxnvK/4S8Zv1v6bKOtfq//nUubIt8fk98T5iTy7eIXtmin5e+l9J
aXrZ9smNcL1kbkgcf/zBr9+lP0z0XN5e+hNEN4i3WbwW0WdjvNckzq8/4vtx
Dv7+K7mLtB+itVXrDPrir9L+1lrbgC3EnNiT0+T24/H9eRPe5jnRX8Z64G2f
Ft0teqnot0UPJk8L58gIyTeXnDvbc8eSGK2S73eLvlz0BulMF79d65qSa+pj
8VaIvj2xTUdE/1i2/+NFb6z4TUriJ4nfivjr2gtnrq84TsiTj+RlRfQY7ffo
/lT7H2TD3irHltwhhpu0rw+O7Tzd+Zv2u6SzX/s08/68dK6DJ9nuasfwuPar
8U+8TvnQrLPqEvOekswA7W+ptc3EYBvvnfl8sOJQjTGJ2uSsk4VjQmzqdOYa
yf4jm2ZLvisxPhyWzsyya3546nhTm1N1/4lY/+Q/dQA+XFl2blF/1GGr+GtE
7ya/cr8xtb4/4hk5npWd3+Q+Pt2vuwdW29dXK8Yi7tit/xXJPlLtGllVtv1X
lf1evDW61BYyr0l3ieydJbq3ZP+J/QTxHpT+fMnekzu/wUywc5HkLya39N1K
/WU+j3OxrSx6YbAt4N1cndcv3ZOxnnsrxjtwL0md8+R+rdagwrEmd8ihK2L9
k1vVWucqzs/XK87pial9wjdy7K7cNUftUePYyxtO0zkDqvy2xBPswJ45mf/B
m1UyHoCfU8WvBZPF/zR37VPDYDGYLLELmAv2kn/kC5j+pvbnYn12Utu6+7vM
sSSmndr3id+rNUWrOfUd1AK1wd2Hdd8zkn1Wa4d4XblrB/8aIh4vLDvHwYo9
uXOBmD+gfX3h2LTp/vmSbY/4d6N0jopeEnsQ8QF7L9Rc2e9LLaKDLvlMLztW
+P3mxv53b25fNkW8a4h4eHXZvfSL3LYfiv17fOLcJscbEr819Uhd1kj3ksK9
i54GPpHP+HIp+RD7BfgwUTJrtT8W4wWGgF/UGPaOiP0QTAZzkEEWG7AFjGe2
AD/agn0CT9Zlxpq90f+fMs8fs6sdTzAb7IaPLR9UjL288Vr9X5oai8CQFvF/
LYyHYAxYM7owNtNT6a302JbYj+i9A6Q/NHH/7YsxJtbUFLMHthNPcmJ7Ygzm
/vaSsbk/1i8YDX00d6/mH7XNf/b7Yk8hpiMTYwaxPl64H9GXqOcjsf8QL/rL
ztxYRU8k/ltjD8MHsIB34r3+0hqlfVfmeWdBzDdmDOI7ueTZoyNzvTFzkS/g
FboDIx5NTp13zE7nmAcy12Kus4v4b13iGQ3ZnsLvwHtMEv1n6llkiNaGzDMV
s9VOZg5mrdy1XxXxdmhhbAeLsQ8MHxA8y4Dt1Be5QL2Bt/yDxx3rM2Pc7jgT
rozxIlfxGd/JQXptU8m5Sf8mtotKzoe/47yJD/gyqjCWUKPU6mnRHYlnil8K
5yu1CibTH4kHsQJTwBZ6DL2mPs6mByvufd0Rn5gPDv4/g+bGR3odNfli4Z5Y
Jtap8xeM4K1bS7bnRJxvqTlqjxwml8GYnwtjHtiHzdhOT6G3Mo+Tj/TMrpiT
zNrMZOi3RDxiHiPW1ODi6FNT8Jvj652Zz2Impz7+A0w5T3g=
                    "], 
                    VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1:eJwt08lvzVEUB/D79PW1XlupxFQSFEFKS02tmhKVoDwRK9pHpCIheELYSKxq
ZUUiLA3/gGnTGEJiiGGBjSERYllDIrSlSuJzc7v45ne/3/M959x77v3Vdx/e
VhoVQmiGcng0OoSzhJu5EK7Dp3wIE6ApG8K6shBOZUJ4WxnC4xHfDZ5WiZfz
SY/xbtoSWif+h+8V3wCtH4bw53DP+gPPNP7DfP0VIbTpUaTP4D/EM13NzbSD
+l6gPaV18S6V97489XqHf5M71d4LfG303bQdUIlXQA/fG/wvX0G9+3rM51+O
T9RjIW1jWdpn3O9neiNtN99s2lFaSf56te/m0l6e0frk1sv7rtYwfX91CL/l
ro6zqlLDuglq+Gr5zsnr5dvK94u+iq9gPc96PgzACtoenrm8x/QYoq3JprPF
My7A/8EW2i5aI60Nv8l7Us4c2mwo13N4ZPbxbNfUfIgXYSxtFm0mnHCu17wd
4n/U7FOvnWdQzZXZdL/xnuO7eABX8cFcqhvrt8gf4iuptVJuK35b/Lz4Ld8u
ehG+qLeAr8UMHTnU4cOwidYp3kBrwV+oWe++Ovg2wpV8mk2c0eR8mu2A7wvz
3SBeJ3cSFMQz+XQP2+kNmXS2n/n0js+MSvPux3v16MHHyxsHm+V+hWbxDnyM
vUzBa3mr8OpMepv7qtO7jO9zp5rL9LnEUxrR4tttpl2k5fQuZtM54nmOxL2I
v+T74bte3Q3xnuhd2fQvnOb7iC+2rrFe5LuWpx0OxrnIzcUcODA6/Q/xLcY3
eQee4Mdhby69oTFqFNX7D4JFdrw=
                    "], VertexColors -> None], 
                    
                    Polygon3DBox[{{1869, 792, 791, 1786, 1701, 2784}, {2565, 
                    806, 805, 1615, 1288, 2111}}, VertexColors -> None], 
                    
                    Polygon3DBox[{{2591, 1098, 874, 786, 1804, 1719, 2503}}, 
                    VertexColors -> None]}]}, {}, {}}, {{
                  GrayLevel[0], 
                  Line3DBox[CompressedData["
1:eJwl00tsjGEYxfFnZjraoaHuda2qEBuJJmKjjaWFSHRD0tiIUE2olahgYcPC
moUVCTuC1MYWG8KiMTOd6tWt4n6r1rV+by3O9z/ned7b934zjXu72g5nIuI+
HchGJL8Yp3BhdUQdrsSGJL4ZN2ALtlIL34bbcRfupna+AzuxC49QN7/H4qf5
s/ydmoh98jn5gnyIv8xf5W/iLbrNP8J7WDXTvrmIN872mt7TfL0BfKK/oMp5
qcgvwlJ6D6ynMr8E+3ApLqMK323P5Xw/35uPOC6vkJ+md8YBbMBVNMg34hCu
xiYa5tfgCBbNP2H+MecZlfdjjzzmjL1yBe/iQ3xAPfx1vIK1hYhrxl6Sz8uT
8mPzz/A33FO73la1ibS+2k69i+rb5KP8QbUd+nk+3NN69zTK99MkfaCvNM/6
X3CMhigv1xr/mR+hV1ShrPovHKZPNEf+mOYb+xL7aJCq1X/iDypTQZ5tTMb+
pXQW+TfOVfuDf1NNbwpr9Io4S+8dvqCJtJf8HN/Sd/qWfpPGFtTH+Wfpe1Or
dVxBbMlNbxPr3H/efayd4d0Qot64JvWs3JHeV63scUrebJ5PF5ty00eKZo+N
lI5YMuZk5v//4R90CmVv
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwt0Mkug2EUh/HTlg6ffoqap6qxkQhrsZCKECwaS7HhArgL1yixsFRXYGHj
dxKLJ8//nHd++8+v9y+ViHjEeS2ixT/1iKpcwwS+ioiiETEp19FAE4V+K40p
zKjbmc0teRqd7KM0NsttY3PcxVivVM/LC1jMNeolXsZKnmPOat5Df43XsZF7
qje5hy308Z1n6G/LO9jN+6r3eB8HGOAQH9WIB2+98eCKfCsP5V+fMbLmTH3K
R3zCx3me/NR0f3M+0VG/8xvu8u65X76Vr/kq3ytf5p/wBQ/zv/7/+g/g6hT6

                   "], VertexColors -> None], 
                  
                  Line3DBox[{504, 211, 473, 435, 1785, 811, 1795, 812, 813, 
                   815, 745, 375, 504}, VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{1813, 2126, 1061, 1812, 2794, 2579, 2876, 1814, 
                   2795, 2024, 1815, 3013, 2127, 2580, 3012, 2256, 2406, 2128,
                    2493, 3123, 2404, 2405, 2257, 2407, 3124, 2129, 2497, 
                   2495, 2496, 3148, 2494, 2131, 2258, 3079, 2025, 1816, 3014,
                    2133, 2260, 2581, 2569}, VertexColors -> None], 
                  
                  Line3DBox[{1823, 2797, 2030, 1821, 2798, 1076, 1825, 2799, 
                   2031, 1827, 2789, 2800, 1078, 2543, 2093, 2146, 2776, 3019,
                    2032, 2424, 2345, 3108, 2770, 2148, 2425, 3021, 2033, 
                   2147, 2349, 2350, 2268, 3082, 2034, 2409, 2410, 3125, 2775,
                    2269, 3083, 2035, 2415, 2416, 2417, 2270, 2571}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1842, 2587, 2885, 1841, 2808, 2588, 2886, 1843, 
                   1091, 1844, 2809, 2589, 2887, 1845, 2096, 2153, 1650, 2428,
                    2152, 2346, 3109, 2097, 2431, 2429, 2430, 3130, 2155, 
                   2351, 2149, 2156, 1095, 2426, 3129, 2150, 2546, 2590, 3022,
                    2427, 2151, 1097, 2567, 2577}, VertexColors -> None], 
                  
                  Line3DBox[{1854, 2812, 2046, 1852, 2813, 2595, 2891, 1856, 
                   2814, 2047, 1858, 2815, 2597, 2894, 1860, 2099, 2816, 2048,
                    2384, 2539, 3167, 2788, 2369, 2478, 2598, 3143, 2324, 
                   2102, 2387, 3117, 2049, 2486, 2783, 2817, 1112, 1865, 2818,
                    2050, 1867, 2786, 2819, 2514, 3157, 2051, 2558, 2566, 
                   2489, 3146, 2052, 2559, 2563, 2578}, VertexColors -> None], 
                  
                  Line3DBox[{1874, 2600, 2900, 1873, 2821, 2601, 2901, 1875, 
                   2162, 2602, 3024, 2272, 3085, 2163, 2603, 3025, 2164, 2105,
                    2604, 3007, 2386, 3116, 2106, 2373, 2480, 2481, 3144, 
                   2372, 2107, 2376, 2781, 3008, 2482, 2375, 3113, 2108, 2398,
                    2605, 3009, 1876, 2165, 2401, 2606, 3026, 2273, 2515, 
                   3158, 2166, 2436, 2607, 3027, 2167, 2490, 2109, 2388, 3118,
                    2056, 2168, 2491, 3147, 2110, 2391, 2608, 3010, 2169, 
                   2492, 2562, 2394, 2572}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz7tKQgEcx/F/EOnxHK2lB5CGoLWytSaXLtAQKrT0AAXNDRGZ6VzZhcbo
4uOUoQkNXR4j6OPw5Xf7n8M55b2D7f2JiGiglouYSiOSfMQOn+MXCxF12pCP
9Hm+QL/wYEvkJdqnu276iZ1P7e/8oy2VB/wQf1jW1bKID/4MLWzgU7+gzzy7
Ll/gEqvjW9u3fk5+QkUu62f5K1yjix83r7aS7Vkuyse44W+xph/Zf3UV+QUr
8rz+RHcud9BGU36zDX1/Ty7Jp7jTZboWfzjpH2gVbYz00+P34N5dUe7wW56f
oZv0H46YLSI=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz7lKQ1EYReHfxhnt1DYO0cLC0sy9Q2OnXaLiiD6CiGUSRxAhhc9kISIm
go0DQUR8Ab9TLPbe6557kpupHa8d9UTEBnb7IhYHI6pDETv6iMzZNbln5/VN
fV8flQV7Sx7YRX1bP9Q7st4fUeLa+rveGohoyE/5zK8PR7zodTT5hmyjyJ/Y
H5i2ZzDJjcl7nPJfeHDHk7uz3DgWkHXuzLMuZu05THETch5L/DcevVvim1wO
N9y57KDML9s/yNsXKKS7+FvuUn/Fiv6bvrE34ir9b9zZ1/INFedX7b90Jv1G
uhst+x+t2y6v
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzM1KQmEYxPGnVZ+QnuNHZS28ESXrAsJ9Gy/AIiK6jRZuWrSJIiJBEITo
ViKjsKCdi8rKot9ZDPOfmed9q629ZnsmInZofzbibC7inZaXIvK8rRssROQW
Iz7kGn7CB/pz+ZNybhN+qLu15+0TuY5f8ZE+4anuGN/pU/lL3sRv+ApfzEdc
0je+z/7xbwFfZ5IL7n5wAz/gG7cn8pQSt0W+quvai/ZfeQsP8Zq+I/9R6rbE
K7qevWR/xGPallv2dXzq5pm/6HZ1ZXlD7stlb0bZRiv6Hv0DcLgsTg==
                   
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1922, 2207, 2303, 2629, 3040, 1921, 3044, 2209, 
                   2305, 2630, 3043, 1923, 2212, 2307, 2631, 3045, 1924, 3049,
                    2214, 2309, 2632, 3048, 1925, 2633, 2927, 1926, 3053, 
                   2217, 2634, 3052, 2231, 2219, 2635, 3054, 2232, 3063, 2220,
                    2636, 3055, 1927, 2221, 2637, 3056, 1928, 3058, 2222, 
                   2638, 3057, 1929, 2223, 2639, 3059, 1930, 3163, 2527, 2640,
                    3162, 2550, 2530, 2641, 3164, 2551, 3172, 2532, 2073, 
                   2552}, VertexColors -> None], 
                  
                  Line3DBox[{1932, 2226, 2311, 3094, 2074, 2334, 2750, 2840, 
                   2312, 2642, 3060, 2335, 2229, 2841, 2075, 2336, 2753, 2842,
                    2643, 3062, 1936, 2843, 2076, 1938, 2755, 2844, 2645, 
                   3066, 2313, 2238, 2845, 2077, 2314, 2758, 2846, 2646, 3068,
                    1942, 2847, 2078, 1944, 2848, 2649, 2937, 1946, 2849, 
                   2079, 1948, 2850, 2652, 2941, 1950, 2241, 2315, 3096, 2080,
                    1952, 2761, 2851, 2317, 2081, 2316}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1953, 2243, 2943, 2760, 1951, 2759, 2942, 2240, 
                   1949, 2940, 2939, 2651, 1947, 2938, 2650, 1945, 2936, 2935,
                    2648, 1943, 2934, 2647, 1941, 3067, 2239, 2933, 2757, 
                   1940, 2756, 2932, 2237, 1939, 3095, 2236, 2931, 2754, 1937,
                    2930, 2644, 1935, 3061, 2230, 2310, 3093, 2752, 1934, 
                   2751, 2929, 2308, 2228, 1933, 3102, 2227, 2306, 3092, 2749,
                    1931, 2748, 2928, 2304, 2225, 2234}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1954, 2233, 2653, 3064, 2337, 3103, 2235, 2654, 
                   3065, 1955, 2655, 2944, 1956, 2852, 2656, 2945, 1957, 2657,
                    2946, 1958, 3072, 2245, 2658, 3071, 2318, 2246, 2659, 
                   3073, 1959, 2853, 2660, 2947, 1960, 2661, 2948, 1961, 2854,
                    2662, 2949, 1962, 2663, 2950, 1963, 2855, 2664, 2951, 
                   1964, 2242, 2665, 3069, 1965, 3070, 2244, 2082, 1966}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1970, 2856, 2083, 1968, 2857, 2668, 2955, 1972, 
                   2248, 2858, 2084, 2319, 2764, 2859, 2669, 3075, 1975, 2860,
                    2085, 1977, 2861, 2672, 2961, 1979, 2862, 2086, 1981, 
                   2863, 2675, 2965, 1983, 2864, 2087, 1985, 2865, 2678, 2969,
                    1987, 2866, 2088, 1989, 2867, 2681, 2973, 1991, 2868, 
                   2089, 1993, 2869, 2090, 1995}, VertexColors -> None], 
                  
                  Line3DBox[{1994, 2975, 2683, 1992, 2974, 2682, 1990, 2972, 
                   2971, 2680, 1988, 2970, 2679, 1986, 2968, 2967, 2677, 1984,
                    2966, 2676, 1982, 2964, 2963, 2674, 1980, 2962, 2673, 
                   1978, 2960, 2959, 2671, 1976, 2958, 2670, 1974, 3074, 2249,
                    2957, 2763, 1973, 2762, 2956, 2247, 1971, 2954, 2953, 
                   2667, 1967, 2952, 2666, 1969}, VertexColors -> None], 
                  
                  Line3DBox[{1997, 2684, 2976, 1996, 2870, 2685, 2977, 1998, 
                   2686, 2978, 1999, 2871, 2687, 2979, 2000, 2688, 2980, 2001,
                    2872, 2689, 2981, 2002, 2250, 2320, 2690, 3076, 2338, 
                   3104, 2252, 2322, 2691, 3077, 2003, 2692, 2982, 2004, 2873,
                    2693, 2983, 2005, 2694, 2984, 2006, 2874, 2695, 2985, 
                   2007, 2696, 2986, 2008, 2875, 2091, 2009}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2023, 2255, 3004, 2768, 2022, 3003, 2706, 2021, 
                   3002, 3001, 2705, 2020, 3000, 2704, 2019, 2999, 2998, 2703,
                    2018, 2997, 2702, 2017, 3078, 2253, 2323, 3097, 2766, 
                   2016, 2765, 2996, 2321, 2251, 2015, 2995, 2994, 2701, 2014,
                    2993, 2700, 2013, 2992, 2991, 2699, 2012, 2990, 2698, 
                   2011, 2989, 2988, 2697, 2010, 2767, 2987, 2254, 2564}, 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVz0sug3EYxeHXSJUl1MASMGCmcVuAiZmBgUvRphERl5YVICIRSStVhKYu
0RBiNyZoiYhYgMfg5JzzO+//S76e6dxEti0iJindETFEb1RKRPzSWFdEIxlx
hm23R/TzOz3bGfFjP6JTbMvW7bZPPsS+aVS/dVvFivZefqMveftlP6ATrGBL
uR2U97FPGtGv3FawTfsAr+uL3rbse9TCNmzjbq/lXeydhvWa22Ns3V7ml/oU
3pR33JT4mu3D9y70Bf7sZhXLyGl5RX6Vz+3z/Albxh75nF7F8/qLXJFn+cP/
/2H3fEYv4zn9D7zbNYE=
                   "], VertexColors -> None], 
                  
                  Line3DBox[{2560, 2121, 2379, 2120, 3011, 1894, 2716, 2912, 
                   2395, 2118, 1893, 3034, 2117, 2392, 1298, 1892, 2714, 2911,
                    2389, 2116, 1891, 3032, 2115, 2437, 3131, 2713, 1890, 
                   2712, 2910, 2402, 2114, 2403, 1889, 3099, 2113, 2399, 3122,
                    2711, 2400, 1888, 2710, 2909, 2377, 2112, 2397, 1887, 
                   3030, 2174, 2374, 3159, 2726, 2519, 1886, 2787, 2908, 2516,
                    1884, 3028, 2173, 2907, 2724, 1883, 2723, 2906, 2171, 
                   1881, 2904, 2903, 2610, 1877, 2902, 2609, 1879}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2574, 2513, 2512, 3156, 1866, 2897, 2599, 1864, 
                   3145, 2485, 2547, 1694, 2548, 1863, 2487, 2709, 2896, 2157,
                    2101, 1862, 3098, 2347, 2100, 2433, 1270, 2540, 2432, 
                   1861, 2708, 2895, 2154, 2098, 1859, 2893, 1107, 1857, 2892,
                    2596, 1855, 2890, 2889, 2594, 1851, 2888, 2593, 1853}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2575, 1831, 3126, 2135, 2261, 2134, 3015, 1830, 
                   2718, 2881, 2259, 2132, 1829, 3020, 2408, 2095, 2498, 2094,
                    3005, 2357, 2471, 2356, 2707, 2880, 2130, 2092, 2544, 
                   1828, 3169, 2542, 2541, 3168, 1826, 2879, 2585, 1824, 2878,
                    1075, 1820, 2877, 2584, 1822}, VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{817, 1062, 2794, 819, 1075, 2798, 847, 1089, 
                   2808, 864, 2889, 1104, 2813, 880, 1118, 2821, 896, 2903, 
                   1130, 2823, 911, 1141, 2830, 924, 2919, 1411, 1413, 2832, 
                   1516, 1414, 3044, 1416, 1521, 3092, 1444, 1547, 1446, 2840,
                    1523, 1455, 1552, 3103, 1457, 986, 2953, 1208, 2857, 1006,
                    1227, 2870, 1026, 2988, 1246, 1044}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{821, 1064, 2795, 822, 2879, 1077, 2799, 849, 
                   1091, 866, 2892, 1106, 2814, 882, 1356, 1503, 3024, 1120, 
                   898, 2906, 1370, 1507, 1132, 2824, 913, 2915, 1143, 926, 
                   2920, 1417, 1153, 3088, 938, 1418, 3045, 1164, 951, 2929, 
                   1447, 1549, 1177, 2841, 969, 2944, 1192, 988, 2956, 1475, 
                   1529, 1210, 2858, 1008, 2978, 1229, 1028, 2990, 1248, 
                   1046}, VertexColors -> None], 
                  
                  Line3DBox[{823, 1311, 3013, 1313, 824, 1759, 3168, 1761, 
                   2800, 850, 1092, 2809, 867, 1107, 2815, 883, 1357, 1504, 
                   3085, 1359, 899, 2907, 1371, 1508, 1373, 2825, 914, 1144, 
                   2831, 927, 2921, 1419, 1421, 2833, 1517, 1422, 3049, 1424, 
                   1522, 3093, 1448, 1550, 1450, 2842, 970, 1193, 2852, 989, 
                   2957, 1476, 1530, 1478, 2859, 1009, 1230, 2871, 1029, 2991,
                    1249, 1047}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0C1IQwEUhuEznBN/yroLRieaDYoIwqpMcBo0WCxjBgeCrgsWh0HG5oK4
qKbZBMWibcKaW1ow2hw2fQwv53zvd+69YzN7B/lSIiI2sDQSMTsaMZeMGJuK
WJZXJyOy3FYqYpGf4Df5krzCF80cv8/d2Nfd/8jX9oI57/5I92tf4571dbOB
U35HHveenHyFJrKeudQd2w91HXObOzE/UEFLf2b2sKsru6vhXO6jijR/767O
3+LLt6p+xyNXtj9w32hyGbnDv8gJz91xA/mCf7IvmEP5VZ/27qSb7v//gbbu
jX/HpzyNP+H6LPk=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzT1IAmAUheFrWUM5SUtL1NAQFYLgEESYEDhFtdWoszUpLjYHjk4RirTn
GC1BkxFFWGs4RdbWpkNLz/By3nO/n7tSOjs6TUTEPnamI9ZnIvrzERvyA5t4
1I9nIzL8ROZSEUOeR0Xf0nf5iH+jg2t0kfC27t9wvqevuTvFD/ghsvqcXuQp
eSHzZl/8nJfkQG6blXmD/8imLJhV+SVqWLDrV17hBhO9Le/tr/JbPsYdlvSB
eS8Zsco/eUs+6Bk50Z/cS9uzbM8z/8Mif5FveMU7/gHuXCpu
                   "], 
                   VertexColors -> None], 
                  
                  Line3DBox[{1045, 1247, 2989, 1027, 1228, 2977, 1007, 1209, 
                   2955, 2954, 987, 1191, 3065, 1456, 968, 1176, 3060, 1548, 
                   3102, 1445, 950, 1163, 3043, 1415, 937, 1152, 3042, 3041, 
                   1412, 925, 1142, 2914, 912, 1131, 2905, 2904, 897, 1119, 
                   2901, 881, 1105, 2891, 2890, 865, 1090, 2886, 848, 1076, 
                   2878, 820, 1063, 2876, 818}, VertexColors -> None], 
                  
                  Line3DBox[{1048, 1250, 2992, 1030, 1231, 2979, 1010, 1211, 
                   3075, 3074, 1477, 990, 1194, 2945, 971, 1178, 3062, 3061, 
                   1449, 952, 1165, 3048, 1423, 939, 1154, 3047, 3046, 1420, 
                   928, 1145, 2916, 915, 1133, 3029, 3028, 1372, 900, 1121, 
                   3025, 1360, 1358, 884, 1108, 2894, 2893, 868, 1093, 2887, 
                   851, 1078, 1762, 3169, 1760, 825, 1065, 3012, 1496, 1312, 
                   1495}, VertexColors -> None], 
                  
                  Line3DBox[{1049, 1251, 2993, 1031, 1232, 2980, 1011, 2860, 
                   1212, 2958, 991, 1195, 2946, 972, 2843, 1179, 2930, 953, 
                   1166, 2927, 940, 2834, 1155, 2922, 929, 1146, 2917, 916, 
                   2826, 1134, 1737, 1736, 2908, 901, 1122, 3007, 1611, 1275, 
                   885, 2816, 1109, 1609, 1269, 2895, 869, 1651, 1650, 1347, 
                   1266, 1577, 852, 3019, 1640, 1639, 1339, 1263, 2880, 1575, 
                   826, 1620, 1706, 3123, 1619, 1497, 1314, 1618, 1572, 1315},
                    VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzTEvg2EYheGnqUqkdlEMHUTiD0iIRUINnYTW1iCRWHTBYhUrFaQSW2Nq
TUaJ+AHawWCyGBoJHUmk0XB1ODnPuc/53i+7WV7ZTUTEKo0NRLTpLh0xxJ/p
xv2djHhwV9yn9CY35D/3TyrikVrYNdbFvuSRYe/we/wE7+B1+ZJusSPsAzuX
P/kZr+GH+Kv83ueDNnSBl/F1b7bkJm3oX+xK/Fi/pV/WX+kWqCcf4AWew6vY
r+0Ez8jjfFu/pN93z2J7fNEmwys0Sms2Tf+ZsduR5/VF/oQV+Jx+Wpf3fUOu
06TNFP0D6doyDw==
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1053, 1255, 3078, 1485, 1035, 1236, 3077, 1482, 
                   1016, 1217, 2965, 2964, 996, 1199, 2947, 977, 1182, 3068, 
                   3067, 1463, 958, 1169, 3055, 1436, 943, 1157, 3038, 1684, 
                   1686, 3142, 1685, 933, 1148, 3106, 1556, 1534, 1580, 1579, 
                   919, 1136, 3105, 1555, 1533, 3099, 1291, 904, 1124, 3009, 
                   1281, 889, 1112, 3145, 1695, 872, 1096, 3022, 1647, 1649, 
                   1648, 855, 3083, 1081, 1631, 3126, 1326, 831, 1068, 1793}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1054, 1256, 2997, 1036, 1237, 2982, 1017, 2864, 
                   1218, 2966, 997, 1200, 2948, 978, 2847, 1183, 2934, 959, 
                   1170, 3056, 1438, 944, 3090, 1158, 1538, 1399, 2924, 1590, 
                   1687, 1558, 1557, 3031, 1535, 1382, 1583, 1682, 3086, 1582,
                    1581, 1380, 1293, 2910, 905, 1125, 3026, 1505, 1361, 890, 
                   2818, 1113, 2897, 873, 1097, 1790, 1346, 1721, 1800}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1056, 1258, 2999, 1038, 1239, 2983, 1019, 1220, 
                   2969, 2968, 999, 1202, 2949, 980, 1185, 2937, 2936, 961, 
                   1171, 3057, 1440, 945, 1159, 3039, 1540, 1592, 3100, 1591, 
                   934, 1149, 3107, 1559, 1537, 1586, 1585, 920, 1137, 3111, 
                   1584, 1383, 3032, 1295, 906, 1126, 3027, 1364, 1734, 1733, 
                   891, 3157, 1114, 1801}, VertexColors -> None], 
                  
                  Line3DBox[{1057, 1259, 3000, 1039, 1240, 2984, 1020, 2866, 
                   1221, 2970, 1000, 1203, 2950, 981, 2849, 1186, 2938, 962, 
                   1172, 3059, 1442, 946, 3091, 1160, 1541, 1402, 2925, 1568, 
                   1595, 1594, 1593, 3133, 1663, 1304, 1589, 1683, 3033, 1588,
                    1587, 1386, 1297, 2911, 907, 3118, 1127, 1365, 1283, 1702,
                    892, 3146, 1799}, VertexColors -> None], 
                  
                  Line3DBox[{1059, 1261, 3002, 1041, 1242, 2985, 1022, 1223, 
                   2973, 2972, 1002, 1205, 2951, 983, 1188, 2941, 2940, 964, 
                   1173, 3162, 1772, 1774, 1773, 947, 1161, 3170, 1763, 1543, 
                   1570, 3101, 1569, 935, 1150, 3112, 1596, 1403, 1667, 1666, 
                   921, 1138, 1388, 3034, 1299, 908, 1128, 3010, 1367, 1789, 
                   1794}, VertexColors -> None], 
                  
                  Line3DBox[{1060, 1262, 3003, 1042, 1243, 2986, 1023, 2868, 
                   1224, 2974, 1003, 1206, 3069, 1466, 984, 3096, 1189, 1465, 
                   2942, 965, 1174, 3164, 1775, 1750, 1777, 948, 3165, 1765, 
                   1764, 1544, 1406, 2926, 1571, 1599, 1598, 1597, 1669, 1307,
                    1668, 922, 3035, 1139, 1390, 1301, 2912, 909, 1797}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1493, 1492, 1491, 3004, 1043, 2875, 1244, 1024, 
                   2869, 1225, 2975, 1004, 1470, 3070, 1469, 1527, 2851, 1468,
                    1467, 2943, 966, 1752, 3172, 1776, 1751, 1753, 2839, 1408,
                    1545, 1407, 3141, 1678, 1515, 1670, 1309, 3135, 1749, 
                   1308, 1671, 1392, 2829, 1303, 1391, 3011, 1302, 1606, 
                   1810}, VertexColors -> None], 
                  
                  Line3DBox[{1494, 1310, 1061, 816, 2877, 1074, 2797, 846, 
                   2885, 1088, 863, 2888, 1103, 2812, 879, 2900, 1117, 895, 
                   2902, 1129, 2822, 910, 2913, 1140, 923, 2918, 1409, 1151, 
                   3087, 936, 1410, 3040, 1162, 949, 2928, 1443, 1546, 1175, 
                   3094, 967, 1454, 1551, 3064, 1190, 985, 2952, 1207, 2856, 
                   1005, 2976, 1226, 1025, 2987, 1487, 1245, 1811}, 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzs8rw3Ecx/G3sNTcdhEuyldL3BwcJEU7uWwlN+S4FY1i/4UkucuVw9pp
teQ6HFzVVw6uFlnbZcnD4dXz+X59fs7sH5YOhiKiKHOZiERmRyNeZWlch7e6
LcnzPN7J10hEKxuxovvmZd3E/1lnVnXzvCI/1jbMib7LT3RTUtCdYk16+jfs
Y4q79q7hjQx0m7ig++Xr/FG2zTvuaPM9zPrLE6/ylB/h9bA/8HN+ITnewUv5
5FfYtOeY13lDpvmz7p6HNx7w3Xymb3l/EbvmF77Mx7COHzgpf5vbLVU=
                   
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1792, 1784, 1730, 3156, 1731, 2819, 1732, 1362, 
                   1506, 3158, 1363, 1735, 1657, 3131, 1294, 1381, 1296, 1673,
                    3137, 1510, 1566, 1384, 1536, 3110, 1385, 1567, 1513, 
                   1676, 3139, 1400, 1539, 1401, 2837, 1520, 1439, 3058, 1441,
                    960, 2935, 1184, 2848, 979, 1201, 2854, 998, 2967, 1219, 
                   2865, 1018, 1238, 2873, 1037, 2998, 1257, 1055}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1807, 1284, 1366, 3147, 1285, 1704, 1614, 1298, 
                   1387, 1300, 2828, 1389, 1665, 1305, 1745, 3134, 1306, 1664,
                    1514, 1677, 3140, 1404, 1542, 1405, 2838, 1748, 1746, 
                   3163, 1747, 963, 2939, 1187, 2850, 982, 1204, 2855, 1001, 
                   2971, 1222, 2867, 1021, 1241, 2874, 1040, 3001, 1260, 
                   1058}, VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1:eJzsvHk0lX/7/i1ElKFEUiTJkFJpQuoQkhQZmqhESkiSkKSUlEqJRpVERClD
CSXK3tc2z2zzzB7NSRHK77qfn++ntT7P6nev77Pu5/nez1p3/7TWufa6bOd1
vo/zOK69vRYeOmFxhJeHh8d5Bg8PH/m/1I3Xx9d5cGBd9tlBvIUOJZsB36hP
BL4/knSXIOt15hdM3zbTcaYj9OlNsu720Xn3TrJOCD+f2Ee+fjztsfsbss47
vsPR7wwHZR1HKlq76UjI3tIcRCFg8vPq4TPPOJC5OywmuKcajoy08SV1BDzk
tTer3OBC9Pvhi/MyauGsGNi71IqGWx63qo5u6MUS9zSf78ltMHxZ3cxrnwue
/+vfAJ5+KJO5zdeFxYfneO3b1PxX/c713IbW+n5QRxH4w73r366+NKrRNeEU
B+IVVkFxTXQkL95ruovsm/D14z5n3TlY7376TGA9HaNiDg6vswi0dvO8Dz/B
gVnLVkmBSjp2nz1Ck8okEKlSpB1wjIPo057GZnl0nBCN7a/6QIBRGJg35s1B
xsbA8MAuOs6VhGjok/3PFuD0tIhz4e20ujDtdA18Hx6cJytJw4M5nYfCSrth
yOETf/+sGdFtK/f4h+X89f793rrfcOJl41z+qNA1FfpfdYfPCcvkX/bjxHan
NRFj3H+7Ppvy379qSfYz+M4Q/wKyn66n5lrdJ/uprLq94asrB9R5HX7by8n+
X+m6/uEjgZG201J2Dhzo5fOvbv9Ax84OF+bPNAJVdWfe7rLkwLLCX2r2VTpY
vPm2Pq8JpKc77w3V4qDl0s1Xbw3oED+zM183gjwXF8U8rJzJ64wv+qVHo8Oo
VOuXOnlf7B/HKxPSXTBpmcYqUK2H4oj77uJYGtbk25u+29uP2l3PZKXdO+Et
dKUi80beX7/X8o8i77eq9qDrwpyx9rb2f7s+f3k4vOMoOZ9GS3mO+1TQoe17
z+gH2c+d9tL2axw5sHW7WfLyEx2zMpYd53lPYKjTy7B4NwfhsoyzCqF03Awb
r7RPJOCb4ihqvJyDR5ZJzRWq5HUOli6+G0Zglfvxm7NYbNxOkP+wz7kKWY+F
b6u4EQjxmBaa/IINS5c52bUFlQhwjD6z2ZRA87KEsgny+lbHRXVfkte33u9p
eIG8Pidg7HqhXjey8grqF65pwrK9pvI7t/2e82PzP/PNPc3EfPO62xuGS/+q
1yhrMztX9mLKwKkq6cHO/7E+h/Hz3qp14mBdToR5P5UOD3UfIzbZz5Gceymt
+znI6mJyp0bR0SA+J+DTGwLWU4pr4sHBx08Ww8930sFf1lsZEUVgRbDCDQEe
DrzNNmZoJVbh3qvi077nCSQyd7FtLrMRUSXRdPZ4JcwirnflaBNQOBu64W4H
C6+737fnE+XQMQ/oYrVR8Tjt5NtH2SxonvNoGnAuxyOzObsWl1KRfenSsunk
9adb8tRsJq8/nrVKwI+8vm4779y+wS5Efq+kbDvciCVrpa9sWPC7/8qhKS0t
exiYN+K/rV8t/696n6WUeIAbqZv1tQfXBbX8VS9PfHZRrrYfjhMPb2i7/Ov6
LGfEt/6dLQe8LtE/hV7REZumTm9MIVBp0FnvvJ2Dx/7au3960pEZ3EB98YLA
8Cx7pV8LOYi9vPL1DEE6dhR1j+qEElAMf6flXshG5pbZz2QVqpDZwLeGY0tA
PyiVdUGRDfOzLRuWuVVAU824fdtUAhn6UkJaq1io4E/Z5TlYAr9x1+XSF6iI
sg+8/dmfifvtkXl+ewrh9Uba5ZUcFXfabbYqfmZCsUZebt+dIux7ufgtry4V
/vpmWZcaWAgzv6n1NrEcMs1D6qeaqNDMGxTof0zu36POj3s2V0NKSu1ZMJ2A
bdq43PzF3VBwSxIIYDdCcLeT5RftHOy4x7OWd6APnoGaXqu5HVCzmOUwYPFb
l7JVaMXab9i4xcNTV6NV81c9T+wn74B+L2Tojz4byTH+2Odj5SzZsp0c3FV4
I9QfRMcxxZRM4wQCt+fImXmSuip54s4BJ1JXw/VDTVeSuvotLEMzk4+DFw73
5HrTq5BD3/j56gVyb3qobpd+xMYZa33XhOhKfOONrlxrSMBs6fLYRbUsXHax
eNbyvBzS/Eyl+w1UGGYJqmxJZ4Jaw/LWdi5CkHyqxav1VJz7qR3e85EBfZHU
xtgtudCvOCrESabgl/85m2I/Bvj3LH+2UiQHJukXQ9JuUfB+5KvfUB0DpuWv
gs625sKxKZrVl01B5491m/ntmHgdk6knGVcAn64Fq2bMoOLu4ZybPANM1LX+
Wsm8XYxa+lyhcWsqZKb+fICrLOizhpUVk8rQmz47YVoSFZxzcTirw0Z1tOJY
W2IFxPcORV6dRcCmvJZ5SIWDyHQ+Km0OHb73hEJpdwlIWysIF5zkQsby9OzF
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
/G6pQRemF00hdjyux9udU1OJTzTsjfomfimBgyA/HXXGqWpSn9X79VoIbNO4
PC9+kA2X2ze2bw2qwsJ0vaXzyTkxIM5fLW1hY3SsJX/fniosDTr1YbELgfHg
RsVe0m9nPD+ReTe5CnJBV3LG/uG3eWIsTizmYFu0bP8McToixDRPLrpDYOP5
1ebRuuS5O6CQuXwPHW3GlRPKzwjs+WW9ps+Cg5BraqenBtLhYtq/cROZcy1P
2PqX2nDwIGhNtUQsHT1rtBPL3pLzvCCvwJXMy5V7wwWnZtAReiXBc2r67z7f
tzWqPpPfC+r3GZ8KDzH/qlc1224OFu7G2SrG2lL1tr/qdIEtei155LlZe1j8
0PnfftL5V4DofjMmHM8H2LycUQrR4W6LXX59pD9c19y+qwPUsGXrM2fnoSZ+
+nKBim7Ed88Xm/WyGXfmXg6vf5iDU9aV29NJXXIqLBJTI3WJl19lSiipS/LU
wxs8o8i9sCyasNlZjb3CjQce1xK45a2SJETmffH2ADMTsg88hKCzGdmHd0vd
is1MOUg4ISM15EP6peG8aamkj7r1bsluQSsOaOZ6pcP36Vic3yb5NIncF+8P
iM2252D9ekEvvKEj8YubvVoq6W+n1Up9JXOc7Pe4HesIOgLszc9+J3OciMxL
ybWuHLwbrNq0v5SO3Cr7PDMyR1ubHF9IceNg0beRTN5qOoZqd2u8zyT+aa6R
93o2T3pRP0bLzMw8Ujh/1SWCEwVjLvaAGWtjFu3Q8Vc9LDV72stZHOxszM6t
tq39q7706CPP0QYGpslYVzduLsL9Ux96HVR6oVbfturCvTYQIzq+zntyEfiU
a/DjXBd23wlK9NBowHzB+Ttft9AQX2jeFzqHi7F5bwPWX6vBoxU+zDJpGqLX
lQWeDOMgTeicXLFONZxvLrOJqiSQXqYyrnSanM/Nt9KzmHT4nK89rJtNkHs0
RUHqJAdnREMF2sk+1OdwF7DJPrzLDWQbkPUN4ycs99XQEWP14gtPFoHP9m2R
O93JeS7hti+sp0PTvObrP57/7Cy3zF9yigOV+Z0M80Y6zFLzl4l8IvVKXnpj
Mlm/tEqJkdhEx91tjo27ybp1zmPGHrIedSm0MY98/XiDkqQSWS9NPD8seoGL
8SP+Et6ParF7k7KAnwUNjLUbB1Qm2Li/M1Xz+6sqLN5tKM9LnkfRwo0zF9lx
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
5yUL+kNzrOnLyjHerB+8kULF7BYphzk9LMzcK1P6oqkc88q2GiqzfnPMNv6N
YzYsctR6zz42Hn9Ve3dnogL9B/hHQxcRSJ2RI/SF9EuB6Qt4Rl0rIaXu8kBq
/Z/5ZsKJx2V489joOBQoJz+3CgFn1ljyHiTwce/j2LLPPaCG5od/ntGGG7tq
W17L5mKTdEat++4e1PjwXPwxtRXbclmr/Ttz/sgxC26/sWOzUze2+78Lojxs
woxZfvtv25J76WTTmGxpFxYfcKcK8jciRYWX3iX8m28WOck3O7X/f/PNYhvS
LIbVubCRD8tyyq1BTdxjp4zFNLwPrObPIM+18ei5n77kuTaUmHtCkTzXBye5
Z4f+xj2j2vu7R2mxsXb/gmCXuAoU7Xz98Zs4gbXRcTYPF7DxKG5gmrV9BebR
Ez/f5yX+4qHdmuShJU/y0O7YzemwcmLjgfwPj7WKleT7//DdRI3s85Lag7/C
2JDwl1ldHFmJ88eFlj/e/JuTxvc3Tpqi2vxDCaQfO7Nl6vRg0o8JuncenE76
sczXU3i8+Dm47VnYW/mhComjXab9pK8w+AM/zUGM94zUMg72fV81V1yRDvkD
GXwHHhD4rivwzWI9B68EOQ7GW+nQHJ4yofn09/cSLaN4lg83MWH6PHKGSHL5
X3V/E/OMmE4G7Nxu3d7pUwT9SX7ayCQ/TXeSn/ZUquLCT68+mPXN2PrDuAOO
/4u9N4/G6u3bxok0SZTMESGVVGQIdVREJCmlJEKFJA2kSCWpUFSiUZMQKUkp
Zcg1mGcuYyhck1kjKvrt73p2X7/f9Sz3/XvWup/3ft53vf+ea6+Lfe7P/pzH
cZznPo481dmKovkY1GEqim3qgS+jTf9H8UccqjJiunvmwYr0VeOSvmp2pK/a
se/rWGdYBP6dgK26q94jiv/agxrJXKg62FXfzexA+3P3K7V69ZC5ljWr12vU
by2cx2/NauuW/Z8Xc1Gik399rgYDb+oM9p+8SfDB1wujpnRz8GlywuwfvtVQ
tU5I8fYa24dNfJ3r7bBvHJRLds6si6jGsY/zPV4eoyHrpVeI1FQuVv4YOepa
Qay/Th6JL86O7c8WmWj764ouF7nexUd9QTwX3a9+qgQuMhnpMs004ULTQyVO
0ZWB3Q/OvTsbN7Zv2++7DjMatnOBj01pb24zQOUWa91PoWH17zpjW4KX2ag8
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
RaybGrJucZ5s/Lh2pG75vHIcdnpmx75PxS2Sp+uQPP0mydND94jsHiHwnsb5
rHurP5WiXGpD+QCB9/hW2iztr2Fjd9LEpLcxFTCf4OzR3UBF57dDl5elcPCl
X03sYnMV6sXLXDw30WBI8vpIktfPJXm9xsyMm919bBhZasQmsyvwfar3N2Pu
6HdMydvXT5xQ3gn5VeJ5OxNHfWyMp8tcvTerFzLzNXyNtUb15/F9TZf2cjvA
rjv+cXbfv86HP09ZMG6lJgtrcy+Wn04twLLYy/IGnylI0fY8nOrOQtWnt5Kv
GgpBfRVluVuMigCSp1/lOUckozU86PmFidqN8z5835uPjaotk8LKCX5xYd2x
EuJ5KTrXNDMJHl656x13mHhe6hZr4ntjOeCndG0VzKnCcEPfAU0LGraTvF6U
5PWCJK+f++UXX9ZhNvq1BqixK8px8KlTqtpDKi4KW7o/eNaJ6leVTZYvG+Hj
WKMn8YOO1b/9lBoHumD//ebALZEWGI3QxM2ejeoDqaQO4ETqACW+ykY353fA
ZHWB4MjbWvgdOaC+cc5ofR6Bl5O/DZuoN2mhXwqjfjj+41kNNyy4OOo5/H6l
aD3uRSt+17Drxa1NkRV3VNuweygV+Xz5MHkW6VN3goUnmWbbapcXoaKubvCb
LBW+k9w1/eJZSLDcE7hjejFGrJb27NakQu/BwIWBWSxITk0Z2ru2APHvhbQn
cii4svSiYosgG+0eflfH85UifndXZ4ALFSavJKYPzGfjpc5O6zX5paijr1QJ
OU7FElMZCQVpFoqpcs7TFxVgiaXTHjsmBaqfNoe3exF977r1DO1mBvSHPBZ5
ZRN8bVLigoV+XNSEimnH9zDwCg1FXf8gh9qc5i8XdISLPDEPe59WBiwELVVt
3xE4ynV32fURLvYvXt/daVoL+U7bT+On0BFuUK1lRPSBB09vLq04W4u+Mn5Z
SaIPSH+E2Cb5TlSpaZdt0muAzO1HH5oT6bhI5lmrkHnWxmSe9Tm/Oyc1ifdB
Yo5uRNHjelxzaMj8dWH0elWe63/vT7rt9bwDP8ICMx7I1uPXk4h42v7R53t5
AudxtgUbTnV8T0+MI/BvYr/glJg+VEZj5GdlOxY+Ebq/LG30/GHTb9Fco+5u
HFObp3DfdFQvNf+Vxqm37cbbaA+jPfNH183PXoWHbBgE/vJdLbIiqeHvcUdy
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
n1KEPRumPI6WoP6dW/2YZ19pnLznep9sFgGSyzRKLxWjRdgmLoa4X+EvRlrh
DSzo5X6vPTWrBG/EZZ9ft6QiImZJI0OsAz8nyLUv86uFec+LD7Ez6ShyCOFf
QPAFBXGjvWUmtXj5pv5j4WQ6ksj9ppU8+02/hrxC9PZ0oM1g0WezzXU4v4ch
n2xER2ue6xbZh1z4Ce4LSd5WA4s0v11BBE85qnpbtNSUCwnbBUOde4n30SBg
q1w8sT6S+1PveM6lP6YuS7eO52Jy4JT1Mk41sFqlE7CucTTvJp4n72aNaxPF
IpeoN9vHN54dy8PpTzJiM19RcPmg8e5ZVUysKUtfk5aRh/oD+hpqWRSU0UwO
739H8H/fvT/uNDfiusTS/LJxuVBWvXKrPrQTk/Z8+jZrcyPuu+aH57PoaCH3
j8bxnN+uy8x9JenehZ+MZ+84t5tAtbMJEnLKRej5Fhlxgs+ovdos6+1dhk8z
ro1UhI2en7/Hs7/G5/XSUP8hG0wPUa68fAWme+6O6MmiYvn77SuqfFkwjJwe
Wq5WhE8P3PKzpKmYV96ycW0oC9f0nspwThaBtoepzSDei9/kftxEcj9OktyP
03N/zi/8noXFkdHJFiolYLwYPua+gQrLrbOjP5gTuO4a89IZRiXkXPvu+cnQ
kHK+/fNFov8YByqrU4n+s/DMoX2fiP6TvTU6wteFA5nyk+Oey1XB/vBZ39fz
aFDp+2FfnEDg62ceNbOKqjDxiuWazZY0hMdHOwUTeJsvLDV8z+tq9PbQZnsQ
eHtbI/WHuDIXPnMe4owwA+WHVy3fHUH8XU+GeOIeDpZouZRdkqmCYkPrTmPi
97eT+2vOPOfVz9nvHc6q50AloJp5yrQamuZF90rcaDi3Z5zvRT82rAVWfzvh
Wo6qkzPPH3tExfRIo8UvnLth32g4QUD1AzrXTXi8pjMXKcrVyyKvdqHzWNXG
3ROb4fKGkdpzNBfq5D7UQ3Ifypvch7LT+TJYc6Ib9yM7qgY9PsBbxCp95RDR
t6Iz3Rr2cpE7bZ/aVyoDwWv5LbnpRN9+8rqffzbBl2/X9Ky7V4trzybaHZtF
h3ufX1+4JBdT/bJ8aF3VMEysXu93YXRf4yfPvoa9wsG4qo3EfArkflEIYsBS
5vmL2CQaBJUjRrTvcXG4b13AScsayD17WGxfS8NlUlcX49HVl/rrMCPzuJiI
+JzDaTVoyagflO4e5S9FNPN5Byt60Or7aY+ZDwtdQn6HpXQ6QJ2dtF+koRbv
UoNHEgkeRD25OcAijYvZRxT5VgXXYE3qnAOX2mhwTHH1jP7Ixdzz9c1nhmog
/Lo24dgPGgxtryyvO0jcr/3ScMMaBnZelXClZ9KQsLJozsnDXLS4LzsQ3sCA
bkhYy9Ms4vqpfsr2XkT/CciLqnnPgHKX8M+/zh+qbrfkn+3NhbyImWp1MzEP
9hHhkdlj6yRj5QrdXf71SP0gF8yHWvbterWYtkE7qWECHdLuX6obxDvhUG11
4JJCA6b/FLzwMHZUr9DM3zs7IqoTq7Kaa9x+/vNzQUqUriExaTYc1+v4THSp
HPN6IXfXZjvifQnMeKbyieCnKV9tw6yJ9+WVMNeFksFB04drMi9+VoFxseh3
8TYa5s05uvljSCdyCjreRG5shNc62skVRL+KEJu5nF+uB36yX6PNz37ERYGt
eyOs8nD/zbwbcbUcOCpLLxu/uhp2LJWAWFca+EdM1eX9OTi2vC3WbEsV5hTU
6T/WpmHKSOiVhKtM5MUd7512JBfOyxPtnt6iQOpkmtiWyyw0tc+fcuFuEQQe
2esuUKUiiswDesqTBySSGtT8ZS7BO67Rp9AInOHWVHFGdyfxO0q/P5k8Z+Kj
k8XjgWl56BTrt5iQRODncY2Jlf1MdBZn7TbfkQ8RRlWIbBkxHqQit4lOrL+n
S15d9srDe63456EEjrVRybt7TpeLE6fWvLMDg+CLz5bOvkPUc0ZxYNF+Dg44
amZULapCzsUuL8pCGkT1im+t2c7C6ssaVWVnChHYJzu0aSIVOzbHDGseZ6Ll
xetvc77REeY8K1I9jIIXZUdSf6qxcLvDyXpCYAHWzOqUmdVDwe5ooy8eT7kw
3dO/7bFXDSoTIt7otBD4ymyf7YRBDvgGzTZa3azG3Mi7ZtP9aOg0mM8v0dIB
p/FPn9lerkeli1CG67nRvJvFZN7NLDLvZtvXutKR+ywku+4oSPlWhJ+tCfMd
FlFhwrVr9X7OgojwwLaCdcUojVO+6a1Hha3K74sDRN+YH3JnSj7RNxJ0nRwM
PcbOtamd4bfGq6wbt5asvdOu8BGP3JWKKCp58ImdtGEzwesL+FXPqim1QLm+
r2ovwesHudUv2/25MN7+a2/2VwYq1s3W20f75zk1L8bIqZEmc2pcyZwaFcH6
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
Am3Sf6yN9B/TIv3H2u+sCqN4cWErGT23qYmBmGnP9jpmj+0nZjH9/fbdiVyc
6/o9S35vDTY6iCT9ek9DMOkDJsfjA3ZnS3XV6jMEvprpmuc6/v8p78yjqW7b
vl+iiQxlTqQMJSKFIg5SImUuSYMkyVQJIUlRJBWFNIlIKRoQFao9mDKEvY3J
uCczkSHS+7vWfe7Lc//W2s/1XM97P+/9rPX+e67Wbtt7/87zOI7v9/x8a8Gh
7kzmQBEJatU168n5/TBlRY7QSO0AiZpvZamaxTCxwCCuaLgX1tx4ueq1RRvM
Kknv3q8903fvRlyvMhzXawRxvepxXK8fO0UzNnX3wvXLv2uStvz78hT+Xesq
Fe4Uu80sgJDdFROm2L5n/nrZ54d/9On/qFfNcPkgXN+zlAqHWfCKdyr3wZo6
sGgscODjIcMF430Dj750QebX2JQo1wZIJ9s+8Agiw3PE3RJE3C2uhf/M3ZJ7
FWJKmOqG2bQz77ok2mDfJhfd9m4mdJ4NHu3zpYDVgqCpL14k2HVBy06liwnS
teJSAV4UWM7Xubf1FHZuLkhaY3aDCToyHoG+YTUwEML/w0CfBFP3n003drOg
s2ehrqlwHXzWbOmVmYWdy6bLEk9bdoOz6vXueR8aIUFoo4x4ERm+EycNzB6z
QLzVI8bzYC0I77Ffldf4P6+fKvwWqb0sxgLSPk2jFz0UGGQkUX2uzvC1KnF8
raIH67+LbmXCs5UR6kXEarif292WJ0oC18gpTYl+Fvhm32ktkaqDghbPL92z
ydCKOFrNiKP1EXG0HIbfcDdhz5c8334dS+z5yq9qCczU/A/fSwBXyOpp7PxZ
n36zcMWM/6EqjKflYUEfECtkFDcZc/bh2AfCHe8pJpRatBA6Uyhg1G/XFRI4
o5fhcxmorJXinruYIC7UPn/912qYO1Q72LmUBPOWi1o3e9FhX5DSchfuz1BR
eYOPIUIEXsSnKkV8qljEp6KjOvYtro61HnbmVzxLg/4CWgR9hAyMrhO/5K8R
4Da6l9eP7uU1oXt5k4g3ZY94U3MQb0oW1cNOqB4eQvUwJdN23nxtBqRDrpKQ
aCX43Z9wbwohwne0z/ejfV4E7fMxvrXSe74xgPJbEJbkVMHi75cnZ7cQwQPV
1SWorr6E6urwAzmHndKYcGS2wVhGWQ0oPw7/8NSMBJvdLzld/sCCFYuoNocT
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

                "], VertexNormals -> CompressedData["
1:eJzsvHk0le/bPozKWCpFGZIilQxJGqhONAiFZJ5JhkoICZWSoTKUFDJFoUyZ
ZYjLPM/zbLO3vbc9krGEd3/Xp9/zx3e9/fGs9Tzv+/zWevY/51rHutd97/u4
zus6j/O+7vvYZ+2kc5OFiYnp1mYmpg2MiJGw7NpffgIuNp5yzyZdBaMn5PW1
dTo0n197sGnqFNyqGpCtr7ODKq1fG5YY+PSm+Kw1sTvoubpv9JUpX6i3xJhE
M/AHcTZPX3EnIYzO8zQRpnh4bhpnLLtIB8mririxng5UduZ4xytaIdCw/HTv
MhocP201wRY+jeaswo2HRmtBw0syaNJ5EmiK/sVDzTTkMBdk1z1YDxnVazu5
tRphjVwd4CJAR+tfXMghL1vgWYvim7wtecD0//qb+R+HXyTqfrRWs4K3Y1l3
7ZZswNNA+/48g7cterYGUrT7oCexL/TYzUdQF2q6L5WB13QTxi4lPgc32+7k
o9Fv4RdnUBtapUPF+Y3bqy55w5PsPfW4gQwwzNcVaftBB92gXoLVyUr0Lkt/
WKy7GowLJT43XaODu4RVRqTZFGJ9pX5a7no3qJsXhFnVTcEd5ghagC4VuesS
cnp/dMOGkiwuYfYO6BHJ0hsdp6Is7+p4u819sMi79+XHS8WgIWyPEZGhoks/
cHXxe4agasl54KZx8v84np3npX4GZj6AKocHgUGPH4CN6WHnfAafNzC7tSRP
vgZS6xeivVoo+P8wy9yxRocOdj/a0dFPMGVWafs9/yPIx28lmszTIWyI3E0P
zwPla7ppRszfQDFmw7maOgZ+FsejEvMZHilbS7DRmoH9UsTOTFk6RAzrueu6
DSIzs3tNl1xGYNdabczHrGmoSkHBm7aRkHI3n82N1VHYsXc58SS+F0KPuV0b
zCAj6U7u8YyOMVDgITKPylZBB3GraHgXCUV7xYRs050A4p5Vvo6g7P9xPLNi
nt9SdAoCV6YQb2W2F+DipXr8M4NP34SROc/OBGiQ/2Vy/3IMBDUtWaYv0+Hs
7cqv7bN50GycOsGZkgkvfwZgtAbpUIbp65HnqwUz9Qjugy0ImtL4UpEWHTYb
zb1kY22H/bktmOg3HZDUz6J6m0yFK6y5/uzXbJG0aEVFbDAGCp3axq1ukMFJ
Vv6NuBgW2R0sb7G8iwPujWtSY2tjEH9JQJWAJSA/7EIJXRAH7/afeSi+1AzS
JQHEA1cIyJ5PUnkidQo2HOE12hhfCmonRYOa2qfQnd0cp5WMCRB95sf6JfX0
/9941mcWdaqgvwfMHUvdslsRILXh0T37FToc617etx0yYajbk/9UYDLsWmTj
NyczeB7r6jM6WQGPZtVybZ7nw/Jl9s/Wn+gQaJmRrOnfAWCpFSi/oxq6RzVc
PwXRAL2nDF88NgTPcRFLJq0dcMeqru34IhmEZ5aFjA72Qd3nkI17uceAEJLt
fGt1GhwuhpW8MW9FqNNxyE+CAHWBnnqxnTi4zyb3gnVuAu3YkJ06z0QE2iuC
LvvtPtg5Tdjb7juJ9r+7GtppNg3dU49eDsU3gGybkrW+6AR6Y2OnVNVOguEM
U3MjrlJIdJ2R0AkeRy+fBnFpN5Bhn4XDUOTeTEhSuZF9UW0URWgPnqp3ogA3
k4xL7K/4/zKe85pZjPdAMvh9v1jWRkiArCm2nZ6MdeAJB/vrCvZC8D1uJLkn
IgOyL2FXa3vo8DmabU0jrw6K1cc846e+Ab9CS3azER2Ofwi0Wa3oheEPDTvv
naoGtLh+1qGAChlXT86f6MeAxr3UAdHOFogXWfoif5YEOD89knPfBJhrfP9+
+V4fOEleH3yxkwjll5WL7ibVgl4iHbLCsKAU2GBALyWCkgKGo9i0B6nf/nrq
rB4RrtZ56IgKT4JAgBTTCfEhlPjCO1kDkWB3wNWSqvv9oDyRseMlywAS7Bgw
PF7E4M37cND011aoe3dyn+e9XmR55IaDUxsV5viPHx0+UAWs+McXXsZ2I1zA
rxqkT4PCno+PXKsLgP+2w6Ls1S6kWrx8eyWeBkyCrzTOTKTCJY0vX5ovdSIX
DtPzW1tosOGpbtSHtL+PC3FcoNu6JhNKna5Z8yt9hIANrl+pFDp8p447WdZ8
h56Qj8oFUunA4dkU/KiCDmO6l5ylxprh0F35Gte5PNB+SbZc2EeH5KXv7t0m
g6BZu5RDWy2FBymqXMtHqCDNZ/0ulh0L3bpL0sZHq0BE3Xffh2vT0Nd/m/P0
qSkgmw4mJU00gOaOk88e7SPAhmI7z4wtw1DFgX12MK0Xzuv6mNbhSaAtvuWY
fnshuiaLTeJwx8Bt5u1VERpkiJ+WZmM724m8uvl601JwjOsSuzHjeDDb5U/j
e9KOvvlNK16hE+G02RmxnfcmIWz7DjaMYwMCq+bHoYcpwOHP5pDVPQzJi5MJ
3x2rUcXXW5EGHDRI2nimQLyrGzqm2ooEvlUgFSbv+LAVGviuoyfsWs3gENo/
OVlZjuIzWprXHemgsGQ9qfWkCvjHrE5luJahJo99v999pMOJpE3XE8aL4Lng
c5/g9Wx4FhSCdf6xq9xoK88QmUqHjyeZKQr1CExyrV5/qthb/k+kg8MBu/CM
xVaQPa2jZi20t/yfyOCfh89dNm8IWpskmbbySpX/Exn5Uj5fEtyIhZ2JLRa7
xU+X/xOnQUJ/2Pi3Ev7/jP+TM0ZNtblreLAnKc7mkcb/A5+jA3f8d/Jf8+RH
8ek+t3MtaJMwV8XOExbl/0Q6BGw71U+/2ITKhNc+v7mmVf5PpMPz9s22c/0I
5T7MD7Ws0Cr/J9LB9UcM39KPj2gjbmsv38rt8qv3ks7c+EWHkoOlse/XkiFx
3X6r9c/b5SNhsdudGXVqqquXlfdLGQTk4LN2DrmX70vOuDjQQIcZs9/h/rn1
UMnDG/7os2u5gx/Nz/oeHdKUDSWz5tPBVDsV1/eqCvVu3izBHUeHlnIT5quz
pfAkeP9Xt3u16DnZk/WFMaOuaRt+CvZqBqdL0yYnGXmh6iyf2pRCg1tddxrE
Dw5CzVeVLd6xTcitsoarIpUC39gr+cMWJyGLpXNf1XQTyofdjWMTRDBWxe9g
05uCT2cLgwlpLUi2t/INTwUe6BKiUguYEfi0OrQ5OLMbxW4dfLjWRoLIB+vN
HELJ6FW6Y3yZ6CB6d1RJYvEmFdRsMVuTFduRbPZDPp2MYdQXaDC3XkeG8H0C
l4+3tyLCW2ZLl7PjqGKEyziQRIJlQfETjrm1aHv11ZDB1Amk8UW8REuEBAu6
Z91nwkrREFz8aJOFRVsWQp5tXiOCCNN9/oA7X9HjQDn2sagpdK/tUt3ZFwSg
eZsfHWiKQhyZ3uydpgTE7aim/G5oCmZG5W/QqBoQre9lUj5HRPuYP+Xh2HFw
8lLWriFrhp6Y2aPTJTWO2L23dNfQyEBt6E0nZOVCvkm8kHflODL3IfQrZZHh
7GvNdssDtbAn97ucDisG+YcJUryOkuHckSfLx5h6Iebqj/fl18YRUaKmh3t4
GkYeTqVvbcaA31jtiFPjCJJlfnVSTYQA71wPcDprYqFOkTVT6Mkwuvtl7G66
zxSotCltE3MfgBHLBlncWQz6VBn1/nAhEQaSmToSvuWhds3YZZ/hCTTHzJ3s
4UyCzDqM6vnFDmSSd3RiLnICFa2OyUobTcPmbVeERXEdKN1OxAsoEyjugPEd
osg0wMvRRZGQZqSVn/pGw3MSPb3nfdv2+DRkr3VI8SjVonntgJ5jvyeR+kqo
UAkDD1LYrlVztgI5tmbYpjhi0Va3movd/Iz7KqIrpLEWo1LvDyybu7HoQbvF
xhAKEdaPSIs6B+chpbioQiVZHDq1VavwQj4R1hxkRcKOJMPtK9ln7ueTEC5P
v7Pm7QS8er4kJTqZC8nBm+hSXdPoYMmT4sWKSbBRZRoKcKsC0RP3E0QLiYjV
p+c9vgULvSd3e7KtdAKpVvdTCAsBJYr6P+M0wAG8PbCxdWUU2MozTjmexSFv
HpPEme9YeG7VKdjONAnBiY9qhlgm0Ts53S0fLLEw5X7rPK25HzZs2ys/KYpF
b1KWdDK/4aHNomwX/0IaCuIVbjp1E4surLxZe3RzGhT2hCV2vmlH7iHn65JT
JtArygyzs880xA/R8j/bdCBdnicLeGcMEgzkZ3ohRwLK6W27GoyaEbub2ybF
6TFEcVRuUpckw6PmX3e1rGvRVNP4kjNpBLlq++uQOBnz8d3nJRnXCuTC+XxQ
fHwI3X7F/mhDBQWOm7iE9JsUI9rb7wNK/QOo/RnXwU06VMh8aap6gJEPDx5r
G70d70Mn/a81TTYwdCxv+DLTYAUsKfSFXX5EQ2IXirdX+3ZCw4f6VVFyNeQL
Js7gERWVVkfef2feC8oqkyIi0U3wjmpb8SKEgoaDZjyHUwZhduTJbYtLPbD2
pWBV6j4JveXfr55WOgqsB9i7fBfGQCrtJhiQ8MhdXcCNRwADN82YtAuaJqH0
8qLlJzcs4rynvXcv/wTYi+aX4a6NgKXPwtYqLSzCb9PonD89BV+SnKmF8SnQ
sOh5/GzbJNotISakODQNwiu4sPQ3dejDlhExvoxxdNYm1sVOgQwxwnvTCosa
0bvTqxbvnIbQk8snv72/QwGe58U/nu+qRfaue/Nq1ntRkAuu+sE7Bg+LTcQW
FYSw028dKvi7UHgfzT7ahQYXNZ+yKJoWolAls9cBD1uRgl2rls8GOhSG/LQ8
mpGFeq9bnhIbqkcjxLy1l5aMdZv0Pin7XgoSO+Q70StfjaIrvj6AGEb/G10x
0326E3ZZ5tFtfGmoxq9HWcipEnRsTOTb93QDD5eHkz2Nihq+Xj1wS6kBxD9c
kbO60AcenrlBFb0UNFgd91L9dQdUjNbvThcega1XujNufyChpVNq7wWzekHE
ULvxdsAkOOA4vUKj8Ai3lPHae/cQ8CN/5tTwKXg77n216/Ikoh232fpzZhSs
LZ4wW+pPwtu62oCneyYQ6w0ettQxLGj2lAtvNWqC1vpnZRIqGFQ/EONrV02C
tfDYrz4/M5HjBrFzpw8PosOu5MGdZlSgXmFr+TX+HcUPXt5SYdOF0vfxhDY5
MXiTOlUffqEIyeJbCjpDm5AkV0vyhkN08BwQMk/fkoMaNl8Uv7BShY7Qo66w
htNhVc6GdD8whcFj6gehhRKUO7Gc59lEB6Fsoma+UBz6sWoj470jD110z/Ym
TNGhU/1Ej3vOG3Q4o6A3YC4NceS9Cb7EKObnnA6HfGgeBkNZKdeBEgoi80rv
Cc7IhckkSNDxHwNha/HhPiwZDaqd/7AuWgb8diendbkmYEWgSNPgKQkJsjAo
UqkDRelDLbEJDP2WIaZx8wcB7frZuLfzcAdc1yfGJa/iIfie0Xv/11iUYeXz
+YxCL0xnh599zNAdh49dVWjqGkX3coJP/WIeAoUiMzdaOx6e2BFKI7cNIc2c
hmHMhUlIFK3bbYodAHXTs255pH5k+Mpqo/MPEnSknbl+0ysP9IqmNM1WOhBN
/pVuUSUNvM9ipOynI1Ev+fDBgS+16PpdIsv7QDo00X5pXnJLRLMXzGLYpUsZ
/LR+J7Yw+i+7dyP7+aNRxqJ/cM5yNup5X16gxejLUowqfXQKXqNF7LwG9UAy
SuIq6yUtMfqy1AC9Bjk/VPXUlMSkG43WsLLJuN90eBwn+m1w0AOVHHnzFGP1
GinILXN2MPrrv+klUZPS0bj7U5BxPDAB4ghI1mLuBidfHrCHj/ErqBFgYfxo
9faIKVRfA8avmhFENbn6h2sw9Fr9p7bpt5PoxY9P1bdnGkDaxeeKtjIZCIHq
BjqxI2hvkEVj4uNO2Gkp+8LzEAU4dTdr52n2oBXDSxoHEvtA5VFH/oAgCc48
+yxHMexA5sLbz2u/x8COCf1aJs4J4GrUzxA834J6WXXPcYiTgGe7F1aGoaN+
PlxoI9+rQqpCY4UGgnRoGCyKOHMqGQi8cadJZfko6pipEvMYHQz1+n+yFzoD
P0v8je7eFPQjpT+nnsFbLEXfyQzsUcC+Ojmune/RXum45qerdBgpj/uWU2mP
Fk8HrcgHBiG8UtfiqXU6fDoh7E/2tUQ88bYez088Rms8nNlVDDzhjLiT5p3r
KKrAsEzprTMSmBk0pDJwHwfS52367eh16Kerd+92Qf17pRtKCVSQf7Xvm9mW
aVRNUI6bVxyEpoiYlhutYxB11HTlF3sqyPmkfgtd64NdHQ8Jj7uocDXFt19l
4wSywcnbeeychKOylF98Rxn98o4Qhw9JPUB6pDGIHvSDbXCpsjeFDOoxC3ff
47+jjFXV1giEA8OLqx75u4jAJnvgUZESFm1Ksy/Fn8FDemZb857jg3/Nh7cs
Lz6NWmLAy2xTgOmFHhiyL3uxK3QacENRl0nRXXBT8FHjXkbf2f1+uGB8kgja
K5SSR6e6UTJbnab2YSJkfY3VKEqZhNjatO36XuNIpCH+xb0P01BJ/X11ebIX
oo67Dgo+GETedaEpzapUGP5hYeM8mw0qRxqr+rL7kX0uE8taHhWeYoQCWjd+
+k/343KhJLfVqlhGPXrHa2qChQG52GsKHtPw8vqOA7eUu9FhXPd0BUNHquZO
3je9g4UNP51r4wp6kLh7Hq4fSwLVZxZPfvQOQ/eQquiD4U60mSyer6hABa+Y
K2TJX11Q2Cswu32mDeXuPjCo4kgDh5qh834NDaBTYn5oeaUZkTVJsvY/adDC
M4M7noJgKdUaZynehLoDFHpjT9OB9IJZWXRDPhxTk+sdHW9AdlvnVfIY/f92
sSe7PhxPheqDu1N0okuR4qihoWXCFFj2DvNw6hEY+r48d6UsHfFfGWvkMZ4G
vmt4PLsrFhzuPbWXTY5Eum4o5DUvBX6fqQ3VSBqDA2rmel+f+SLIEp482EuF
C3m+yqoH+uESq/Qdlx0mAAtjOMeLtvBoadh64V/5rHY0I42gDefMtzccrzeC
Eu8Ctd8MnG63n7kiJBftfGIbbOqYCyK/tj0U76VDuYi3i0PBKNJydN3OPFsP
y/7+7ZfzyXDRX/xQkfgEWos8yipaXAksUfUCmikkOKnbEx/1iYJ4B0/ulJhv
gxNivHzX1/ohuKOhq+1JPzpye6CG16cNuuY2J9+opcAoTbRLMoiK5kSOzhqt
1MHlDkOOsLJeEFCTWn6oQEYKr+WeZmzpAfllneM5v4cgwnE0tiaGhvwqdXuv
hHXA8tfq6/eOV4LZM6GPeRMU1DumzB/ONAj78MvJClL1UGdJoNab0NCP8wGb
PendYBZJa5L/ng4VemID8vEUVPixr5MuNwJqQS5r4UP/9+wX/A2Hqpmk2LwJ
pOV8Qn6EdQDqrb8In2whAN+F22VvJEtQhAW/54poL8Rxjt7KYKXBb/tGb76N
FLQ/503Llm8DIBhU7cYZ2QXjfbY75qumkNsyW4VSxxiwEDyyInMmoEaShVXd
ZxoVanuYP3CcgONryy3Yig4Q3p8WfLVpGt3qEhFfC56EXKxUFz6/HJLtSg8r
+ROR9Q2aQosXDp7QZ189kcmEvsrv/iu+TWjyWW3+taJxSAr4tFq3yugTH+BV
row1gFAy/wH52n4YF/ScSNhCBTkFC2HcMQLa3t+R2lA/Afu/Gx8/t2UIdFvm
Ez2CetEv790JD7fhoOFttc8mbzxEXMqTnW3Do7dp95n0lrAgWtcWXfy057+M
54UaY4Gs6WbgzB6cHhYoB2ElofpIJjrYrV7MPy4/CF83/UbmJxqhil8tEFNC
AemMDetRRmOQcv2BkO9EO5w4V1qTuokMBWyR6zsCxlDUaFfdFQsy1Ju7a0iP
N8LDe9Pp5KphJMW26eNUBAXCoq8op+PLQLBw1nTqxRAKmaFceLpCgW0ezrIL
QYWwQz98m1/gAFqP7rTzeUaFOBWFc3S7VAh1vPhsgdqHbDelzrWMUMHeWmwY
6xL71/ta+1W33auwE2b3GY34l3+HSsfTLrwvaSBUs9VG2m4MOoasLo9V18Bq
vMoJnkwypB80/rx10wQ0v8nAruv0g7sH9SDFnQg3emWrftzqAckTWyZeXh4H
tD2XPWVlGox+hGFSmeuQ1Hs/MSnGfFTZfH54I5FRB90G82WMu1E9aW/F5tMU
0Ao852Ys2g9X8EM65tZtKKhxasbOeggEmw5isg5QoLjYOvjMiw60/455ctAM
FVbZK/Uzmtqg2VxxJJKtHiUa+vBn6kxA7r7+Zc3LJDgeHTNw7FIrqjd2DRNn
6LaRvEbX4b5q2NDTiRuOqkWXZDTGrgMVmJKE5Elx/RBhzV8kv9yE3u+4OOO0
lw4v93SqhMsUQzvHWcmy/kqUfpJzm3oUDa5cZTVr9OmAh6Knq+Q8GpFMcmmu
yBWGnrihkPGlNguUuTzL3YYQ2lZ/yDgN6KBXTfU671sHmamrdxXXypAQ1dff
MoQOaZWH7OxNysHKpueW9mUc+OVZuY+4VsBR961ScvZEuPDrTHLj4VbYVrbb
Ja/sX/ubBjdCr9Fg3tXJ+WncO6TIJ35xRKsTNIILJQpaaPD5JaXIeaUVjpSf
Ens62ojofBbvDt2lgYfkDVKNRi06tbZW18nbgawH/Umsz2gg+7D3MsvBNpR5
7XzZM91u9DQ4F6/wigrpggO/7hDrkPQ2zUPP0/pRY9JGjRZJKkjnf/25+Xce
GhWjf+N8T4A7P7UHlj2mgDpoSTcbKEafcw6ZzcWNILE6F+8PzhSwilhrn/L4
iMpuPb37dZAEH1nv3Gk1nwDZoVBCSXgCyjRxUCDSMGixL15zw34yeIrJeAS6
hqAN7g4GT7cz6nJTVPv78iH4qF1hyvL5HWRx6vPFvsMid7Z9O7SuTENL7w9S
TKQnKuvZtnHQgQadqyUDA1PdcOXjaz95wSxQl1TRT9iLR+XK9m/6OAig94h/
j65xITQudPRz52WiTdbNQaNddCh29CwwCsiCp0e0+OzudqOLwiFrK3cYdb76
VH2Rdi3Enq2YuH4yF4Foi1ToA4bOZ+H25OCrBGXlg/3F5B6kwuJTa8DIR4PK
dHONmW6oU9FUqikvQGe+ZKmLqdHAZTiNo1WqE/SP1wr3b+hDTQFXt+1upsDd
D6HFC2EYqB4MO/BAsQh9rOWnisuTgY/9C6sTeRRSSlXbOXp7EenaEZn63SR4
aB2z8PU6DpZYjIb251SgFCX2I/tMicAVGmWutWEcJp8Fnqeu1CDsrznb5cdk
WP9tlLjZbhLYNp3ENbv0I7bLcSOu9gQ4uL1s2LI1GF2IOstF8WxFnWcFuNf3
06ErwCPp1ZZa4A5P3FelN4ai+evnzb+SwfDr3nWe1kb0DBRYMXswKPUerqZ9
ggTfXz1Z7uTrRL+laJnHSBjEcxr3YlPjNGO+uGleJbcgr5cKpzSkJhHG1l1z
+/VpOLrxHvoQX4suOmyR2uyNRcQE84DdbURoOel4acUjDyRcpo74aRLQ65lq
ky9NUyC132D2XVoSfFRlmWtk1CWcvTvXQUcCEN8GPckoToLu+yW8Zeld6Ju/
+2zCWxrYe98xere9GAbqrar3q0yh94tA0SgkwEOSWrfs/maIDLzhaXsfhySa
7xH3phAA06hafPPqIHg9l2PZ3z+JSg3SD796hQcuXnNz7rtDkPgNbZvlGkZ6
lfK6qx3T8PHgQNf5pGz0OCo+ZK1yHJVageh1hi4SjDzbeaO/EO4Lu549Q6Eg
AqeB74mGIXB9dsHsakYUyG981B/3awrR4/Jqis4RYET3FIfA8wpQN/m6Tw1D
Rjm0R0vSOmPAZ3p39nMSBtZnOU6s1GNQGMvo5bw3U2B2wHzkY1ol+N6zFb7C
hkVfwjvX/Q2ngXnYUJrG14RCRaqxBVaTaJVrZ6GN+TR0b/x2vjunHCV1nEon
eWEQbavMU67DZBjQCq7bZVKEts+fY61m60ZmrH39L2xpsODM03riQhEaXeNT
FeLHIGYDn8/yj8iQHFXOLbMrF7lwRzvhnTqQ2ctWyU0DNMjpG6zYfSAf9NZM
9Tj1qchzk076rW2DMJDwetqpFwPpEvp3CYRJ9MBPUfhyOBZePCuqeBTeAKOq
jhsos1j02KXwCLsKEbTEmy2MGPUg9vyhzJiDFHT0uhpH2M8+WI++WjOsOQJt
Rb7V2SenUfPQTSsdu2Fo+mqXIDcwDtnTPdYyMIZKMjDnYi8RwFnSRPXwCA5O
nI+6nuzbg44REuuPr03BBQudaVEJBLtvxJYWCg0iyQMXd1Yw1rEgtIspJrcT
+k+3deRKdCAcp+/v4nQqTNJVhJz8J2BMc/MX/q8kJJ+31+6IfO7f97slY3sP
/hoF76qYt+SVLnQk9ePt3EQSyG6Lf7c7BQ8PJvMjo3+3oX1pEt6lZ6YgEz/Q
I/OmF3i/S2fNpdSjRxMz1C8vqdD17iG2c7MTOpLQWHdaNgDZWoS2uTP0+S9Z
Y/FHYUaofFPVs0Cr+8iqOVV0jIHzbgxa9k08C1s0vKZS0o1h08Z25lUG/vmg
urO8TSmqdzAK1IlIg6jd1UzDtXRw8VOy5rzVhFx3cHHV7EAwkzM7UL6dDlv0
V6svTBHQuSDJx1p1rSBx7lrcmxksHKG+mwQcFRmuPY+bieoBJ5b6y5K11fCt
t28MF0VFVs9POwWv9MOxu60GW2//97+HIDBiVn7Cg4y+fYvgedg4ClQXnwnh
1GaQ2NF78JA5GU3a3de4ewUDUzm6OoOeRVBXcvqWmCQJXWiSTlw2mYR+8HrP
rZHy1/NjTJyHd2p0Q3lwat/a52pgUww/Qxeiwb7D4TmfREbR5Y1Pbqtvo0C0
T/fgREk1ZL/Y+dultR/mFW5yRLlXwpXY3+WdVlSwy7nON+XVgoiK/vGR/pOg
rOod2CYwDZkxUUufpDrRw75gyXtDeBA6fI5rIgvH0H1hLGYjzej8/toB+xKG
XpHLKg88hGHoqIhFhYYx8Fm+P8ixVgtDnHPPF3zJILJ4fVSGu+M/9sveTVvM
s/+iwZJfxt0ophr0f3CeuJoGkxg6lO0UOcsr34ocw66jiYNa5f9EOqgufd7S
fb8WXQAlLaZgi/J/Ih3gUM3Ckyf5qMWKnXyeYlC+TYoLlzVFB6FHWxoPPXKG
sQNWynPrduWHR/uY6Yx8m8ctF91+kg/7R35zy826lIfzJgtkM45nzesSf69e
DUuP6BJ+ta7lP2R8tjt+pMNr4X0bORrywLWghs14uRpFsNivTvrSwTwvN9Ij
vRqCs51fnVioQ+ZyV+YVdtMhQ8vhGQ3TBb6PBJStCxuRVkvzhxAcQ88+mLkz
TByHwDbpQzmLTSgzTn76EpEEPw7nG8s/xsJTX/bIYf0ONLB670YXKxFyv9v4
Nj1sBCvhG6dO8fcjJr6d7F8PUsGhb0xJ+ns9Unl5Jv6a8RBitrjjuCeEAmdj
YzfM7GboJM9YZlm9UbTgJ3VNXZUMuwb3Pdqz2IjeE5skFD5ikN+twssnQknA
toun0C60EtVcP1SlnTWJRLn8xkejpyG+06ki4d5ncAloO6bnPY5sB0uPPO4i
Q6h02FHLkO9AmAzGhS2NI5sh9cNDjPWWdlA/jdu6DZ6dU1ngxI6jyuadv+9n
kYD3tO4B8WfDsIvVI56mOIaMsUf8FD8QoS7tCTW4Ox16KCsamy6TULIPq5Cx
5CQUnt7CLaRYAhXx3M04zWk0urVz5pEmFnwyhGXiHvWDsvQSeZFnElnLW8Z8
ZdRBmlaQGrkzFyXnnkkznZ1ENFFd/tmv0xBU5/X78sh3JKiqZNo/OIj0OpRn
RzdTQabwlmFTTgG6N+Z0aq5lHAlUfs6S+kSGwx4DB4Z1CxGhxtG5baAf2XhN
Od15TQWbXT12N5wHocD+NIH9BRZp8wjlC1CmQOBDlLVqbD+8FsVn1hJJKNsr
dWGjAaOO3BHKX3s7CQeZjmsXBg+icabbT93y8ZAfmLU7db0R7M/Wa4/l9aCm
PcpHxt9Q/zqvpWMLkq962aFyZuG59MUnKKFi1SWLkbdSX18VnQ0YRgetgktj
nfDQH1s7JCw3CZ1FDqlBkr3oc72n2EXVafj+pOaTlD8GNp+lRd7MbUWyilID
dRN9QJx56fr1BwUCQ5I3Cns2oxs9m6PnzcbAaDOvqNc1MogRO5gHlKpQwqbw
JZWnWKiRObbpxjwRTJc/qkRZNKOU7KCUKJtexPOT283Oggqvhn0MkrGV6MRF
Sc/PfEPIIoykboKhwDfsY6WL0dko/GXyqcOnxhF71Vyh5zAZAtxU6x/l30Ut
LESdgPOTSNPf/kT8JRJgNPanbW9MBqVVm4TnGBx67b+c+/kEEazsokoxFtlw
cX+8dVnAFFJMkXAtjCDA2+weQWp2FZQqPR1zpODQT+lFiy+VBJi+5ftKg6Ub
DmHzdM83YdFO67xapssEyNBPFzlLLoGjGQVX1VwoSP4YU4tr0AiITrzsP7i3
G8zGBa0kQkZQTfPDvazrJDC5X7Z1WK0LOWjZYameeBDw2vw1gFGnbzoc1CTk
NaK9V9rmdvPUgsZERCUbgQafrrMK6Ji0IJGc0Znqcy3QH1Our3CTBpaddI8z
p6vRfmsLrWv83aC9f+C3zmEamPaV3m7diUPPY8s+na8Zhg0bz109kI0DclqB
pUU1HuXcHMRhUjGQlam5qUl+DERfqyrQ3DrR/O8zTx2PTcIzvWIBtV6G/iRc
ZC1mGkTX832LZV2m4IB8p3X8MRwIfn2sVstXjZp3PevmEWPM8/xyukrPBAQs
BX6ITC9FMhEXNOjcfaDU/q6R0EcFq9GiE1xjZKTp4kVslhiGQwvjntuL2/+a
n1n3Tw+fliGg9NZfXMEjjDq1Q20bebQPhhV/93071oFSXOiUtOwJiB+uPjtj
Nw1b10LY5nY3o+W4hMVABTxcWeF59XN9Cp7qe1heNW5A22f998rf6wCXHcwO
Pxl9IrsSG5taXzYy6Hr9soenG00tb3E95EmDseE7R8bmfUH69rbgQy39iHCC
6fK5fCrEWqdKihnlwsMuzucsjLrX+sTGl2hL+S+r4+wvJY/yO6sDLa72R+kZ
Y4jLGk3413NIMUPLrM7uPrR+ztNIc0clBOqU2VZHUEE43MdYi5HHWyMFyG4d
9cCrKOuS6kuACw+DKTX+ZEQq/Fk25N8EYVJNJou9o1Ce830Cu52C7KUMb1XF
14F7/JDD5zcjf/0/85iZCyeiR5H+e9FYtsJuEPPLHimKJkHmlZq9PXEENK++
K4bFtw8STl18mOM4CZqBKz6qa1UoIGbZb9B9CIQMWOmGiALSSVPbbGXG0MMW
8YtdFhg4oGu1c/kXHqrMolcdadPoUPMBygVpRp939XyZ648uECF8qbdUb0Vx
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
GrO9OAx+EeCR0lmZh686EGFq9gydTICH7FXb1MKxsGe0LjKQtwkB5uehnH/t
K8R6zGttHoOO9Vs2E3drkJ79xtXqDCqU7I89bp/aCx6t6XNc51rRk4OelQIh
nUjb3KvbDkeFx4pfVs0TGpGilxZTjm8Vej3aIaTIwuCheGpTgmbjfzz/7FQ2
eaVuTgdzOQFupR0t6IpUg6nfKYvyfyIdmDZvf1z2vQqpczCPV3zWKv8n0oEj
QJZjR0QOSj4QNhjjRYeq9a96XCq1wE1sK3juUwvFDoRbiUFO5f9EOijvOfxt
8bo+kvi554PaeVe0buw7gmeMy/OGxFxXwzq0Z2t7RZo0Hj4cfbgYavl3Xc2l
YZJ6RroN3I5jZexxkxAufPzSizwi3Nkvwdp/qAdd8Cpsi9EnwrSvulqjxORf
z1OZnDPd3J2I9v7y48SqM457dy/EV5EEFCaf4EfeU8iIq+z93DAeDMT2yz1W
awRMrn493/EpxK9byVV3GQ8cs3sSK5M6YerENjp+Hx457Ny7FiI0BSPyPJpe
7V0wxO0kuH9TL7wiPb7g74eBM9rKAySt6b/+n50abB33zMYQT3FQkoIoBSTu
b7+0+XwynON8It1+ZxgdVCinxGEoYIWf42/+mQLPvM/lZLv1I8zhrzNmsVSI
2O1Vu2mk6K/nd9+00uWd3YtmdqoF391CA3Eft32tbRl/Pb6s+tjaC50elLln
gPnRdRrca1dIeB+VALvvBWkkdgyhY8eZHeflmsF8T4lSOlDAyLu7q1OehlZD
1ngib7VDeH6OWKVMC4gLi551lqIiyuuIfomMToiwX6Bmu3YD68Bn92YWCopd
8N61lNUJynmZ1qI2g3BkNJX3rTIJMa+s6Uy+6QNpdDFNq+nvzyX+u/G5nJC9
TqzT6HmO3G9fPBZ+jsy/i5xP+h+nP42mDfqX+idR33ZtlpK2afDWfOvmcSwd
ukijkpKOGJSnr9ntbkQGGPg12zqZB8uJL8zaMkeR6ult93EKFGDVVTg/O5sP
G9sFpWMGB9EdF+bYkCYKxAwpv719pBaWd5GflhCxMJcSQt9W2ALSGr6n3zAR
Ia7Y3iNwFAtTVdw25sWdILCrKejiAwK8NF7a6PV9AkqjBepUd/YDUbDC1Y6Z
CLtcHrLf3IMFy+9av09ydcBnjg+QY0mEpZxd6nPnx6GR547X+HIfWGtcqxBx
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
1bKvX2YY8qRuDuWfbgEpsqHLr7RxKLhy31vzZBPc7GfrMVo5BO/4Pih9+kSC
56wKJp+065G8ffXsiswxaHoguvH64VEwfMlnzUpqR2fvuztt7yHBiT1+p+Vm
+4B384f2H19b0XZ36d/edyjwbF/L4pWbrdDxIZZkdaAZvec45OM5QwVT4+m9
b95XA2P2+rI8nUZ0xuB+2eUY+npP4ZJb40AhFMa+uHRaph7FEmmLnT8ngSz0
29V9ZyaoaYjzVrvVIphXuM66lwbyhPGW19rxYBo0I9NfWQD5NrSFpZ3P4Zoc
R55yCQ1+BG1Mzj6ZAl0xW3XNLjyFOHL3vfpJGhB/vHvw/5D35tFU/3+7f0oh
KSlNokEkSUWkDE8NplQ0mkKDShpEZSgiU5KhlAghkbGMmcLLPM/zzJ7sgb23
ohTR8T29PvdZZ6/VOeu71n2vc//W79/3H7ttt/f79Xxe1/V+XBt16uFSz16r
gohQWPSsKaxPnA3ERzyl3Ed6QGbYJ4qYEg0fdJqLfkkywejahxstL0lA0b+J
uo/Hg2GhDa/fITqEPZpvt5ZrGF6pdlUMxafC7vigbyPic3N77kvd3JBCaKbc
me1LSUZnfWufnMhhQ3OhCdexL5/hqu/mj3dty9GTEcdFT4zZ4FkTeNaTJxXM
e9WNGxviUU0Miaw9zIa0A4YyKRNJoKmfQO4IKEEdS5ZIL33DhkUdiq5OB+pB
UrdBd6lxKroc5nzphzAbBHEO/BTOgevgHPhthf5tO/R7QOMyT+H8tjRku/fm
+lJhJtxouVElubUbYj4eFHgQXoPuFZfxFyWMwuXJgBjjcBLwCd8X0eZNR4Se
gWtvd9IhB+e0/XFO+xPOaQcvWmLjKDQMbm9upQcrZaCkU8sNLvBTwURreAXP
GQo8Us3ypSbWIbn24kChomEorDFOz7YchHmGjz0OCuajqxkmFEr8CLSpLI44
ecIdRUr/2rukvBSd3hCafXru7yX7eFV9l6pHO28NPsoMrURDP5U8lENY8NFq
rejOc7Uo42tVUwqlDgkn1X7ntWJB8bUnvD0vilHj5zA5w4JmFHD8Sp7CLRZk
bwyzGNL9gLzsCWZct9rRScWLmYNrWNAq6j5BVXkCW55QB9df6kYhPW+G1cyZ
sEn0/kUbqXTYyhI6tOR+P/pJjCgR15+bT5/5sMRWZMGK0yWZ2au60cNdzK7N
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
P7j//X99H+x9/h9pUevA
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             BoxRatios -> Automatic, DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["a", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-1.9945092135971536`, 
               2.964740938879479}, {-3.2650232396357652`, 
               1.6942269128408676`}, {-1.1849078125614416`, 
               8.567699384125667}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[-(((1 + a) Cos[x] + (-1 + a) Sin[x])/(Sqrt[2] (1 + a^2) \
E^(a x))), {a, -1.99451, 2.96474}, {x, -3.26502, 1.69423}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7281$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max7283$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min7280$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min7282$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7281$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7283$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2558848$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7280$\
2558853$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7281$2558854$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min7282$\
2558855$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7283$2558856$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7281$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max7283$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min7280$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2558848$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7280$\
2558853$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7281$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7281$\
2558854$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7282$\
2558855$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7283$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7283$\
2558856$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[(((-2^Rational[-1, 2])/(1 + $CellContext`a^2))
                     E^((-$CellContext`a) $CellContext`x)) ((
                    1 + $CellContext`a) 
                    Cos[$CellContext`x] + (-1 + $CellContext`a) 
                    Sin[$CellContext`x]), {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$], 
                    (
                    Piecewise[{{
                    0.4851158626411627 + 
                    2.650831088100725 Tan[1.5040801783846716` #], # < 0}}, 
                    0.4851158626411627 + 
                    2.650831088100725 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$], \
-1.994509567829358], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7281$$]], \

                    (Piecewise[{{
                    0.4851158626411627 + 
                    2.650831088100725 Tan[1.5040801783846716` #], # < 0}}, 
                    0.4851158626411627 + 
                    2.650831088100725 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7281$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$ + 
                    0.004959250860941042, 
                    CalculateUtilities`GraphicsUtilities`Private`max7281$$]], 
                    2.9647412931116834`]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$], 
                    (
                    Piecewise[{{-0.7853981633974488 + 
                    2.650831088100725 Tan[1.5040801783846716` #], # < 
                    0}}, -0.7853981633974488 + 
                    2.650831088100725 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$], \
-3.2650235938679697`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7283$$]], \

                    (Piecewise[{{-0.7853981633974488 + 
                    2.650831088100725 Tan[1.5040801783846716` #], # < 
                    0}}, -0.7853981633974488 + 
                    2.650831088100725 Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min7282$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7283$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$ + 
                    0.004959250860941042, 
                    CalculateUtilities`GraphicsUtilities`Private`max7283$$]], 
                    1.694227267073072]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 264., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7280$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7281$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7282$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7283$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkdiotC9IsI6NSQNKUr7XSy6JhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LkEpKnhyA5/dMyYEvQ+M/IDY+\
W4bcyDkjGh3foPvExYVjGj4qimjmoKaHkqSZzRStWcs6an5yZSJiDD6E15sD4e7uztDB4OxjInWILn\
aaQuZZ5IoSHoIdMuYPUb4N3d8Wh4/FYyF8L0AHoF6bLwTSWIDIzhhmI/3rdebqQeYmCY8JjK+\
cpqsPEdtL1BaUp5OYJbjG5eT9aotMJGpctw8LLlZpyAX/h18IEIbk/PYpO3ZEugXxjWj76Ks/\
jl3Azy/bQsvxdlq4jC/dwx5I5qeglqm82XrOjlGqq610c+5uqr5stEgL58y9f/\
SMVV6OYzttmHA7MTUeLX2luFft4UXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQQA7GFVtu92lK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe5ER9mXPypuJZcLTYa8H3ENKci1or+\
L9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKpDieqSjsWBLc25fxL9ssDHwFOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sby2EuL4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateFormOfTheIntegral", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{"-", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], "+", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}]}], "-", 
                    RowBox[{"sin", "(", "x", ")"}], "+", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Apart[-(((1 + a) Cos[x] + (-1 + a) Sin[x])/(Sqrt[2] (1 + a^2) E^(a \
x)))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{"-", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "+", 
                    RowBox[{"a", " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], "-", 
                    RowBox[{"sin", "(", "x", ")"}], "+", 
                    RowBox[{"cos", "(", "x", ")"}]}], ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigFactor[-(((1 + a) Cos[x] + (-1 + a) Sin[x])/(Sqrt[2] (1 + a^2) \
E^(a x)))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{"-", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "-", "1"}], ")"}], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "+", "1"}], ")"}], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}]}], ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"a", "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"a", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                  FontSize -> Inherited, 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternateFormOfTheIntegral__More"}, {}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Expanded form of the integral", "scanner" -> 
     "Integral", "id" -> "ExpandedFormOfTheIntegral", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[-(((1 + a) Cos[x] + (-1 + a) Sin[x])/(Sqrt[2] (1 + a^2) E^(a \
x)))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               StyleBox[
                RowBox[{
                  RowBox[{"-", 
                    FractionBox[
                    RowBox[{"a", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], "+", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], 
                   RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]], "-", 
                  RowBox[{
                    FractionBox[
                    RowBox[{"a", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], "-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "a"}], " ", "x"}]], " ", 
                    RowBox[{"cos", "(", "x", ")"}]}], 
                   RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], {
                 GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], "+", 
               StyleBox[
               "\"constant\"", {
                Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                 FontSize -> Inherited, 
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                 0}]}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=0.", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[-(((1 + a) Cos[x] + (-1 + a) Sin[x])/(Sqrt[2] (1 + a^2) E^(a \
x))), {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"a", "+", "1"}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", "1"}], ")"}]}]]}], "+", 
                    FractionBox["x", 
                    SqrtBox["2"]], "-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "-", "1"}], ")"}], " ", 
                    SuperscriptBox["x", "2"]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["2"]}]], "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "-", 
                    RowBox[{"2", " ", "a"}], "-", "1"}], ")"}], " ", 
                    SuperscriptBox["x", "3"]}], 
                    RowBox[{"6", " ", 
                    SqrtBox["2"]}]], "-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "3"], "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["a", "2"]}], "-", 
                    RowBox[{"3", " ", "a"}], "+", "1"}], ")"}], " ", 
                    SuperscriptBox["x", "4"]}], 
                    RowBox[{"24", " ", 
                    SqrtBox["2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"1", "+", "a"}], 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["a", "2"]}], ")"}]}]]}], ",", 
                    FractionBox["1", 
                    SqrtBox["2"]], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}], 
                    RowBox[{"2", " ", 
                    SqrtBox["2"]}]]}], ",", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"2", " ", "a"}], "+", 
                    SuperscriptBox["a", "2"]}], 
                    RowBox[{"6", " ", 
                    SqrtBox["2"]}]], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"1", "-", 
                    RowBox[{"3", " ", "a"}], "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["a", "2"]}], "+", 
                    SuperscriptBox["a", "3"]}], 
                    RowBox[{"24", " ", 
                    SqrtBox["2"]}]]}]}], "}"}], ",", "0", ",", "5", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "", "timedout" -> 
     "Integral,MultiDimensionalIntegration,Series,Plot,Plotter,Simplification,\
Sequence,Sum", "timedoutpods" -> "", "timing" -> "4.484", "parsetiming" -> 
     "1.036", "parsetimedout" -> "false", "recalculate" -> 
     "https://www4c.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa63115e0fi47b6f979e400002bb6f9ai1d2b02e87028318273920367222", "id" -> 
     "MSP63215e0fi47b6f979e400003f9eiga813i47095", "host" -> 
     "https://www4c.wolframalpha.com", "server" -> "27", "related" -> 
     "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa63315e0fi47b6f979e400004d9176c3d4716d2b7028318273920367222", "version" -> 
     "2.6", "inputstring" -> "Integrate[E^(-a*x)*Cos[x - Pi/4], x]"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "5", "datatypes" -> "", "timedout" -> "Plot", 
     "timedoutpods" -> "", "timing" -> "5.431", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "27", "host" -> 
     "https://www4c.wolframalpha.com", "server" -> "27", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "Integrate[E^(-a*x)*Cos[x - Pi/4], x]"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 11, 18, 11, 17, 54.93696`8.492439597995027}, "Line" -> 
    15, "SessionID" -> 18679185660081455064}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Integrate[E^(-a*x)*Cos[x - Pi/4], x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1373., {1034.8515625, 1040.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www4c.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa63115e0fi47b6f979e400002bb6f9ai1d2b02e87028318273920367222", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.84621947499636*^9},ExpressionUUID->"bfb2a6ed-29ed-4532-b269-ae384aaf1db9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"E", "[", 
      RowBox[{
       RowBox[{"-", "a"}], "*", "x"}], "]"}], 
     RowBox[{"(", 
      RowBox[{"a", "-", 
       RowBox[{"1", "*", 
        RowBox[{"Sin", "[", "x", "]"}]}]}], ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "1"}], ")"}], "*", 
     RowBox[{"Cos", "[", "x", "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "->", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846218943651308*^9, 3.846219103730287*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"af76b483-2a06-4972-8de0-22e146751c24"],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[Limit]", 
   RowBox[{"x", "\[Rule]", "\[Infinity]"}]], 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "a"}], ")"}], " ", 
     RowBox[{"Cos", "[", "x", "]"}]}], "+", 
    RowBox[{
     RowBox[{"\[ExponentialE]", "[", 
      RowBox[{
       RowBox[{"-", "a"}], " ", "x"}], "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"a", "-", 
       RowBox[{"Sin", "[", "x", "]"}]}], ")"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.846219049071988*^9, 3.846219104909915*^9}},
 CellLabel->"Out[7]=",ExpressionUUID->"37c73182-07e8-4c25-8932-211f15b12cda"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8462187835104103`*^9, 
  3.846218785229743*^9}},ExpressionUUID->"2a79cb9a-4ae2-44cd-bb9e-\
78a253cedfee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"E", "[", 
      RowBox[{
       RowBox[{"-", "a"}], "*", "x"}], "]"}], 
     RowBox[{"(", 
      RowBox[{"a", "-", 
       RowBox[{"1", "*", 
        RowBox[{"Sin", "[", "x", "]"}]}]}], ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a", "+", "1"}], ")"}], "*", 
     RowBox[{"Cos", "[", "x", "]"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "->", "0"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8462191153843927`*^9, 3.846219119428803*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"afdcce61-6cae-4bb6-a004-0bfd6192b5aa"],

Cell[BoxData[
 RowBox[{
  UnderscriptBox["\[Limit]", 
   RowBox[{"x", "\[Rule]", "0"}]], 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "a"}], ")"}], " ", 
     RowBox[{"Cos", "[", "x", "]"}]}], "+", 
    RowBox[{
     RowBox[{"\[ExponentialE]", "[", 
      RowBox[{
       RowBox[{"-", "a"}], " ", "x"}], "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"a", "-", 
       RowBox[{"Sin", "[", "x", "]"}]}], ")"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8462191208764877`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"8406d242-b9fa-4289-a6a5-274f04fe4550"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> Infinity}] - \
Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> 0}]\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.8462191423070517`*^9, 3.846219162495565*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"09a92347-f290-4f13-83cf-e3f7d80183e1"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> Infinity}] - \
Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> 0}]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, 
   Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, 
   Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "LimitHead", "word" -> " limit ", "template" -> 
        "Assuming limit refers to a continuous limit${separator}Use the \
${desc} instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "\"LimitHead\" -> {\"Continuous\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Continuous", "desc" -> "continuous", "input" -> 
          "\"LimitHead\" -> {\"Continuous\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Discrete", "desc" -> "discrete", "input" -> 
          "\"LimitHead\" -> {\"Discrete\"}"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "E", "template" -> 
        "Assuming \"E\" is EllipticE1${separator}Use ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"E\"} -> {\"EllipticE1\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "EllipticE1", "desc" -> "EllipticE1", "input" -> 
          "{\"FunClash\", \"E\"} -> {\"EllipticE1\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "EulerE", "desc" -> "EulerE", "input" -> 
          "{\"FunClash\", \"E\"} -> {\"EulerE\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Math", "timedout" -> 
     "Numeric,List,Factorial", "timedoutpods" -> "", "timing" -> "7.412", 
     "parsetiming" -> "2.99", "parsetimedout" -> "false", "recalculate" -> 
     "https://www4c.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa39342386h1688844cd8a00004c02g24848350ach4350636681866736343", "id" -> 
     "MSP39352386h1688844cd8a00000i4f3fbf6c0776df", "host" -> 
     "https://www4c.wolframalpha.com", "server" -> "32", "related" -> 
     "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa39362386h1688844cd8a000062c4a7ac0f414ab54350636681866736343", "version" -> 
     "2.6", "inputstring" -> 
     "Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> Infinity}] - \
Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> 0}]"}, {
    "success" -> "false", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Math", "timedout" -> 
     "Numeric,List,Factorial", "timedoutpods" -> "", "timing" -> "12.363", 
     "parsetiming" -> "2.99", "parsetimedout" -> "false", "recalculate" -> "",
      "id" -> "", "parseidserver" -> "29", "host" -> 
     "https://www4c.wolframalpha.com", "server" -> "29", "related" -> 
     "https://www4c.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa22321fhg1gbb770bhi850000631fg43i15a1d4gb6604077203588371163", "version" -> 
     "2.6", "inputstring" -> 
     "Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> Infinity}] - \
Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> 0}]"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 11, 18, 11, 12, 53.638659`8.48205288638584}, "Line" -> 
    10, "SessionID" -> 18679185660081455064}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> Infinity}] - \
Limit[E[-a*x] (a - 1*Sin[x]) + (a + 1)*Cos[x], {x -> 0}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {48.8515625, 54.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www4c.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa39342386h1688844cd8a00004c02g24848350ach4350636681866736343", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8462191736899853`*^9},ExpressionUUID->"0e0148f8-3ac1-4f01-b661-\
6706c23eacab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"E", "^", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "a"}], "*", "x"}], ")"}]}], "*", 
    RowBox[{"Cos", "[", 
     RowBox[{"x", " ", "-", " ", 
      RowBox[{"Pi", "/", "4"}]}], "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846219525566161*^9, 3.8462195449276648`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"bae4bfac-94f1-4091-ae5a-770e953f2205"],

Cell[BoxData[
 TemplateBox[{
   FractionBox[
    RowBox[{"1", "+", "a"}], 
    RowBox[{
      SqrtBox["2"], " ", 
      RowBox[{"(", 
        RowBox[{"1", "+", 
          SuperscriptBox["a", "2"]}], ")"}]}]], 
   RowBox[{
     RowBox[{"Re", "[", "a", "]"}], ">", "0"}]},
  "ConditionalExpression"]], "Output",
 CellChangeTimes->{3.846219560182761*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"ec24a8ef-098a-4b6c-a9e5-a78412de5773"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FormBox[
  RowBox[{"Integrate", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"-", "1"}], 
     RowBox[{
      RowBox[{"I", "*", " ", 
       RowBox[{"Sin", "[", "x", "]"}]}], "-", "a"}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}], 
  TraditionalForm]], "Input",
 CellChangeTimes->{{3.846220900750915*^9, 3.846220982661125*^9}, {
  3.8462211627894382`*^9, 3.8462211628956747`*^9}, {3.846222776631947*^9, 
  3.8462227883316917`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"74e43602-06c2-4725-a792-033943a2af4b"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", 
     RowBox[{
      RowBox[{"-", "a"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Sin", "[", "x", "]"}]}]}]]}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Output",
 CellChangeTimes->{
  3.84622117136915*^9, {3.846222842089652*^9, 3.8462228561017714`*^9}},
 CellLabel->"Out[21]=",ExpressionUUID->"ce716c7b-9aca-4724-8a1d-e0c0733c9c64"]
}, Open  ]],

Cell[BoxData[
 FormBox["", TraditionalForm]], "Input",
 CellChangeTimes->{{3.8462211826449013`*^9, 
  3.846221184602685*^9}},ExpressionUUID->"6e43d72c-7eaf-47fc-9cc8-\
a8f401415bf4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "/", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"I", "*", 
       RowBox[{"Sin", "[", "x", "]"}]}], " ", "-", " ", "a"}], ")"}]}], ",", 
   " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0.1", ",", "Pi"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846222799250526*^9, 3.846222833892276*^9}, 
   3.846222968236298*^9, {3.8462240352942677`*^9, 3.846224095301458*^9}, {
   3.846224135621743*^9, 3.846224170231138*^9}, {3.846224613433612*^9, 
   3.846224631967637*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"9fc33f1d-1e22-406c-9cfa-e963ceb62be7"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"2.`", " ", 
    RowBox[{"ArcTanh", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "\[ImaginaryI]"}], "+", 
       RowBox[{"0.05004170837553929`", " ", "a"}]}], 
      SqrtBox[
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        SuperscriptBox["a", "2"]}]]], "]"}]}], "-", 
   RowBox[{"2.`", " ", 
    RowBox[{"ArcTanh", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "\[ImaginaryI]"}], "+", 
       RowBox[{"6.575501784235257`*^6", " ", "a"}]}], 
      SqrtBox[
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        SuperscriptBox["a", "2"]}]]], "]"}]}]}], 
  SqrtBox[
   RowBox[{
    RowBox[{"-", "1.`"}], "-", 
    RowBox[{"1.`", " ", 
     SuperscriptBox["a", "2"]}]}]]]], "Output",
 CellChangeTimes->{{3.8462246447256937`*^9, 3.8462246489287252`*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"184fd0e7-9c08-4c24-b18f-e52a5e558c9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "+", "1"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.846226147989006*^9, 3.846226153756794*^9}, {
  3.846232359616953*^9, 3.846232365399889*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"c5cc7998-4e89-4709-9ab2-f8c40ccacd7e"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.846232367099513*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"5441da7f-39a5-48c7-ac4d-5f7ccf57885b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"-", "1"}], 
    RowBox[{
     RowBox[{"I", "*", 
      RowBox[{"Sin", "[", "z", "]"}]}], "-", "a"}]], ",", "z"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.846232371635042*^9, 3.846232491732901*^9}, {
  3.846313063709743*^9, 3.846313070220343*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"14c25c3f-0a2b-4883-b050-33a7592e6da3"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"Cos", "[", "z", "]"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "a"}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]]], "Output",
 CellChangeTimes->{{3.846232470045059*^9, 3.846232494637969*^9}, 
   3.846313119262594*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"6efc14c4-f952-48fb-8365-da47d14b0efb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "z_", "]"}], "=", 
  RowBox[{
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{"z", "-", "z1"}], ")"}], " ", 
     RowBox[{"Cos", "[", "z", "]"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "a"}], "+", 
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], "+", 
   FractionBox["1", 
    RowBox[{
     RowBox[{"-", "a"}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}]]}]}]], "Input",
 CellChangeTimes->{{3.846232633139655*^9, 3.846232655986959*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"ece55d48-8ec0-45b0-8999-d271758b32c3"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{"z", "-", "z1"}], ")"}], " ", 
    RowBox[{"Cos", "[", "z", "]"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "a"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], "+", 
  FractionBox["1", 
   RowBox[{
    RowBox[{"-", "a"}], "+", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"Sin", "[", "z", "]"}]}]}]]}]], "Output",
 CellChangeTimes->{3.846232657505925*^9, 3.846237724998705*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"5b278a3c-09e3-48ab-9399-89f810390248"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{"z", "-", "z1"}], ")"}], " ", 
     RowBox[{"Cos", "[", "z", "]"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "a"}], "+", 
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], "+", 
   FractionBox["1", 
    RowBox[{
     RowBox[{"-", "a"}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}]]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[36]:=",ExpressionUUID->"17e1f71f-f6cd-4568-bdfe-e5b06b584506"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"z", "-", "z1"}], ")"}], " ", 
      RowBox[{"Cos", "[", "z", "]"}]}], "+", 
     RowBox[{"Sin", "[", "z", "]"}]}], ")"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]]], "Input",
 CellChangeTimes->{3.846233679266778*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"3440f024-6e9f-441b-bf64-9cc76cdc15dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "z1", "]"}]], "Input",
 CellChangeTimes->{{3.846232660960168*^9, 3.8462326657159348`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"f17c9d56-a747-4e9a-9dd1-9beda6cc18ec"],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"-", "a"}], "+", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"Sin", "[", "z1", "]"}]}]}]]], "Output",
 CellChangeTimes->{3.84623266710104*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"c8eccefe-3222-4cae-aec7-53df181bd397"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"g", "[", "z", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", "->", "z1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846233470823572*^9, 3.846233498707818*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"f1e45474-85d7-47ea-bf87-731dc4593d8b"],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"-", "a"}], "+", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"Sin", "[", "z1", "]"}]}]}]]], "Output",
 CellChangeTimes->{3.8462335040831633`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"746332b0-746b-498a-93b5-8366184b4fc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"z", "-", "z1"}], ")"}], " ", 
      RowBox[{"Cos", "[", "z", "]"}]}], "+", 
     RowBox[{"Sin", "[", "z", "]"}]}], ")"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"151cc4cc-822e-4278-a796-c7bbba0c6d94"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"z", "-", "z1"}], ")"}], " ", 
      RowBox[{"Cos", "[", "z", "]"}]}], "+", 
     RowBox[{"Sin", "[", "z", "]"}]}], ")"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]]], "Output",
 CellChangeTimes->{3.846233690508745*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"ab0eea7a-39be-4c37-8153-a1be5a225f19"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.846233698004158*^9, 
  3.846233699479459*^9}},ExpressionUUID->"3b76779e-68ba-49e0-9736-\
8b175a0b1130"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"z", "-", "z1"}], ")"}], " ", 
        RowBox[{"Cos", "[", "z", "]"}]}], "+", 
       RowBox[{"Sin", "[", "z", "]"}]}], ")"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"a", "-", 
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], ",", 
   RowBox[{"{", 
    RowBox[{"z", "->", " ", "z1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846233706825097*^9, 3.84623372214336*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"f43b483e-31d5-4264-9971-bc1e62315ad6"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
     RowBox[{"Sin", "[", "z1", "]"}]}], ")"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z1", "]"}]}]}], ")"}], "2"]]], "Output",
 CellChangeTimes->{3.8462337234093227`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"01121382-4d4b-4caf-ba04-395a83c201f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"g2", "[", "z_", "]"}], "=", 
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
      RowBox[{"Sin", "[", "z1", "]"}]}], ")"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"a", "-", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Sin", "[", "z1", "]"}]}]}], ")"}], "2"]]}]], "Input",
 CellChangeTimes->{{3.846237460526142*^9, 3.846237472746255*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b1870947-211d-443b-81f1-d99f032135c4"],

Cell[BoxData[
 FractionBox[
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", "a"}], "+", 
     RowBox[{"Sin", "[", "z1", "]"}]}], ")"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"a", "-", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z1", "]"}]}]}], ")"}], "2"]]], "Output",
 CellChangeTimes->{3.8462374752535467`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"8de671b5-5941-4b9c-8190-1ce45f76d81c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{"I", "*", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"I", "*", "a"}], "+", 
     RowBox[{
      RowBox[{"-", "a"}], "/", "I"}]}], ")"}]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "-", 
     RowBox[{"I", "*", 
      RowBox[{
       RowBox[{"-", "a"}], "/", "I"}]}]}], ")"}], "^", "2"}]]], "Input",
 CellChangeTimes->{{3.846237477469298*^9, 3.8462375911558104`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"32248228-15d4-461e-8d68-fdd2a65f340f"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", 
   RowBox[{"2", " ", "a"}]]}]], "Output",
 CellChangeTimes->{{3.846237539294086*^9, 3.846237592521003*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"d12b8455-3a26-40d3-9a25-0730a45f310a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"g", "[", "z1", "]"}]], "Input",
 CellChangeTimes->{{3.8462377019011908`*^9, 3.846237705339478*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"e6abe8fa-8711-4133-ae3f-ed5adf0a9658"],

Cell[BoxData[
 RowBox[{"g", "[", "z1", "]"}]], "Input",
 CellChangeTimes->{3.8462377112996273`*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"e22572aa-8006-46ff-9fbb-1438f409630b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "z1", "]"}]], "Input",
 CellChangeTimes->{3.8462377289095373`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"d9b4302b-bead-4bc4-a30f-3bbe0def8b71"],

Cell[BoxData[
 FractionBox["1", 
  RowBox[{
   RowBox[{"-", "a"}], "+", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"Sin", "[", "z1", "]"}]}]}]]], "Output",
 CellChangeTimes->{3.8462377289950666`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"92275e07-055b-48d0-a9cb-08d3c3365307"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "/", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "a"}], "+", 
    RowBox[{"I", "*", 
     RowBox[{
      RowBox[{"-", "a"}], "/", "I"}]}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.846237737348827*^9, 3.846237766589753*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"71cc19be-b7ca-4e1f-a2fb-70a378f08f4f"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", 
   RowBox[{"2", " ", "a"}]]}]], "Output",
 CellChangeTimes->{3.846237768057743*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"8b59746d-034d-4a12-95c5-2f62a86b9416"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RESULT", "=", " ", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", 
     RowBox[{"2", " ", "a"}]]}], "*", "2", "*", "Pi", " ", "*", 
   FractionBox["1", 
    RowBox[{"2", "*", "Pi"}]]}]}]], "Input",
 CellChangeTimes->{{3.846237775885447*^9, 3.846237822892823*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"a5fcb0da-84f2-4016-8c20-aa8f628de22d"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", 
   RowBox[{"2", " ", "a"}]]}]], "Output",
 CellChangeTimes->{3.846237824357719*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"6c332a88-6082-4d50-8063-390316e72889"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"\"\<nomol vo fore\>\"", "\[IndentingNewLine]", 
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{"-", "1"}], "/", 
     RowBox[{"(", 
      RowBox[{"I", "*", 
       RowBox[{"Sin", "[", 
        RowBox[{"x", "+", 
         RowBox[{"I", "*", "y"}]}], "]"}]}], ")"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", "->", "Infinity"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8462404484524*^9, 3.846240469225265*^9}, {
  3.8462405061871*^9, 3.846240617789381*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"65786cc6-915f-409d-ad72-00b3704cde49"],

Cell[BoxData["\<\"nomol vo fore\"\>"], "Output",
 CellChangeTimes->{3.8462406200691223`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"9eb25aac-7337-4ad3-87a8-f49397e0bca1"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8462406204880247`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"53f2d840-e467-4ca7-a4c1-5c6ad34da439"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solve[I*Sin[x] - a == 0, x]", "WolframAlphaLong",
 CellChangeTimes->{{3.8462406481957607`*^9, 3.846240690173094*^9}, 
   3.8462407213446503`*^9, 3.846734468978036*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"d0d17517-1aea-4fa0-9945-3d1756ad7c4b"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve[I*Sin[x] - a == 0, x]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Solve[I Sin[x] - a == 0, x, MaxExtraConditions -> Automatic]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", "a"}], 
                    "\[LongEqual]", "0"}], HoldForm], 
                    StyleBox["\" for \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "x"}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "3", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-a + I Sin[x] == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"x", "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{"2", " ", "\[Pi]", " ", "n"}], "-", 
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}]}], Identity]}], 
              RowBox[{"n", "\[Element]", 
                TemplateBox[{}, "Integers"]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-a + I Sin[x] == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"x", "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}], "+", 
                   RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", "\[Pi]"}], 
                 Identity]}], 
              RowBox[{"n", "\[Element]", 
                TemplateBox[{}, "Integers"]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "-", "a"}], HoldForm], 
                    "\[LongEqual]", "0"}], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Add \"", 
                    TemplateBox[{"a", "\" \""}, "RowDefault"], "\"to \"", 
                    "\"both \"", "\"sides\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"sin", "(", "x", ")"}]}], "\[LongEqual]", "a"}], 
                    HoldForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Divide \"", "\"both \"", "\"sides \"", "\"by \"", 
                    TagBox["\[ImaginaryI]", HoldForm]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", 
                    RowBox[{"-", "\[ImaginaryI]", " ", "a"}]}], HoldForm], 
                    HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Take \"", "\"the \"", "\"inverse \"", "\"sine \"", 
                    "\"of \"", "\"both \"", "\"sides\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"\[Pi]", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}], "+", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SubscriptBox["n", "1"]}]}], HoldForm]}], HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{
                    SubscriptBox["n", "1"], "\[Element]", 
                    TemplateBox[{}, "Integers"]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TemplateBox[{"\"   \"", 
                    TemplateBox[{
                    StyleBox["\"or\"", 
                    GrayLevel[0.7], StripOnInput -> False], "\" \"", "\" \""},
                     "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]", " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}], "+", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SubscriptBox["n", "2"]}]}], HoldForm]}], HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{
                    SubscriptBox["n", "2"], "\[Element]", 
                    TemplateBox[{}, "Integers"]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], HoldForm], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "3"}, {
         XMLElement[
         "info", {
          "text" -> "sinh^(-1)(x) is the inverse hyperbolic sine function"}, {
          
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/ArcSinh.html",
              "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://functions.wolfram.com/ElementaryFunctions/ArcSinh", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://mathworld.wolfram.com/InverseHyperbolicSine.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "Z is the set of integers"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Integers.html", 
             "text" -> "Documentation", "title" -> "Documentation"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "i is the imaginary unit"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/I.html", 
             "text" -> "Documentation", "title" -> "Documentation"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "Result__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Solve", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.198", "parsetiming" -> "0.637", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP2479218d6g23b39hgfhd000033e497i7648bhi0b", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "31", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2480218d6g23b39hgfhd0000335a20h35cd234632433495843949992771", "version" -> 
    "2.6", "inputstring" -> "Solve[I*Sin[x] - a == 0, x]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 11, 24, 10, 21, 19.886363`8.051130346616349}, "Line" -> 
    1, "SessionID" -> 18682570161819127352}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Solve[I*Sin[x] - a == 0, x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {271.8515625, 277.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8467344799001637`*^9},ExpressionUUID->"48d98ab4-cee4-4bea-a0b5-\
5f15c643f3b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "*", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"z", "-", "z1"}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"I", "*", 
        RowBox[{"Sin", "[", "z", "]"}]}], "-", "a"}], ")"}]}]}], ",", "z"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.846240744828855*^9, 3.846240801326909*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"933661ec-8633-4d70-80c8-c138920391ca"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{"z", "-", "z1"}], ")"}], " ", 
    RowBox[{"Cos", "[", "z", "]"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "a"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], "-", 
  FractionBox["1", 
   RowBox[{
    RowBox[{"-", "a"}], "+", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"Sin", "[", "z", "]"}]}]}]]}]], "Output",
 CellChangeTimes->{3.84624080370673*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"97fbcb34-d0fc-4608-b954-077711694287"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"G", "[", "z_", "]"}], "=", 
  RowBox[{
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"(", 
      RowBox[{"z", "-", "z1"}], ")"}], " ", 
     RowBox[{"Cos", "[", "z", "]"}]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "a"}], "+", 
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], "-", 
   FractionBox["1", 
    RowBox[{
     RowBox[{"-", "a"}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z", "]"}]}]}]]}]}]], "Input",
 CellChangeTimes->{{3.846240815071117*^9, 3.846240838633567*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"fa5ac3e0-96f3-49b9-b852-34cd82839459"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"(", 
     RowBox[{"z", "-", "z1"}], ")"}], " ", 
    RowBox[{"Cos", "[", "z", "]"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "a"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"Sin", "[", "z", "]"}]}]}], ")"}], "2"]], "-", 
  FractionBox["1", 
   RowBox[{
    RowBox[{"-", "a"}], "+", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"Sin", "[", "z", "]"}]}]}]]}]], "Output",
 CellChangeTimes->{3.8462408443009233`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"7b1f00fc-72e4-4fd1-b7ef-0ed01d32ea21"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"G", "[", "z", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", "->", "z1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846240848481421*^9, 3.846240868793837*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"7a2b465e-1029-446d-a5e4-04c4c0c1cac3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", 
    RowBox[{
     RowBox[{"-", "a"}], "+", 
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"Sin", "[", "z1", "]"}]}]}]]}], 
  "\"\<mit Sin[z1]=-a/I => Resultat = 1/2a *2Pi/2Pi\>\""}]], "Input",
 CellChangeTimes->{{3.84624145281664*^9, 
  3.846241520053109*^9}},ExpressionUUID->"f1e1625a-73dc-4611-890e-\
30ec7b8699d5"],

Cell[CellGroupData[{

Cell[BoxData[{"\"\<ersti teil\>\"", "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"1", "/", 
   RowBox[{"(", 
    RowBox[{"2", "*", "Pi"}], ")"}]}], "*", 
  RowBox[{"Integrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"E", "[", 
      RowBox[{"-", "ax"}], "]"}], "*", 
     RowBox[{"E", "[", 
      RowBox[{"I", "*", "x", "*", 
       RowBox[{"Sin", "[", " ", "\[CapitalTheta]", "]"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "Infinity"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.846241141085618*^9, 3.846241303888322*^9}, {
  3.8462413575206223`*^9, 3.84624140228015*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"dc58fc95-f8bc-4611-904b-0d68b6325777"],

Cell[BoxData["\<\"ersti teil\"\>"], "Output",
 CellChangeTimes->{3.846241403972993*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"e2de54be-3ab5-4e5e-9e26-2123cdc30bb5"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
   RowBox[{
    RowBox[{
     RowBox[{"\[ExponentialE]", "[", 
      RowBox[{"-", "ax"}], "]"}], " ", 
     RowBox[{"\[ExponentialE]", "[", 
      RowBox[{"\[ImaginaryI]", " ", "x", " ", 
       RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}]}], "]"}]}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}], 
  RowBox[{"2", " ", "\[Pi]"}]]], "Output",
 CellChangeTimes->{3.846241404210331*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"ec7b1e82-3b32-4b95-a467-5175819c02d0"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.846241284419924*^9, 
  3.8462413082457037`*^9}},ExpressionUUID->"b011f601-498a-4f38-a30a-\
e01ee820a3a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "/", 
     RowBox[{"(", 
      RowBox[{"2", "*", "Pi"}], ")"}]}], "*", 
    RowBox[{
     RowBox[{"-", "1"}], "/", 
     RowBox[{"(", 
      RowBox[{"I", "*", 
       RowBox[{"Sin", "[", " ", 
        RowBox[{"x", "+", 
         RowBox[{"I", "*", "y"}]}], "]"}]}], ")"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"y", "->", "Infinity"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.84631150034166*^9, 3.846311622234857*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"9f10b489-57cb-4358-b298-feff9c616805"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.846311581739965*^9, 3.846311627072521*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"c6136cf0-ff2b-4366-a1c3-0d24fcd93229"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Residue[-1/(I*Sin[z] - a), {z, -I ArcSinh[a] + 2 \[Pi]}]", \
"WolframAlphaLong",
 CellChangeTimes->{{3.8463152937509327`*^9, 3.846315345912883*^9}, {
  3.846315390705016*^9, 3.846315404272826*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6d58386b-f989-4b67-8f02-c7048e4370fd"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Residue[-1/(I*Sin[z] - a), {z, -I ArcSinh[a] + 2 \[Pi]}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Residue[-(I Sin[z] - a)^(-1), {z, -(I ArcSinh[a]) + 2 Pi}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"res", "(", 
               RowBox[{
                 RowBox[{"-", 
                   FractionBox["1", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"sin", "(", "z", ")"}]}], "-", "a"}]]}], ",", 
                 RowBox[{"{", 
                   RowBox[{"z", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}], "+", 
                    RowBox[{"2", " ", "\[Pi]"}]}]}], "}"}]}], ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {
        "text" -> "sinh^(-1)(x) is the inverse hyperbolic sine function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/ArcSinh.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/ArcSinh",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/InverseHyperbolicSine.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "Res_(z=z_0)f is the residue of a function at a point"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Residue.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexResidue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["\[ImaginaryI]", 
              SqrtBox[
               RowBox[{
                 SuperscriptBox["a", "2"], "+", "1"}]]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[I/Sqrt[1 + a^2], {a, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4434$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4433$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4434$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2813493$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4433$\
2813498$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4434$2813499$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4434$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4433$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2813493$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4433$\
2813498$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4434$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4434$\
2813499$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2813468[
                    
                    Plot[{
                    Re[Complex[0, 1] (1 + $CellContext`a^2)^Rational[-1, 2]], 
                    
                    Im[Complex[0, 1] (1 + $CellContext`a^2)^Rational[-1, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Complex[0, 1] (1 + $CellContext`a^2)^
                    Rational[-1, 2], {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$], 
                    (
                    Piecewise[{{
                    0. + 1.2971078940816327` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2971078940816327` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$], \
-1.2133333333333334`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4434$$]], \

                    (Piecewise[{{
                    0. + 1.2971078940816327` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2971078940816327` Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min4433$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4434$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$ + 
                    0.002426666666666667, 
                    CalculateUtilities`GraphicsUtilities`Private`max4434$$]], 
                    1.2133333333333334`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4433$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4434$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2813468]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2813468[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2813468[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkdbtw74gAR2MSQNKUr73ljiJhWtntrMX/jz47CZp1q5STAdoSj+c6kvz+O6556738lgESb/\
X66nbxnwSLE628PTCmJGY5aLg8YfzXBKlqODJLXz2wJiQ6H3C4ILEznfXmI9CzkC78xt8H1hUMNDku\
6aMakrU9EBCntFI1Z6xpKfmJ1MmImD0J3k13Nve2d0bOhiMZQxaE8nVTlvIPJOgSNJDoDvGvGfAf7j\
j8/L4pWAsJCcF4RFRT413IiE2MIIDw3y8b73ZTD3CxDTwGGR87TRZeY7aXqC0pDydkFmOb1xN1nZbY\
JCpctw8LrlZpyAX/j18IEIbk/PYpO3ZEugXxg2j77Ks/jl3Azy/bQsvxdlq4jC/\
dwx5A01PiVqm83XrOjlGqq610c+5uq75stEgr54y9f/SEVV6OYxh2zDI7NjUeLX2luF328KLHLt+\
Lu4nxnx1jhJw1XCoBPdZxAWbR9FMeeAk2j5dlRuHw3hY8R2i06eCFU5g4iz7xfbHswq83hRCrN10A9\
Lh9QwISE6MK7bc7tOU6lEGEiIDPL+\
uXzbZRNSheNzZvvaUx9QMMEfIuuUJzWGyUHfQUfbtj4pbyeVSkyHvh1yTlMi1or+\
P9ZGGXB5PhGckIV7Q1Ks3h1VSY5Desh+UIGEOnCIk/WU+9pt7uFgJpOpAorqkY3FgS3Pun0S/\
LPAR4anOmju25+jyblvMJhBnteoCmiSL02ZzTPebTDduaA50XxJ8S+I/0LtNodsU/\
uqmsLQHd2tCtyZ0a0K3JnRrwv+7JtiI8V/pN16YuH4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[I/Sqrt[1 + a^2], {a, -8.5, 8.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4436$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4435$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4436$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2813592$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4435$\
2813593$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4436$2813594$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4436$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4435$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2813592$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4435$\
2813593$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4436$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4436$\
2813594$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2813569[
                    
                    Plot[{
                    Re[Complex[0, 1] (1 + $CellContext`a^2)^Rational[-1, 2]], 
                    
                    Im[Complex[0, 1] (1 + $CellContext`a^2)^Rational[-1, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Complex[0, 1] (1 + $CellContext`a^2)^
                    Rational[-1, 2], {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$], 
                    (
                    Piecewise[{{
                    0. + 9.07975525857143 Tan[1.5040801783846716` #], # < 0}},
                     0. + 9.07975525857143 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$], \
-8.493333333333334], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4436$$]], \

                    (Piecewise[{{
                    0. + 9.07975525857143 Tan[1.5040801783846716` #], # < 0}},
                     0. + 9.07975525857143 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4436$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$ + 
                    0.016986666666666667`, 
                    CalculateUtilities`GraphicsUtilities`Private`max4436$$]], 
                    8.493333333333334]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4435$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4436$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2813569]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2813569[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2813569[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkbqBtC9IsI6NSQNKUr73ljiJhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LolSVPDkBj67Z0xI9D5h8IPEznfbmAMhZ6Dd+Q2+\
DywqGGjyVVNGNSVqeighz2ikas9Y0lPzkykTETD6k7zY3h3uvN4dOhiMZQxaE8nVTlvIPJOgSNJDoF\
vG7DHg39zxaXn8VDAWku8F4RFRj413IiE2MIIDw3y8b73eTD3AxDTwGGR85TRZeY7aXqC0pDydkFmO\
b1xO1rAtMMhUOW4eltysU5AL/w4+EKGNyXls0vZsCfQL45rRd1FW/\
5y7AZ7ftoWX4mw1cZjfO4a8gaanRC3T+bJ1nRwjVdfa6OdcXdV82WiQl0+Z+n/\
pmCq9HMZ22zDI7MTUeLX2luFftYUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQkJwYV2y53acp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe6go+zLHxW3ksuFJkPej7gmKZFrRX8X6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWhRHVJx+LAlubcP4l+\
WeBjwlOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb16ouH4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.874", "parsetiming" -> "0.52", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP3106238i47fi9gfi801400004aa886a90h6g015f", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa3107238i47fi9gfi80140000469995he655ce7hi4307842769377011871", "version" -> 
    "2.6", "inputstring" -> 
    "Residue[-1/(I*Sin[z] - a), {z, -I ArcSinh[a] + 2 \[Pi]}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 11, 19, 13, 56, 50.764704`8.458136833755619}, "Line" -> 
    9, "SessionID" -> 18679796566886889332}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Residue[-1/(I*Sin[z] - a), {z, -I ArcSinh[a] + 2 \[Pi]}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1373., {544.8515625, 550.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.846315410773273*^9},ExpressionUUID->"618fe832-e3db-447e-87be-\
9f6d5d044695"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{
  "\"\<Residue[-1/(I*Sin[z] - a), {z, -I ArcSinh[a] + 2 \[Pi]}]\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Result\>\"", ",", "1"}], "}"}], ",", "\"\<Plaintext\>\""}],
     "}"}]}], "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"493c5d3e-4dbf-48cf-90d0-f30622bb6432"],

Cell[BoxData["\<\"i/sqrt(a^2 + 1)\"\>"], "Output",
 CellChangeTimes->{3.8463166257546587`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"6f2a40ac-6127-4c82-9501-fe80c2833c84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"I", "*", 
      RowBox[{"Sin", "[", "x", "]"}]}], "-", "a"}], "==", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.846315353170505*^9, 3.846315375697871*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"bbee8346-ef2e-4761-ac6d-36f3ae43e5b1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     TemplateBox[{
       RowBox[{
         RowBox[{
           RowBox[{"-", "\[ImaginaryI]"}], " ", 
           RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
         RowBox[{"2", " ", "\[Pi]", " ", 
           TemplateBox[{"1"}, "C"]}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     TemplateBox[{
       RowBox[{"\[Pi]", "+", 
         RowBox[{"\[ImaginaryI]", " ", 
           RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
         RowBox[{"2", " ", "\[Pi]", " ", 
           TemplateBox[{"1"}, "C"]}]}], 
       RowBox[{
         TemplateBox[{"1"}, "C"], "\[Element]", 
         TemplateBox[{}, "Integers"]}]},
      "ConditionalExpression"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8463153765298634`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"c0fc72b9-99a4-44d1-ba00-d01237bd0676"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "z_", "]"}], "=", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"z", "-", 
     RowBox[{"I", "*", 
      RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
     RowBox[{"2", "*", "Pi"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"I", "*", 
      RowBox[{"Sin", "[", "z", "]"}]}], "-", "a"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.846315598938963*^9, 3.846315668677511*^9}, {
  3.846315767151609*^9, 3.846315775974059*^9}, {3.846315822490699*^9, 
  3.846315823189117*^9}, {3.846316667208457*^9, 3.846316678910774*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"2cfe1ace-4d0c-4a47-84e7-aa44dd8e4031"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"2", " ", "\[Pi]"}], "+", "z", "-", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"ArcSinh", "[", "a", "]"}]}]}], 
  RowBox[{
   RowBox[{"-", "a"}], "+", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"Sin", "[", "z", "]"}]}]}]]], "Output",
 CellChangeTimes->{{3.84631565663653*^9, 3.8463156701388483`*^9}, 
   3.8463158246017036`*^9, {3.84631666988437*^9, 3.846316681049625*^9}},
 CellLabel->"Out[27]=",ExpressionUUID->"778a2b76-9fcb-4e65-a296-57231d68fba3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"g", "[", "z", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", "->", 
     RowBox[{
      RowBox[{"I", "*", 
       RowBox[{"ArcSinh", "[", "a", "]"}]}], " ", "+", 
      RowBox[{"2", "Pi"}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.846315672878422*^9, 3.84631575512595*^9}, {
  3.846315834345149*^9, 3.846315859115642*^9}, {3.8463160841146603`*^9, 
  3.846316101287821*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"c35d9aed-3199-46fd-acf0-c5eeaa83751b"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"4", " ", "\[Pi]"}], "a"]}]], "Output",
 CellChangeTimes->{{3.846315703912302*^9, 3.8463157563046513`*^9}, {
   3.846315827610148*^9, 3.846315860684752*^9}, {3.8463160861462803`*^9, 
   3.8463161024534283`*^9}, 3.846316672942411*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"7ff62f64-8e73-4b9f-8dce-f3fded2aaf6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Limit[(z - (-I*ArcSinh[a] + 2*Pi))/(I*Sin[z] - a), {z -> -I*ArcSinh[a] + 2 \
Pi}]\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.84631741355945*^9, 3.8463175277097187`*^9}, 
   3.846325107448463*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"c63cbdd5-c297-473e-8151-5d2b00375c4c"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Limit[(z - (-I*ArcSinh[a] + 2*Pi))/(I*Sin[z] - a), {z -> -I*ArcSinh[a] + \
2 Pi}]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Limit__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true", "feedbackNeeded" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[(z - (-(I ArcSinh[a]) + 2 Pi))/(I Sin[z] - a), z -> 2 Pi - I \
ArcSinh[a]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TemplateBox[{
                 StyleBox[
                  FractionBox[
                   RowBox[{"z", "-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}], ")"}]}], "+", 
                    RowBox[{"2", " ", "\[Pi]"}]}], ")"}]}], 
                   RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"sin", "(", "z", ")"}]}], "-", "a"}]], 
                  ScriptLevel -> 0, StripOnInput -> False], "z", 
                 RowBox[{
                   RowBox[{"2", " ", "\[Pi]"}], "-", 
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    SuperscriptBox["sinh", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}]}]}, "Limit2Arg", 
                SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], "\[LongEqual]", 
               RowBox[{"-", 
                 FractionBox["\[ImaginaryI]", 
                  SqrtBox[
                   RowBox[{"1", "+", 
                    SuperscriptBox["a", "2"]}]]]}]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"step\[Hyphen]by\[Hyphen]step solution unavailable\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "2"}, {
         XMLElement[
         "info", {
          "text" -> "sinh^(-1)(x) is the inverse hyperbolic sine function"}, {
          
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/ArcSinh.html",
              "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://functions.wolfram.com/ElementaryFunctions/ArcSinh", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://mathworld.wolfram.com/InverseHyperbolicSine.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "i is the imaginary unit"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/I.html", 
             "text" -> "Documentation", "title" -> "Documentation"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Limit__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(-I)/Sqrt[1 + a^2], {a, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6509$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6508$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6509$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2166585$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6508$\
2166590$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6509$2166591$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6509$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6508$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2166585$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6508$\
2166590$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6509$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6509$\
2166591$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2166560[
                    
                    Plot[{
                    Re[Complex[0, -1] (1 + $CellContext`a^2)^Rational[-1, 2]], 
                    Im[
                    Complex[0, -1] (1 + $CellContext`a^2)^Rational[-1, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Complex[0, -1] (1 + $CellContext`a^2)^
                    Rational[-1, 2], {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$], 
                    (
                    Piecewise[{{
                    0. + 1.2971078940816327` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2971078940816327` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$], \
-1.2133333333333334`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6509$$]], \

                    (Piecewise[{{
                    0. + 1.2971078940816327` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2971078940816327` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6509$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$ + 
                    0.002426666666666667, 
                    CalculateUtilities`GraphicsUtilities`Private`max6509$$]], 
                    1.2133333333333334`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6508$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6509$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2166560]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2166560[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    All, 1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2166560[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMtDHGJySggzFpQEnK995ip7Fw7WA72+\
DPg89ukmbtKsV0gKb0w6m+NI/vnnvuek+OZJT2e72evmrNB8lJegNPj60ZylkuC0HeneaKas2kSK/\
gs9vWxNTsUQ4/KPG+69a8l2oGxp9f4fvAk4KDoV8N48wwqif7CvKMJbr2jBQ7tj+ZcJkAZz/p0+\
2t3d0XL3c8DMYyAmOoEvp5W8g8U6Bp2kOga9a85SC++\
eOj8vip4Dym3wsqEqofWO9YAbEwUgDHfIJvvdxM3cXEDAgCilw4TU6ew7YXaKOYmI7pLMc3zidrqy0\
wqKn23NwruVmnIB/+TXwgYxeT97ik3dkRGBbGJaPvrKz+OXcDPL9uC6/\
kyWriML83HHkDw46pXqbzWes6eUaqrnXRz7m6qPmy0SDPnzL1/9Ih02Y5jO22YdDZka3xau0tw++\
0hZc5dv1c3Pet+\
ewdJeCq4VAJ7qMkBZ9H0Ux54CXaPl2dW4fHuFPxHaMzpIIVTmTjLPvF9cfDCrzeFGKs3WQD0hH1DIh\
oTq2LOG732JSZYQYKEgs8v65fNtlY1qEE3Nm+9kwQZgeYJ2Td8oTmIF2oO5gk+/\
JHxa3kcqbJkPcDYeiUqrWiv4X1UZZcQcYyMJIYL2jqNZjDKqkRqGDZD0qQOAfBEJL9sh/\
3zT9crARSta9QXcqzOHClOQ1Pol8W+\
JCKqcmaO3bg6ApuW8wmkie16iKWpovTZnNM95tMN25oDvRQEkJLEj7Qu02h2xT+\
6qawtAd3a0K3JnRrQrcmdGvC/7smuIjxX+k3y8i4lg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(-I)/Sqrt[1 + a^2], {a, -8.5, 8.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6511$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6510$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6511$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2166684$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6510$\
2166685$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6511$2166686$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6511$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6510$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2166684$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6510$\
2166685$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6511$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6511$\
2166686$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2166661[
                    
                    Plot[{
                    Re[Complex[0, -1] (1 + $CellContext`a^2)^Rational[-1, 2]], 
                    Im[
                    Complex[0, -1] (1 + $CellContext`a^2)^Rational[-1, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Complex[0, -1] (1 + $CellContext`a^2)^
                    Rational[-1, 2], {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$], 
                    (
                    Piecewise[{{
                    0. + 9.07975525857143 Tan[1.5040801783846716` #], # < 0}},
                     0. + 9.07975525857143 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$], \
-8.493333333333334], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6511$$]], \

                    (Piecewise[{{
                    0. + 9.07975525857143 Tan[1.5040801783846716` #], # < 0}},
                     0. + 9.07975525857143 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6511$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$ + 
                    0.016986666666666667`, 
                    CalculateUtilities`GraphicsUtilities`Private`max6511$$]], 
                    8.493333333333334]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6510$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6511$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2166661]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2166661[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2166661[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkbah8gkJ1rExaUBJyvd6ySWxcO1gO9vgz4PPbpJm7SrFdICm9MOpvjSP75577nrPT0SQ9Hu9nr\
ppzAfB4mQLT8+MGYlZLgoevz/PJShFBU9u4LN7xoSg94GRHxA7321jDoScEe3Ob/\
B9wqKCEQ1fNWVUU1DTQ0nyjEaq9owlPTU/mTIREUZ/woud7eFw+\
HrXwWAsY6I1SK5220LmmSQKkh4C3TJmjxH+zR2flsdPBWMhfC+AR6AeG+9EktjACE4Y5uN96/\
Vm6gEmpgmPiYyvnCYrz1HbC5SWlKcTmOX4xuVkbbcFJjJVjpuHJTfrFOTCv4MPRGhjch6btD1bAv3C\
uGb0XZTVP+dugOe3beGlOFtNHOb3jiFvRNNTUMt0vmxdJ8dI1bU2+jlXVzVfNhrk5VOm/\
l86pkovh7HTNgyYnZgar9beMvyrtvAix66fi/uRMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5XfIfo9KlghROYOMt+\
sf3xpAKvN4UQazfdgHR4PQMCyMG4YsvtPk2pHmVEksgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5Qs1J3oKPvyR8Wt5HKhyZD3I64hBblW9HexPtKQy+\
OJ8IwkxAuaevXmsEpqTKS37AclSJgTThGS/jIf+\
809XKwEUnUoUV3SsTiwpTn3T6JfFvgYeKqz5o7tObq82xazCcRZrbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DcvYuJY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], "Output", 
          {Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "", "timedout" -> "Series", 
     "timedoutpods" -> "", "timing" -> "3.66", "parsetiming" -> "1.541", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www5a.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa8761a8ge174aeefh3d60000698b16gf6e2f0f61146621629766932987", "id" -> 
     "MSP8771a8ge174aeefh3d60000455ch1185f59d11e", "host" -> 
     "https://www5a.wolframalpha.com", "server" -> "17", "related" -> 
     "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa8781a8ge174aeefh3d600005ig7c2e324dh70f4146621629766932987", "version" -> 
     "2.6", "inputstring" -> 
     "Limit[(z - (-I*ArcSinh[a] + 2*Pi))/(I*Sin[z] - a), {z -> -I*ArcSinh[a] \
+ 2 Pi}]"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "", "timedout" -> "Series", 
     "timedoutpods" -> "", "timing" -> "2.122", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "39", "host" -> 
     "https://www5a.wolframalpha.com", "server" -> "39", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "Limit[(z - (-I*ArcSinh[a] + 2*Pi))/(I*Sin[z] - a), {z -> -I*ArcSinh[a] \
+ 2 Pi}]"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 11, 19, 16, 38, 37.039888`8.321244643874547}, "Line" -> 
    5, "SessionID" -> 18679885682767632340}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Limit[(z - (-I*ArcSinh[a] + 2*Pi))/(I*Sin[z] - a), {z -> -I*ArcSinh[a] + \
2 Pi}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {505.8515625, 511.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www5a.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa8761a8ge174aeefh3d60000698b16gf6e2f0f61146621629766932987", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.846325117061088*^9},ExpressionUUID->"1e7d3f9a-c21e-4a27-96ad-\
38b8e14c504d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.846325015620508*^9, 
  3.846325017211864*^9}},ExpressionUUID->"b4ebfb80-9db1-41c9-996b-\
2ed0ced8dcc1"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["\[ImaginaryI]", 
   SqrtBox[
    RowBox[{"1", "+", 
     SuperscriptBox["a", "2"]}]]]}]], "Output",
 CellChangeTimes->{{3.84631747484464*^9, 3.846317528829311*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"34d02e33-8008-4da6-a20e-d9baa8a0c855"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["\[ImaginaryI]", 
    SqrtBox[
     RowBox[{"1", "+", 
      SuperscriptBox["a", "2"]}]]]}], "*", "2", "*", "Pi", " ", "*", 
  "I"}]], "Input",
 CellChangeTimes->{{3.846322913979887*^9, 3.846322926392964*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"57cc5276-c999-467a-889e-5e19f93e191c"],

Cell[BoxData[
 FractionBox[
  RowBox[{"2", " ", "\[Pi]"}], 
  SqrtBox[
   RowBox[{"1", "+", 
    SuperscriptBox["a", "2"]}]]]], "Output",
 CellChangeTimes->{3.846322927559643*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"9261c4e3-e8d5-4234-b60a-b32f7d279161"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", 
   RowBox[{
    RowBox[{"I", "*", 
     RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
    RowBox[{"2", "*", "Pi"}]}], "]"}], "-", "a"}]], "Input",
 CellChangeTimes->{{3.8463249051771812`*^9, 3.846324958341915*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"564eb921-2d99-481a-b01e-21d89527c198"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "\[ImaginaryI]"}], ")"}], " ", "a"}]], "Output",
 CellChangeTimes->{{3.846324945887261*^9, 3.846324960126664*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"335d8d1b-5c31-4bc0-8be1-4d925da4d743"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "I"}], "*", 
     RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
    RowBox[{"2", "*", "Pi"}]}], ")"}], "-", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "I"}], "*", 
      RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
     RowBox[{"2", "*", "Pi"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"I", "*", 
        RowBox[{"ArcSinh", "[", "a", "]"}]}], "+", 
       RowBox[{"2", "*", "Pi"}]}], "]"}], "-", "a"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.846325019603869*^9, 3.8463250720627947`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"7ea80c7d-57be-4604-8944-73828efe60bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"2", " ", "\[Pi]"}], "+", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], "+", 
       FractionBox["\[ImaginaryI]", "2"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]"}], "-", 
       RowBox[{"\[ImaginaryI]", " ", 
        RowBox[{"ArcSinh", "[", "a", "]"}]}]}], ")"}]}], "a"], "-", 
   RowBox[{"\[ImaginaryI]", " ", 
    RowBox[{"ArcSinh", "[", "a", "]"}]}]}], "\[IndentingNewLine]"}]], "Input",
 
 CellChangeTimes->{{3.846735141265583*^9, 3.846735178249722*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"621c52c9-8c97-4525-92da-f54b67f5db3d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", "\[Pi]"}], "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "2"], "+", 
      FractionBox["\[ImaginaryI]", "2"]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", " ", "\[Pi]"}], "-", 
      RowBox[{"\[ImaginaryI]", " ", 
       RowBox[{"ArcSinh", "[", "a", "]"}]}]}], ")"}]}], "a"], "-", 
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"ArcSinh", "[", "a", "]"}]}]}]], "Output",
 CellChangeTimes->{3.846735180833547*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"17ba8a06-f679-4214-9c46-b85792ebe639"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solve[Sin[x]-a==0,x]", "WolframAlphaLong",
 CellChangeTimes->{{3.846735183347169*^9, 3.846735210686297*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"d207d494-dd99-4f20-ac94-2b512bc1a971"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve[Sin[x]-a==0,x]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Solve[Sin[x] - a == 0, x, MaxExtraConditions -> Automatic]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], "-", "a"}], 
                    "\[LongEqual]", "0"}], HoldForm], 
                    StyleBox["\" for \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "x"}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "3", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-a + Sin[x] == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"x", "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    SuperscriptBox["sin", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}]}], "+", 
                   RowBox[{"2", " ", "\[Pi]", " ", "n"}], "+", "\[Pi]"}], 
                 Identity]}], 
              RowBox[{"n", "\[Element]", 
                TemplateBox[{}, "Integers"]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-a + Sin[x] == 0, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"x", "\[LongEqual]", 
                TagBox[
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["sin", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}], "+", 
                   RowBox[{"2", " ", "\[Pi]", " ", "n"}]}], Identity]}], 
              RowBox[{"n", "\[Element]", 
                TemplateBox[{}, "Integers"]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Solve for \"", "x"}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], "-", "a"}], HoldForm], 
                    "\[LongEqual]", "0"}], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Add \"", 
                    TemplateBox[{"a", "\" \""}, "RowDefault"], "\"to \"", 
                    "\"both \"", "\"sides\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"sin", "(", "x", ")"}], "\[LongEqual]", "a"}], 
                    HoldForm], HoldForm], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Take \"", "\"the \"", "\"inverse \"", "\"sine \"", 
                    "\"of \"", "\"both \"", "\"sides\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"\[Pi]", "-", 
                    RowBox[{
                    SuperscriptBox["sin", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}], "+", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SubscriptBox["n", "1"]}]}], HoldForm]}], HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{
                    SubscriptBox["n", "1"], "\[Element]", 
                    TemplateBox[{}, "Integers"]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TemplateBox[{"\"   \"", 
                    TemplateBox[{
                    StyleBox["\"or\"", 
                    GrayLevel[0.7], StripOnInput -> False], "\" \"", "\" \""},
                     "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["sin", 
                    RowBox[{"-", "1"}]], "(", "a", ")"}], "+", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SubscriptBox["n", "2"]}]}], HoldForm]}], HoldForm], 
                    StyleBox["\"  for  \"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    RowBox[{
                    SubscriptBox["n", "2"], "\[Element]", 
                    TemplateBox[{}, "Integers"]}]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], HoldForm], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "2"}, {
         XMLElement[
         "info", {"text" -> "sin^(-1)(x) is the inverse sine function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/ArcSin.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://functions.wolfram.com/ElementaryFunctions/ArcSin", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/InverseSine.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "Z is the set of integers"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Integers.html", 
             "text" -> "Documentation", "title" -> "Documentation"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "Result__Approximate forms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Solve", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.038", "parsetiming" -> "0.526", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP8461b669c2f3ig869ca0000524d1eb4251bg6g6", "host" -> 
    "https://www3.wolframalpha.com", "server" -> "31", "related" -> 
    "https://www3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa8471b669c2f3ig869ca00003gh9446d839774i53991829607681389962", "version" -> 
    "2.6", "inputstring" -> "Solve[Sin[x]-a==0,x]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2021, 11, 24, 10, 33, 37.215578`8.323299747532653}, "Line" -> 
    4, "SessionID" -> 18682570161819127352}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Solve[Sin[x]-a==0,x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {227.8515625, 233.1484375}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.846735217255978*^9},ExpressionUUID->"4577cce2-f5a8-47ce-b550-\
ff31f3613ab7"]
}, Open  ]]
},
WindowSize->{1440., 757.5},
WindowMargins->{{0, Automatic}, {0, Automatic}},
TaggingRules->Association["TryRealOnly" -> False],
FrontEndVersion->"12.3 for Linux x86 (64-bit) (May 11, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"edbb9424-eb0d-453f-b8ee-fff8a983ec87"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 499, 6, 41, "WolframAlphaLong",ExpressionUUID->"0ec07151-dc7b-47bc-98cd-495f3bc76b55"],
Cell[1082, 30, 318604, 5544, 2085, "Print",ExpressionUUID->"bfb2a6ed-29ed-4532-b269-ae384aaf1db9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319723, 5579, 635, 19, 44, "Input",ExpressionUUID->"af76b483-2a06-4972-8de0-22e146751c24"],
Cell[320361, 5600, 626, 18, 40, "Output",ExpressionUUID->"37c73182-07e8-4c25-8932-211f15b12cda"]
}, Open  ]],
Cell[321002, 5621, 154, 3, 29, "Input",ExpressionUUID->"2a79cb9a-4ae2-44cd-bb9e-78a253cedfee"],
Cell[CellGroupData[{
Cell[321181, 5628, 630, 19, 44, "Input",ExpressionUUID->"afdcce61-6cae-4bb6-a004-0bfd6192b5aa"],
Cell[321814, 5649, 594, 18, 40, "Output",ExpressionUUID->"8406d242-b9fa-4289-a6a5-274f04fe4550"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322445, 5672, 307, 5, 41, "WolframAlphaLong",ExpressionUUID->"09a92347-f290-4f13-83cf-e3f7d80183e1"],
Cell[322755, 5679, 10253, 175, 113, "Print",ExpressionUUID->"0e0148f8-3ac1-4f01-b661-6706c23eacab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333045, 5859, 524, 14, 46, "Input",ExpressionUUID->"bae4bfac-94f1-4091-ae5a-770e953f2205"],
Cell[333572, 5875, 430, 13, 64, "Output",ExpressionUUID->"ec24a8ef-098a-4b6c-a9e5-a78412de5773"]
}, Open  ]],
Cell[CellGroupData[{
Cell[334039, 5893, 572, 15, 63, "Input",ExpressionUUID->"74e43602-06c2-4725-a792-033943a2af4b"],
Cell[334614, 5910, 484, 13, 49, "Output",ExpressionUUID->"ce716c7b-9aca-4724-8a1d-e0c0733c9c64"]
}, Open  ]],
Cell[335113, 5926, 182, 4, 26, "Input",ExpressionUUID->"6e43d72c-7eaf-47fc-9cc8-a8f401415bf4"],
Cell[CellGroupData[{
Cell[335320, 5934, 642, 16, 46, "Input",ExpressionUUID->"9fc33f1d-1e22-406c-9cfa-e963ceb62be7"],
Cell[335965, 5952, 919, 29, 67, "Output",ExpressionUUID->"184fd0e7-9c08-4c24-b18f-e52a5e558c9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[336921, 5986, 279, 5, 51, "Input",ExpressionUUID->"c5cc7998-4e89-4709-9ab2-f8c40ccacd7e"],
Cell[337203, 5993, 149, 2, 33, "Output",ExpressionUUID->"5441da7f-39a5-48c7-ac4d-5f7ccf57885b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337389, 6000, 400, 11, 60, "Input",ExpressionUUID->"14c25c3f-0a2b-4883-b050-33a7592e6da3"],
Cell[337792, 6013, 450, 12, 51, "Output",ExpressionUUID->"6efc14c4-f952-48fb-8365-da47d14b0efb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[338279, 6030, 719, 21, 48, "Input",ExpressionUUID->"ece55d48-8ec0-45b0-8999-d271758b32c3"],
Cell[339001, 6053, 650, 19, 51, "Output",ExpressionUUID->"5b278a3c-09e3-48ab-9399-89f810390248"]
}, Open  ]],
Cell[339666, 6075, 658, 20, 62, "Input",ExpressionUUID->"17e1f71f-f6cd-4568-bdfe-e5b06b584506"],
Cell[340327, 6097, 594, 17, 49, "Input",ExpressionUUID->"3440f024-6e9f-441b-bf64-9cc76cdc15dd"],
Cell[CellGroupData[{
Cell[340946, 6118, 202, 3, 29, "Input",ExpressionUUID->"f17c9d56-a747-4e9a-9dd1-9beda6cc18ec"],
Cell[341151, 6123, 279, 7, 49, "Output",ExpressionUUID->"c8eccefe-3222-4cae-aec7-53df181bd397"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341467, 6135, 306, 7, 44, "Input",ExpressionUUID->"f1e45474-85d7-47ea-bf87-731dc4593d8b"],
Cell[341776, 6144, 282, 7, 49, "Output",ExpressionUUID->"746332b0-746b-498a-93b5-8366184b4fc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[342095, 6156, 552, 16, 49, "Input",ExpressionUUID->"151cc4cc-822e-4278-a796-c7bbba0c6d94"],
Cell[342650, 6174, 595, 17, 51, "Output",ExpressionUUID->"ab0eea7a-39be-4c37-8153-a1be5a225f19"]
}, Open  ]],
Cell[343260, 6194, 152, 3, 29, "Input",ExpressionUUID->"3b76779e-68ba-49e0-9736-8b175a0b1130"],
Cell[CellGroupData[{
Cell[343437, 6201, 757, 21, 63, "Input",ExpressionUUID->"f43b483e-31d5-4264-9971-bc1e62315ad6"],
Cell[344197, 6224, 473, 13, 51, "Output",ExpressionUUID->"01121382-4d4b-4caf-ba04-395a83c201f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344707, 6242, 556, 15, 49, "Input",ExpressionUUID->"b1870947-211d-443b-81f1-d99f032135c4"],
Cell[345266, 6259, 472, 13, 51, "Output",ExpressionUUID->"8de671b5-5941-4b9c-8190-1ce45f76d81c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[345775, 6277, 487, 15, 47, "Input",ExpressionUUID->"32248228-15d4-461e-8d68-fdd2a65f340f"],
Cell[346265, 6294, 234, 5, 48, "Output",ExpressionUUID->"d12b8455-3a26-40d3-9a25-0730a45f310a"]
}, Open  ]],
Cell[346514, 6302, 201, 3, 29, "Input",ExpressionUUID->"e6abe8fa-8711-4133-ae3f-ed5adf0a9658"],
Cell[346718, 6307, 177, 3, 29, "Input",ExpressionUUID->"e22572aa-8006-46ff-9fbb-1438f409630b"],
Cell[CellGroupData[{
Cell[346920, 6314, 177, 3, 29, "Input",ExpressionUUID->"d9b4302b-bead-4bc4-a30f-3bbe0def8b71"],
Cell[347100, 6319, 281, 7, 49, "Output",ExpressionUUID->"92275e07-055b-48d0-a9cb-08d3c3365307"]
}, Open  ]],
Cell[CellGroupData[{
Cell[347418, 6331, 334, 9, 44, "Input",ExpressionUUID->"71cc19be-b7ca-4e1f-a2fb-70a378f08f4f"],
Cell[347755, 6342, 211, 5, 48, "Output",ExpressionUUID->"8b59746d-034d-4a12-95c5-2f62a86b9416"]
}, Open  ]],
Cell[CellGroupData[{
Cell[348003, 6352, 369, 9, 59, "Input",ExpressionUUID->"a5fcb0da-84f2-4016-8c20-aa8f628de22d"],
Cell[348375, 6363, 211, 5, 48, "Output",ExpressionUUID->"6c332a88-6082-4d50-8063-390316e72889"]
}, Open  ]],
Cell[CellGroupData[{
Cell[348623, 6373, 601, 15, 66, "Input",ExpressionUUID->"65786cc6-915f-409d-ad72-00b3704cde49"],
Cell[349227, 6390, 170, 2, 33, "Output",ExpressionUUID->"9eb25aac-7337-4ad3-87a8-f49397e0bca1"],
Cell[349400, 6394, 150, 2, 33, "Output",ExpressionUUID->"53f2d840-e467-4ca7-a4c1-5c6ad34da439"]
}, Open  ]],
Cell[CellGroupData[{
Cell[349587, 6401, 251, 3, 41, "WolframAlphaLong",ExpressionUUID->"d0d17517-1aea-4fa0-9945-3d1756ad7c4b"],
Cell[349841, 6406, 24667, 503, 559, "Print",ExpressionUUID->"48d98ab4-cee4-4bea-a0b5-5f15c643f3b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374545, 6914, 490, 15, 46, "Input",ExpressionUUID->"933661ec-8633-4d70-80c8-c138920391ca"],
Cell[375038, 6931, 627, 19, 51, "Output",ExpressionUUID->"97fbcb34-d0fc-4608-b954-077711694287"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375702, 6955, 719, 21, 48, "Input",ExpressionUUID->"fa5ac3e0-96f3-49b9-b852-34cd82839459"],
Cell[376424, 6978, 630, 19, 51, "Output",ExpressionUUID->"7b1f00fc-72e4-4fd1-b7ef-0ed01d32ea21"]
}, Open  ]],
Cell[377069, 7000, 305, 7, 44, "Input",ExpressionUUID->"7a2b465e-1029-446d-a5e4-04c4c0c1cac3"],
Cell[377377, 7009, 382, 11, 46, "Input",ExpressionUUID->"f1e1625a-73dc-4611-890e-30ec7b8699d5"],
Cell[CellGroupData[{
Cell[377784, 7024, 692, 17, 66, "Input",ExpressionUUID->"dc58fc95-f8bc-4611-904b-0d68b6325777"],
Cell[378479, 7043, 165, 2, 33, "Output",ExpressionUUID->"e2de54be-3ab5-4e5e-9e26-2123cdc30bb5"],
Cell[378647, 7047, 556, 14, 53, "Output",ExpressionUUID->"ec7b1e82-3b32-4b95-a467-5175819c02d0"]
}, Open  ]],
Cell[379218, 7064, 154, 3, 29, "Input",ExpressionUUID->"b011f601-498a-4f38-a30a-e01ee820a3a8"],
Cell[CellGroupData[{
Cell[379397, 7071, 582, 17, 46, "Input",ExpressionUUID->"9f10b489-57cb-4358-b298-feff9c616805"],
Cell[379982, 7090, 170, 2, 33, "Output",ExpressionUUID->"c6136cf0-ff2b-4366-a1c3-0d24fcd93229"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380189, 7097, 281, 4, 41, "WolframAlphaLong",ExpressionUUID->"6d58386b-f989-4b67-8f02-c7048e4370fd"],
Cell[380473, 7103, 105066, 2021, 1105, "Print",ExpressionUUID->"618fe832-e3db-447e-87be-9f6d5d044695"]
}, Open  ]],
Cell[CellGroupData[{
Cell[485576, 9129, 369, 9, 44, "Input",ExpressionUUID->"493c5d3e-4dbf-48cf-90d0-f30622bb6432"],
Cell[485948, 9140, 173, 2, 33, "Output",ExpressionUUID->"6f2a40ac-6127-4c82-9501-fe80c2833c84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[486158, 9147, 338, 9, 44, "Input",ExpressionUUID->"bbee8346-ef2e-4761-ac6d-36f3ae43e5b1"],
Cell[486499, 9158, 1040, 29, 45, "Output",ExpressionUUID->"c0fc72b9-99a4-44d1-ba00-d01237bd0676"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487576, 9192, 654, 16, 45, "Input",ExpressionUUID->"2cfe1ace-4d0c-4a47-84e7-aa44dd8e4031"],
Cell[488233, 9210, 510, 12, 50, "Output",ExpressionUUID->"778a2b76-9fcb-4e65-a296-57231d68fba3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[488780, 9227, 524, 13, 44, "Input",ExpressionUUID->"c35d9aed-3199-46fd-acf0-c5eeaa83751b"],
Cell[489307, 9242, 367, 7, 48, "Output",ExpressionUUID->"7ff62f64-8e73-4b9f-8dce-f3fded2aaf6a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[489711, 9254, 288, 6, 41, "WolframAlphaLong",ExpressionUUID->"c63cbdd5-c297-473e-8151-5d2b00375c4c"],
Cell[490002, 9262, 111475, 2127, 1027, "Print",ExpressionUUID->"1e7d3f9a-c21e-4a27-96ad-38b8e14c504d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[601514, 11394, 152, 3, 29, "Input",ExpressionUUID->"b4ebfb80-9db1-41c9-996b-2ed0ced8dcc1"],
Cell[601669, 11399, 287, 7, 53, "Output",ExpressionUUID->"34d02e33-8008-4da6-a20e-d9baa8a0c855"]
}, Open  ]],
Cell[CellGroupData[{
Cell[601993, 11411, 343, 9, 66, "Input",ExpressionUUID->"57cc5276-c999-467a-889e-5e19f93e191c"],
Cell[602339, 11422, 258, 7, 53, "Output",ExpressionUUID->"9261c4e3-e8d5-4234-b60a-b32f7d279161"]
}, Open  ]],
Cell[CellGroupData[{
Cell[602634, 11434, 337, 8, 44, "Input",ExpressionUUID->"564eb921-2d99-481a-b01e-21d89527c198"],
Cell[602974, 11444, 273, 6, 33, "Output",ExpressionUUID->"335d8d1b-5c31-4bc0-8be1-4d925da4d743"]
}, Open  ]],
Cell[603262, 11453, 742, 23, 45, "Input",ExpressionUUID->"7ea80c7d-57be-4604-8944-73828efe60bf"],
Cell[CellGroupData[{
Cell[604029, 11480, 670, 19, 94, InheritFromParent,ExpressionUUID->"621c52c9-8c97-4525-92da-f54b67f5db3d"],
Cell[604702, 11501, 595, 17, 56, "Output",ExpressionUUID->"17ba8a06-f679-4214-9c46-b85792ebe639"]
}, Open  ]],
Cell[CellGroupData[{
Cell[605334, 11523, 192, 2, 41, "WolframAlphaLong",ExpressionUUID->"d207d494-dd99-4f20-ac94-2b512bc1a971"],
Cell[605529, 11527, 22037, 446, 471, "Print",ExpressionUUID->"4577cce2-f5a8-47ce-b550-ff31f3613ab7"]
}, Open  ]]
}
]
*)

